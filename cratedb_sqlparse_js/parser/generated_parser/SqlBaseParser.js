// Generated from SqlBaseParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import SqlBaseParserListener from './SqlBaseParserListener.js';
const serializedATN = [4,1,331,2621,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,1,0,1,0,1,0,5,0,254,8,0,10,0,12,0,257,9,0,1,0,3,0,260,8,0,1,
0,1,0,1,1,1,1,3,1,266,8,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,3,3,276,8,3,1,
3,1,3,3,3,280,8,3,1,3,5,3,283,8,3,10,3,12,3,286,9,3,3,3,288,8,3,1,3,1,3,
1,3,1,3,3,3,294,8,3,1,3,5,3,297,8,3,10,3,12,3,300,9,3,3,3,302,8,3,1,3,1,
3,3,3,306,8,3,1,3,1,3,3,3,310,8,3,1,3,1,3,1,3,1,3,5,3,316,8,3,10,3,12,3,
319,9,3,3,3,321,8,3,1,3,1,3,1,3,1,3,1,3,3,3,328,8,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,5,3,339,8,3,10,3,12,3,342,9,3,1,3,3,3,345,8,3,1,3,3,3,348,
8,3,1,3,1,3,1,3,1,3,3,3,354,8,3,1,3,1,3,1,3,1,3,1,3,3,3,361,8,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,3,3,371,8,3,1,3,1,3,1,3,3,3,376,8,3,1,3,1,3,1,3,
1,3,1,3,3,3,383,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,391,8,3,1,3,1,3,1,3,3,3,
396,8,3,1,3,1,3,1,3,3,3,401,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,409,8,3,10,3,
12,3,412,9,3,1,3,1,3,1,3,1,3,3,3,418,8,3,1,3,1,3,1,3,1,3,5,3,424,8,3,10,
3,12,3,427,9,3,1,3,1,3,3,3,431,8,3,1,3,1,3,1,3,1,3,3,3,437,8,3,1,3,1,3,1,
3,1,3,1,3,3,3,444,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,452,8,3,10,3,12,3,455,
9,3,3,3,457,8,3,1,3,1,3,1,3,3,3,462,8,3,1,3,1,3,1,3,5,3,467,8,3,10,3,12,
3,470,9,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,478,8,3,1,3,1,3,1,3,3,3,483,8,3,1,
3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,492,8,3,10,3,12,3,495,9,3,1,3,1,3,3,3,499,
8,3,1,3,1,3,3,3,503,8,3,1,3,3,3,506,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
3,3,516,8,3,1,3,3,3,519,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,527,8,3,10,3,12,
3,530,9,3,1,3,1,3,3,3,534,8,3,1,3,1,3,1,3,3,3,539,8,3,1,3,1,3,3,3,543,8,
3,1,3,1,3,1,3,3,3,548,8,3,1,3,3,3,551,8,3,1,3,1,3,3,3,555,8,3,1,3,1,3,3,
3,559,8,3,1,3,1,3,1,3,1,3,1,3,3,3,566,8,3,3,3,568,8,3,1,3,1,3,1,3,1,3,3,
3,574,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,582,8,3,3,3,584,8,3,1,3,1,3,1,3,1,
3,3,3,590,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,598,8,3,3,3,600,8,3,1,3,1,3,1,
3,1,3,3,3,606,8,3,1,3,1,3,1,3,1,3,1,3,3,3,613,8,3,1,3,1,3,3,3,617,8,3,1,
3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,628,8,3,1,3,1,3,1,3,1,3,1,3,3,3,635,
8,3,1,3,3,3,638,8,3,1,3,1,3,1,3,1,3,3,3,644,8,3,3,3,646,8,3,1,4,1,4,1,4,
1,4,1,4,3,4,653,8,4,1,4,1,4,1,4,1,4,1,4,3,4,660,8,4,1,4,1,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,676,8,4,1,4,1,4,1,4,1,4,1,4,5,4,
683,8,4,10,4,12,4,686,9,4,3,4,688,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,696,8,
4,1,4,1,4,1,4,1,4,1,4,3,4,703,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,713,
8,4,1,4,1,4,1,4,1,4,1,4,3,4,720,8,4,1,4,1,4,1,4,1,4,1,4,3,4,727,8,4,1,4,
1,4,3,4,731,8,4,1,4,1,4,1,4,1,4,1,4,3,4,738,8,4,1,4,1,4,3,4,742,8,4,1,4,
1,4,1,4,1,4,1,4,3,4,749,8,4,1,4,1,4,1,4,1,4,1,4,3,4,756,8,4,1,5,1,5,1,5,
1,5,1,5,1,5,5,5,764,8,5,10,5,12,5,767,9,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,775,
8,5,10,5,12,5,778,9,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,800,8,5,10,5,12,5,803,9,5,1,5,1,5,3,5,
807,8,5,3,5,809,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
1,5,5,5,825,8,5,10,5,12,5,828,9,5,1,5,1,5,3,5,832,8,5,3,5,834,8,5,1,5,1,
5,3,5,838,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,846,8,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,3,5,856,8,5,1,5,1,5,1,5,1,5,3,5,862,8,5,1,5,1,5,1,5,1,5,1,5,1,
5,3,5,870,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,3,5,890,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,916,8,5,1,5,1,5,1,
5,3,5,921,8,5,5,5,923,8,5,10,5,12,5,926,9,5,1,5,1,5,1,5,1,5,1,5,3,5,933,
8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,944,8,6,1,7,3,7,947,8,7,1,7,
1,7,1,8,1,8,1,8,1,8,1,8,1,8,5,8,957,8,8,10,8,12,8,960,9,8,3,8,962,8,8,1,
8,3,8,965,8,8,1,8,3,8,968,8,8,1,8,3,8,971,8,8,1,8,3,8,974,8,8,3,8,976,8,
8,1,9,1,9,1,9,3,9,981,8,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,989,8,9,1,10,1,10,
1,10,3,10,994,8,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,1002,8,11,1,11,1,11,
1,11,3,11,1007,8,11,1,11,5,11,1010,8,11,10,11,12,11,1013,9,11,1,12,1,12,
1,13,1,13,3,13,1019,8,13,1,13,1,13,3,13,1023,8,13,1,14,1,14,3,14,1027,8,
14,1,14,1,14,1,14,5,14,1032,8,14,10,14,12,14,1035,9,14,1,14,1,14,1,14,1,
14,5,14,1041,8,14,10,14,12,14,1044,9,14,3,14,1046,8,14,1,14,3,14,1049,8,
14,1,14,1,14,1,14,1,14,1,14,5,14,1056,8,14,10,14,12,14,1059,9,14,3,14,1061,
8,14,1,14,1,14,3,14,1065,8,14,1,14,1,14,1,14,1,14,5,14,1071,8,14,10,14,12,
14,1074,9,14,3,14,1076,8,14,1,14,1,14,1,14,1,14,5,14,1082,8,14,10,14,12,
14,1085,9,14,3,14,1087,8,14,1,15,1,15,3,15,1091,8,15,1,15,3,15,1094,8,15,
1,15,1,15,1,15,1,15,1,15,3,15,1101,8,15,1,16,1,16,1,16,1,17,1,17,1,17,1,
17,5,17,1110,8,17,10,17,12,17,1113,9,17,1,18,1,18,1,18,1,18,1,18,1,19,1,
19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
1,19,3,19,1137,8,19,5,19,1139,8,19,10,19,12,19,1142,9,19,1,20,3,20,1145,
8,20,1,20,1,20,3,20,1149,8,20,1,20,1,20,3,20,1153,8,20,1,20,1,20,3,20,1157,
8,20,3,20,1159,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,1168,8,21,10,
21,12,21,1171,9,21,1,21,1,21,3,21,1175,8,21,1,22,1,22,3,22,1179,8,22,1,22,
1,22,3,22,1183,8,22,3,22,1185,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
23,1,23,3,23,1196,8,23,1,24,1,24,1,24,1,24,1,24,1,24,5,24,1204,8,24,10,24,
12,24,1207,9,24,1,24,1,24,3,24,1211,8,24,1,25,1,25,1,25,1,25,3,25,1217,8,
25,1,25,1,25,5,25,1221,8,25,10,25,12,25,1224,9,25,1,25,1,25,3,25,1228,8,
25,1,26,1,26,1,26,1,26,5,26,1234,8,26,10,26,12,26,1237,9,26,1,26,1,26,1,
27,1,27,1,27,1,27,5,27,1245,8,27,10,27,12,27,1248,9,27,1,28,1,28,3,28,1252,
8,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,
30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1274,8,30,3,30,1276,8,30,3,30,1278,
8,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,1286,8,30,10,30,12,30,1289,9,30,
1,31,1,31,3,31,1293,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1303,
8,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1311,8,32,1,32,1,32,1,32,1,32,1,
32,5,32,1318,8,32,10,32,12,32,1321,9,32,1,32,1,32,1,32,3,32,1326,8,32,1,
32,1,32,1,32,3,32,1331,8,32,1,32,1,32,1,32,1,32,3,32,1337,8,32,1,32,3,32,
1340,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1349,8,32,1,32,1,32,3,
32,1353,8,32,1,32,1,32,1,32,3,32,1358,8,32,1,32,1,32,1,32,3,32,1363,8,32,
1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,1372,8,33,1,33,1,33,1,33,1,33,1,
33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,5,33,1389,8,33,10,33,
12,33,1392,9,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,1402,8,34,1,
34,3,34,1405,8,34,1,34,1,34,1,34,1,34,3,34,1411,8,34,1,34,1,34,1,34,5,34,
1416,8,34,10,34,12,34,1419,9,34,3,34,1421,8,34,1,34,1,34,3,34,1425,8,34,
1,34,1,34,3,34,1429,8,34,1,34,3,34,1432,8,34,1,34,1,34,1,34,1,34,1,34,1,
34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,
1453,8,34,10,34,12,34,1456,9,34,1,34,3,34,1459,8,34,1,34,3,34,1462,8,34,
1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,1477,
8,34,1,34,1,34,3,34,1481,8,34,1,34,1,34,1,34,1,34,5,34,1487,8,34,10,34,12,
34,1490,9,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1498,8,35,1,35,1,35,1,35,
1,35,1,35,3,35,1505,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
3,35,1531,8,35,1,35,1,35,1,35,1,35,1,35,3,35,1538,8,35,1,35,3,35,1541,8,
35,1,35,3,35,1544,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
35,1,35,1,35,4,35,1573,8,35,11,35,12,35,1574,1,35,1,35,3,35,1579,8,35,1,
35,1,35,1,35,1,35,4,35,1585,8,35,11,35,12,35,1586,1,35,1,35,3,35,1591,8,
35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1602,8,35,1,35,1,35,
1,35,1,35,3,35,1608,8,35,1,36,1,36,1,36,1,36,1,37,1,37,3,37,1616,8,37,1,
37,1,37,1,37,1,37,5,37,1622,8,37,10,37,12,37,1625,9,37,3,37,1627,8,37,1,
37,1,37,1,37,1,37,1,37,5,37,1634,8,37,10,37,12,37,1637,9,37,3,37,1639,8,
37,1,37,3,37,1642,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1652,
8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1675,8,39,1,40,1,40,3,40,1679,
8,40,1,41,1,41,3,41,1683,8,41,1,42,1,42,1,42,3,42,1688,8,42,1,43,1,43,1,
44,1,44,1,45,1,45,5,45,1696,8,45,10,45,12,45,1699,9,45,1,45,1,45,1,46,1,
46,3,46,1705,8,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,
1717,8,48,10,48,12,48,1720,9,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,
1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,3,54,1741,8,54,1,
54,1,54,1,54,1,54,1,54,5,54,1748,8,54,10,54,12,54,1751,9,54,3,54,1753,8,
54,1,54,1,54,1,54,1,54,1,54,5,54,1760,8,54,10,54,12,54,1763,9,54,3,54,1765,
8,54,1,54,3,54,1768,8,54,1,54,3,54,1771,8,54,1,55,1,55,1,55,1,55,1,55,1,
55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1789,8,55,1,56,
1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1800,8,56,1,57,1,57,1,57,5,
57,1805,8,57,10,57,12,57,1808,9,57,1,58,1,58,1,58,5,58,1813,8,58,10,58,12,
58,1816,9,58,1,59,1,59,5,59,1820,8,59,10,59,12,59,1823,9,59,1,60,1,60,3,
60,1827,8,60,1,61,1,61,1,61,5,61,1832,8,61,10,61,12,61,1835,9,61,1,62,1,
62,3,62,1839,8,62,1,63,1,63,1,63,3,63,1844,8,63,1,64,1,64,3,64,1848,8,64,
1,65,1,65,3,65,1852,8,65,1,66,1,66,1,66,3,66,1857,8,66,1,67,1,67,3,67,1861,
8,67,1,68,1,68,3,68,1865,8,68,1,68,1,68,1,68,1,68,3,68,1871,8,68,1,69,1,
69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,
1,74,3,74,1890,8,74,1,75,1,75,1,75,3,75,1895,8,75,1,75,1,75,1,75,1,75,1,
75,1,75,1,75,1,75,1,75,1,75,1,75,5,75,1908,8,75,10,75,12,75,1911,9,75,3,
75,1913,8,75,1,76,1,76,1,76,1,76,5,76,1919,8,76,10,76,12,76,1922,9,76,1,
76,1,76,1,77,1,77,1,77,1,77,5,77,1930,8,77,10,77,12,77,1933,9,77,1,77,1,
77,1,78,1,78,1,78,1,78,5,78,1941,8,78,10,78,12,78,1944,9,78,1,78,1,78,1,
79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,3,80,1957,8,80,1,80,1,80,1,80,
1,80,1,80,5,80,1964,8,80,10,80,12,80,1967,9,80,1,80,1,80,1,80,3,80,1972,
8,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1986,
8,80,1,80,1,80,1,80,1,80,1,80,5,80,1993,8,80,10,80,12,80,1996,9,80,1,80,
1,80,1,80,1,80,3,80,2002,8,80,1,80,1,80,1,80,1,80,1,80,3,80,2009,8,80,1,
80,3,80,2012,8,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2020,8,80,1,80,1,80,
1,80,1,80,1,80,1,80,3,80,2028,8,80,1,80,3,80,2031,8,80,1,80,1,80,1,80,1,
80,1,80,3,80,2038,8,80,1,80,3,80,2041,8,80,1,80,1,80,1,80,1,80,5,80,2047,
8,80,10,80,12,80,2050,9,80,1,80,1,80,1,80,1,80,1,80,3,80,2057,8,80,1,80,
1,80,1,80,1,80,1,80,1,80,5,80,2065,8,80,10,80,12,80,2068,9,80,3,80,2070,
8,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,
80,3,80,2086,8,80,1,80,1,80,1,80,1,80,1,80,3,80,2093,8,80,1,80,1,80,1,80,
1,80,1,80,3,80,2100,8,80,1,80,3,80,2103,8,80,1,80,1,80,3,80,2107,8,80,3,
80,2109,8,80,3,80,2111,8,80,1,80,1,80,1,80,3,80,2116,8,80,1,80,1,80,1,80,
1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2133,8,
80,1,80,1,80,1,80,3,80,2138,8,80,5,80,2140,8,80,10,80,12,80,2143,9,80,3,
80,2145,8,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2155,8,80,1,80,
1,80,1,80,1,80,1,80,3,80,2162,8,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2170,
8,80,3,80,2172,8,80,1,81,1,81,1,81,1,81,3,81,2178,8,81,1,82,1,82,1,82,1,
82,1,82,5,82,2185,8,82,10,82,12,82,2188,9,82,1,82,1,82,1,83,1,83,1,83,1,
84,3,84,2196,8,84,1,84,1,84,1,85,1,85,1,85,3,85,2203,8,85,1,86,1,86,1,87,
3,87,2208,8,87,1,87,3,87,2211,8,87,1,87,3,87,2214,8,87,1,87,3,87,2217,8,
87,3,87,2219,8,87,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,89,3,89,
2231,8,89,1,89,1,89,1,89,1,89,3,89,2237,8,89,1,90,1,90,1,90,1,90,1,90,1,
91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,2254,8,91,1,91,3,91,
2257,8,91,1,92,1,92,3,92,2261,8,92,1,92,5,92,2264,8,92,10,92,12,92,2267,
9,92,1,93,1,93,3,93,2271,8,93,1,93,1,93,3,93,2275,8,93,1,93,5,93,2278,8,
93,10,93,12,93,2281,9,93,1,94,1,94,3,94,2285,8,94,1,94,1,94,3,94,2289,8,
94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2315,8,95,1,95,1,
95,1,95,1,95,1,95,1,95,3,95,2323,8,95,3,95,2325,8,95,1,96,1,96,1,96,1,96,
1,96,1,96,5,96,2333,8,96,10,96,12,96,2336,9,96,1,96,1,96,3,96,2340,8,96,
1,96,1,96,1,96,1,96,1,96,1,96,3,96,2348,8,96,1,96,1,96,5,96,2352,8,96,10,
96,12,96,2355,9,96,1,97,1,97,3,97,2359,8,97,1,98,1,98,1,98,1,98,1,98,1,98,
1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,2378,8,98,1,
99,1,99,1,99,1,99,3,99,2384,8,99,1,99,1,99,1,99,1,99,1,99,5,99,2391,8,99,
10,99,12,99,2394,9,99,1,99,1,99,3,99,2398,8,99,1,100,1,100,1,100,1,100,1,
100,1,100,1,100,1,100,3,100,2408,8,100,1,100,1,100,1,100,1,100,1,100,1,100,
3,100,2416,8,100,1,100,1,100,1,100,1,100,3,100,2422,8,100,1,100,1,100,3,
100,2426,8,100,1,100,1,100,1,100,3,100,2431,8,100,1,101,1,101,3,101,2435,
8,101,1,101,1,101,1,102,1,102,3,102,2441,8,102,1,102,1,102,1,102,1,102,1,
102,1,103,1,103,1,103,1,103,1,103,1,104,1,104,1,104,5,104,2456,8,104,10,
104,12,104,2459,9,104,1,105,1,105,1,105,1,105,1,106,1,106,1,106,1,106,5,
106,2469,8,106,10,106,12,106,2472,9,106,1,106,1,106,1,107,1,107,3,107,2478,
8,107,1,108,1,108,1,108,1,108,1,108,5,108,2485,8,108,10,108,12,108,2488,
9,108,1,108,1,108,3,108,2492,8,108,1,109,1,109,3,109,2496,8,109,1,110,1,
110,1,110,1,110,3,110,2502,8,110,1,111,1,111,1,111,1,112,1,112,1,112,1,112,
1,112,5,112,2512,8,112,10,112,12,112,2515,9,112,1,112,1,112,1,113,1,113,
1,113,1,113,1,113,5,113,2524,8,113,10,113,12,113,2527,9,113,1,113,1,113,
1,114,1,114,3,114,2533,8,114,1,115,1,115,1,115,5,115,2538,8,115,10,115,12,
115,2541,9,115,1,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,1,117,3,117,
2552,8,117,1,118,1,118,1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,120,1,
120,3,120,2565,8,120,1,120,3,120,2568,8,120,1,120,3,120,2571,8,120,1,121,
1,121,1,121,1,121,1,121,1,121,1,121,3,121,2580,8,121,1,122,1,122,1,122,1,
122,1,122,1,122,1,122,1,122,3,122,2590,8,122,1,122,1,122,1,122,1,122,1,122,
1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,2605,8,122,1,123,1,
123,1,123,1,123,3,123,2611,8,123,1,123,5,123,2614,8,123,10,123,12,123,2617,
9,123,1,124,1,124,1,124,0,7,22,38,60,66,68,96,192,125,0,2,4,6,8,10,12,14,
16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,0,34,1,0,
146,147,2,0,3,3,22,22,1,0,141,142,2,0,4,4,282,282,1,0,241,242,2,0,7,7,169,
172,1,0,92,93,1,0,246,247,1,0,280,281,1,0,111,112,3,0,109,109,197,197,216,
216,2,0,36,36,38,38,2,0,86,86,91,91,1,0,200,201,2,0,7,7,12,12,1,0,40,41,
1,0,36,37,1,0,26,27,1,0,293,294,2,0,295,295,297,298,1,0,314,316,1,0,32,33,
2,0,60,61,246,246,1,0,44,46,1,0,282,292,1,0,7,9,1,0,88,89,1,0,50,55,1,0,
30,31,1,0,259,260,1,0,230,232,1,0,165,167,3,0,97,97,193,193,252,252,38,0,
1,1,4,4,6,6,10,10,27,27,32,33,35,35,38,38,42,46,48,59,70,70,81,86,88,91,
93,93,96,96,98,105,107,108,111,133,135,135,137,158,161,161,163,163,165,165,
167,172,174,174,176,182,185,196,198,198,202,204,208,208,211,215,219,221,
223,226,228,232,234,240,244,245,247,247,251,281,3018,0,250,1,0,0,0,2,263,
1,0,0,0,4,269,1,0,0,0,6,645,1,0,0,0,8,755,1,0,0,0,10,932,1,0,0,0,12,943,
1,0,0,0,14,946,1,0,0,0,16,950,1,0,0,0,18,988,1,0,0,0,20,990,1,0,0,0,22,1001,
1,0,0,0,24,1014,1,0,0,0,26,1016,1,0,0,0,28,1086,1,0,0,0,30,1100,1,0,0,0,
32,1102,1,0,0,0,34,1105,1,0,0,0,36,1114,1,0,0,0,38,1119,1,0,0,0,40,1158,
1,0,0,0,42,1174,1,0,0,0,44,1176,1,0,0,0,46,1195,1,0,0,0,48,1197,1,0,0,0,
50,1227,1,0,0,0,52,1229,1,0,0,0,54,1240,1,0,0,0,56,1249,1,0,0,0,58,1258,
1,0,0,0,60,1277,1,0,0,0,62,1290,1,0,0,0,64,1362,1,0,0,0,66,1371,1,0,0,0,
68,1461,1,0,0,0,70,1607,1,0,0,0,72,1609,1,0,0,0,74,1641,1,0,0,0,76,1651,
1,0,0,0,78,1674,1,0,0,0,80,1678,1,0,0,0,82,1682,1,0,0,0,84,1687,1,0,0,0,
86,1689,1,0,0,0,88,1691,1,0,0,0,90,1693,1,0,0,0,92,1704,1,0,0,0,94,1706,
1,0,0,0,96,1708,1,0,0,0,98,1721,1,0,0,0,100,1723,1,0,0,0,102,1725,1,0,0,
0,104,1730,1,0,0,0,106,1734,1,0,0,0,108,1770,1,0,0,0,110,1788,1,0,0,0,112,
1799,1,0,0,0,114,1801,1,0,0,0,116,1809,1,0,0,0,118,1817,1,0,0,0,120,1824,
1,0,0,0,122,1828,1,0,0,0,124,1838,1,0,0,0,126,1843,1,0,0,0,128,1847,1,0,
0,0,130,1851,1,0,0,0,132,1856,1,0,0,0,134,1860,1,0,0,0,136,1862,1,0,0,0,
138,1872,1,0,0,0,140,1874,1,0,0,0,142,1876,1,0,0,0,144,1878,1,0,0,0,146,
1880,1,0,0,0,148,1889,1,0,0,0,150,1912,1,0,0,0,152,1914,1,0,0,0,154,1925,
1,0,0,0,156,1936,1,0,0,0,158,1947,1,0,0,0,160,2171,1,0,0,0,162,2177,1,0,
0,0,164,2179,1,0,0,0,166,2191,1,0,0,0,168,2195,1,0,0,0,170,2202,1,0,0,0,
172,2204,1,0,0,0,174,2218,1,0,0,0,176,2220,1,0,0,0,178,2224,1,0,0,0,180,
2238,1,0,0,0,182,2256,1,0,0,0,184,2258,1,0,0,0,186,2268,1,0,0,0,188,2282,
1,0,0,0,190,2324,1,0,0,0,192,2347,1,0,0,0,194,2358,1,0,0,0,196,2377,1,0,
0,0,198,2379,1,0,0,0,200,2430,1,0,0,0,202,2434,1,0,0,0,204,2440,1,0,0,0,
206,2447,1,0,0,0,208,2452,1,0,0,0,210,2460,1,0,0,0,212,2464,1,0,0,0,214,
2475,1,0,0,0,216,2491,1,0,0,0,218,2493,1,0,0,0,220,2501,1,0,0,0,222,2503,
1,0,0,0,224,2506,1,0,0,0,226,2518,1,0,0,0,228,2530,1,0,0,0,230,2534,1,0,
0,0,232,2542,1,0,0,0,234,2551,1,0,0,0,236,2553,1,0,0,0,238,2555,1,0,0,0,
240,2570,1,0,0,0,242,2579,1,0,0,0,244,2604,1,0,0,0,246,2615,1,0,0,0,248,
2618,1,0,0,0,250,255,3,6,3,0,251,252,5,301,0,0,252,254,3,6,3,0,253,251,1,
0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,259,1,0,0,0,257,
255,1,0,0,0,258,260,5,301,0,0,259,258,1,0,0,0,259,260,1,0,0,0,260,261,1,
0,0,0,261,262,5,0,0,1,262,1,1,0,0,0,263,265,3,6,3,0,264,266,5,301,0,0,265,
264,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,5,0,0,1,268,3,1,0,0,
0,269,270,3,58,29,0,270,271,5,0,0,1,271,5,1,0,0,0,272,646,3,14,7,0,273,275,
5,143,0,0,274,276,7,0,0,0,275,274,1,0,0,0,275,276,1,0,0,0,276,287,1,0,0,
0,277,284,3,240,120,0,278,280,5,303,0,0,279,278,1,0,0,0,279,280,1,0,0,0,
280,281,1,0,0,0,281,283,3,240,120,0,282,279,1,0,0,0,283,286,1,0,0,0,284,
282,1,0,0,0,284,285,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,287,277,1,0,
0,0,287,288,1,0,0,0,288,646,1,0,0,0,289,290,5,144,0,0,290,301,5,147,0,0,
291,298,3,240,120,0,292,294,5,303,0,0,293,292,1,0,0,0,293,294,1,0,0,0,294,
295,1,0,0,0,295,297,3,240,120,0,296,293,1,0,0,0,297,300,1,0,0,0,298,296,
1,0,0,0,298,299,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,301,291,1,0,0,0,
301,302,1,0,0,0,302,646,1,0,0,0,303,305,5,145,0,0,304,306,7,0,0,0,305,304,
1,0,0,0,305,306,1,0,0,0,306,646,1,0,0,0,307,309,5,68,0,0,308,310,7,0,0,0,
309,308,1,0,0,0,309,310,1,0,0,0,310,646,1,0,0,0,311,320,5,176,0,0,312,321,
5,165,0,0,313,321,5,167,0,0,314,316,3,212,106,0,315,314,1,0,0,0,316,319,
1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,
320,312,1,0,0,0,320,313,1,0,0,0,320,317,1,0,0,0,321,322,1,0,0,0,322,646,
3,6,3,0,323,324,5,194,0,0,324,325,5,97,0,0,325,327,3,230,115,0,326,328,3,
206,103,0,327,326,1,0,0,0,327,328,1,0,0,0,328,646,1,0,0,0,329,330,5,195,
0,0,330,331,5,97,0,0,331,646,3,230,115,0,332,333,5,210,0,0,333,334,3,44,
22,0,334,335,5,216,0,0,335,340,3,158,79,0,336,337,5,303,0,0,337,339,3,158,
79,0,338,336,1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,
344,1,0,0,0,342,340,1,0,0,0,343,345,3,32,16,0,344,343,1,0,0,0,344,345,1,
0,0,0,345,347,1,0,0,0,346,348,3,34,17,0,347,346,1,0,0,0,347,348,1,0,0,0,
348,646,1,0,0,0,349,350,5,209,0,0,350,351,5,3,0,0,351,353,3,44,22,0,352,
354,3,32,16,0,353,352,1,0,0,0,353,354,1,0,0,0,354,646,1,0,0,0,355,360,5,
185,0,0,356,357,5,147,0,0,357,358,5,150,0,0,358,361,5,151,0,0,359,361,5,
148,0,0,360,356,1,0,0,0,360,359,1,0,0,0,361,646,1,0,0,0,362,363,5,185,0,
0,363,364,5,95,0,0,364,365,5,97,0,0,365,646,3,50,25,0,366,367,5,185,0,0,
367,370,5,186,0,0,368,369,7,1,0,0,369,371,3,116,58,0,370,368,1,0,0,0,370,
371,1,0,0,0,371,375,1,0,0,0,372,373,5,26,0,0,373,376,3,92,46,0,374,376,3,
32,16,0,375,372,1,0,0,0,375,374,1,0,0,0,375,376,1,0,0,0,376,646,1,0,0,0,
377,378,5,185,0,0,378,382,5,187,0,0,379,380,5,26,0,0,380,383,3,92,46,0,381,
383,3,32,16,0,382,379,1,0,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,646,1,
0,0,0,384,385,5,185,0,0,385,386,5,189,0,0,386,387,7,1,0,0,387,390,3,116,
58,0,388,389,7,1,0,0,389,391,3,116,58,0,390,388,1,0,0,0,390,391,1,0,0,0,
391,395,1,0,0,0,392,393,5,26,0,0,393,396,3,92,46,0,394,396,3,32,16,0,395,
392,1,0,0,0,395,394,1,0,0,0,395,396,1,0,0,0,396,646,1,0,0,0,397,400,5,185,
0,0,398,401,3,116,58,0,399,401,5,7,0,0,400,398,1,0,0,0,400,399,1,0,0,0,401,
646,1,0,0,0,402,646,3,10,5,0,403,404,5,217,0,0,404,405,5,140,0,0,405,410,
3,68,34,0,406,407,5,303,0,0,407,409,3,68,34,0,408,406,1,0,0,0,409,412,1,
0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,646,1,0,0,0,412,410,1,0,0,0,413,
417,5,216,0,0,414,415,5,141,0,0,415,416,5,149,0,0,416,418,5,5,0,0,417,414,
1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,420,5,147,0,0,420,425,3,240,
120,0,421,422,5,303,0,0,422,424,3,240,120,0,423,421,1,0,0,0,424,427,1,0,
0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,646,1,0,0,0,427,425,1,0,0,0,428,
430,5,216,0,0,429,431,7,2,0,0,430,429,1,0,0,0,430,431,1,0,0,0,431,432,1,
0,0,0,432,433,5,141,0,0,433,436,5,1,0,0,434,437,5,218,0,0,435,437,3,130,
65,0,436,434,1,0,0,0,436,435,1,0,0,0,437,646,1,0,0,0,438,439,5,217,0,0,439,
440,5,141,0,0,440,646,5,1,0,0,441,443,5,216,0,0,442,444,7,2,0,0,443,442,
1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,446,3,116,58,0,446,456,7,3,0,
0,447,457,5,218,0,0,448,453,3,234,117,0,449,450,5,303,0,0,450,452,3,234,
117,0,451,449,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,
457,1,0,0,0,455,453,1,0,0,0,456,447,1,0,0,0,456,448,1,0,0,0,457,646,1,0,
0,0,458,459,5,216,0,0,459,461,5,140,0,0,460,462,7,4,0,0,461,460,1,0,0,0,
461,462,1,0,0,0,462,463,1,0,0,0,463,468,3,232,116,0,464,465,5,303,0,0,465,
467,3,232,116,0,466,464,1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,468,469,
1,0,0,0,469,646,1,0,0,0,470,468,1,0,0,0,471,472,5,216,0,0,472,473,5,48,0,
0,473,477,5,49,0,0,474,478,5,142,0,0,475,478,5,218,0,0,476,478,3,92,46,0,
477,474,1,0,0,0,477,475,1,0,0,0,477,476,1,0,0,0,478,646,1,0,0,0,479,482,
5,107,0,0,480,483,5,7,0,0,481,483,3,82,41,0,482,480,1,0,0,0,482,481,1,0,
0,0,483,646,1,0,0,0,484,485,5,206,0,0,485,486,5,207,0,0,486,498,3,50,25,
0,487,488,5,305,0,0,488,493,3,124,62,0,489,490,5,303,0,0,490,492,3,124,62,
0,491,489,1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,496,
1,0,0,0,495,493,1,0,0,0,496,497,5,306,0,0,497,499,1,0,0,0,498,487,1,0,0,
0,498,499,1,0,0,0,499,500,1,0,0,0,500,502,3,148,74,0,501,503,3,150,75,0,
502,501,1,0,0,0,502,503,1,0,0,0,503,505,1,0,0,0,504,506,3,34,17,0,505,504,
1,0,0,0,505,506,1,0,0,0,506,646,1,0,0,0,507,508,5,196,0,0,508,509,5,105,
0,0,509,515,3,116,58,0,510,516,5,7,0,0,511,516,5,255,0,0,512,513,5,97,0,
0,513,516,3,230,115,0,514,516,3,122,61,0,515,510,1,0,0,0,515,511,1,0,0,0,
515,512,1,0,0,0,515,514,1,0,0,0,516,518,1,0,0,0,517,519,3,206,103,0,518,
517,1,0,0,0,518,519,1,0,0,0,519,646,1,0,0,0,520,521,5,219,0,0,521,533,3,
48,24,0,522,523,5,305,0,0,523,528,3,124,62,0,524,525,5,303,0,0,525,527,3,
124,62,0,526,524,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,
529,531,1,0,0,0,530,528,1,0,0,0,531,532,5,306,0,0,532,534,1,0,0,0,533,522,
1,0,0,0,533,534,1,0,0,0,534,535,1,0,0,0,535,536,5,3,0,0,536,538,3,58,29,
0,537,539,3,206,103,0,538,537,1,0,0,0,538,539,1,0,0,0,539,542,1,0,0,0,540,
541,5,253,0,0,541,543,5,254,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,646,
1,0,0,0,544,545,5,219,0,0,545,547,3,48,24,0,546,548,3,156,78,0,547,546,1,
0,0,0,547,548,1,0,0,0,548,550,1,0,0,0,549,551,3,32,16,0,550,549,1,0,0,0,
550,551,1,0,0,0,551,552,1,0,0,0,552,554,5,4,0,0,553,555,5,11,0,0,554,553,
1,0,0,0,554,555,1,0,0,0,555,556,1,0,0,0,556,558,3,58,29,0,557,559,3,206,
103,0,558,557,1,0,0,0,558,559,1,0,0,0,559,646,1,0,0,0,560,646,3,8,4,0,561,
567,5,248,0,0,562,568,3,122,61,0,563,565,5,7,0,0,564,566,5,251,0,0,565,564,
1,0,0,0,565,566,1,0,0,0,566,568,1,0,0,0,567,562,1,0,0,0,567,563,1,0,0,0,
568,573,1,0,0,0,569,570,5,80,0,0,570,571,3,238,119,0,571,572,3,114,57,0,
572,574,1,0,0,0,573,569,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,576,
5,4,0,0,576,646,3,122,61,0,577,583,5,249,0,0,578,584,3,122,61,0,579,581,
5,7,0,0,580,582,5,251,0,0,581,580,1,0,0,0,581,582,1,0,0,0,582,584,1,0,0,
0,583,578,1,0,0,0,583,579,1,0,0,0,584,589,1,0,0,0,585,586,5,80,0,0,586,587,
3,238,119,0,587,588,3,114,57,0,588,590,1,0,0,0,589,585,1,0,0,0,589,590,1,
0,0,0,590,591,1,0,0,0,591,592,5,4,0,0,592,646,3,122,61,0,593,599,5,250,0,
0,594,600,3,122,61,0,595,597,5,7,0,0,596,598,5,251,0,0,597,596,1,0,0,0,597,
598,1,0,0,0,598,600,1,0,0,0,599,594,1,0,0,0,599,595,1,0,0,0,600,605,1,0,
0,0,601,602,5,80,0,0,602,603,3,238,119,0,603,604,3,114,57,0,604,606,1,0,
0,0,605,601,1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,0,607,608,5,3,0,0,608,
646,3,122,61,0,609,646,3,160,80,0,610,612,5,10,0,0,611,613,5,240,0,0,612,
611,1,0,0,0,612,613,1,0,0,0,613,616,1,0,0,0,614,617,5,7,0,0,615,617,3,132,
66,0,616,614,1,0,0,0,616,615,1,0,0,0,617,646,1,0,0,0,618,646,5,165,0,0,619,
620,5,168,0,0,620,646,7,5,0,0,621,622,5,261,0,0,622,623,3,124,62,0,623,624,
3,246,123,0,624,627,5,262,0,0,625,626,7,6,0,0,626,628,5,268,0,0,627,625,
1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,630,5,47,0,0,630,631,3,16,8,
0,631,646,1,0,0,0,632,634,5,35,0,0,633,635,3,244,122,0,634,633,1,0,0,0,634,
635,1,0,0,0,635,637,1,0,0,0,636,638,7,1,0,0,637,636,1,0,0,0,637,638,1,0,
0,0,638,639,1,0,0,0,639,646,3,124,62,0,640,643,5,112,0,0,641,644,3,124,62,
0,642,644,5,7,0,0,643,641,1,0,0,0,643,642,1,0,0,0,644,646,1,0,0,0,645,272,
1,0,0,0,645,273,1,0,0,0,645,289,1,0,0,0,645,303,1,0,0,0,645,307,1,0,0,0,
645,311,1,0,0,0,645,323,1,0,0,0,645,329,1,0,0,0,645,332,1,0,0,0,645,349,
1,0,0,0,645,355,1,0,0,0,645,362,1,0,0,0,645,366,1,0,0,0,645,377,1,0,0,0,
645,384,1,0,0,0,645,397,1,0,0,0,645,402,1,0,0,0,645,403,1,0,0,0,645,413,
1,0,0,0,645,428,1,0,0,0,645,438,1,0,0,0,645,441,1,0,0,0,645,458,1,0,0,0,
645,471,1,0,0,0,645,479,1,0,0,0,645,484,1,0,0,0,645,507,1,0,0,0,645,520,
1,0,0,0,645,544,1,0,0,0,645,560,1,0,0,0,645,561,1,0,0,0,645,577,1,0,0,0,
645,593,1,0,0,0,645,609,1,0,0,0,645,610,1,0,0,0,645,618,1,0,0,0,645,619,
1,0,0,0,645,621,1,0,0,0,645,632,1,0,0,0,645,640,1,0,0,0,646,7,1,0,0,0,647,
648,5,197,0,0,648,649,5,96,0,0,649,652,5,97,0,0,650,651,5,69,0,0,651,653,
5,24,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,756,3,50,25,
0,655,656,5,197,0,0,656,659,5,97,0,0,657,658,5,69,0,0,658,660,5,24,0,0,659,
657,1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,756,3,50,25,0,662,663,5,
197,0,0,663,664,5,198,0,0,664,756,3,116,58,0,665,666,5,197,0,0,666,667,5,
104,0,0,667,756,3,124,62,0,668,669,5,197,0,0,669,670,5,105,0,0,670,756,3,
116,58,0,671,672,5,197,0,0,672,675,5,162,0,0,673,674,5,69,0,0,674,676,5,
24,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,677,1,0,0,0,677,678,3,116,58,
0,678,687,5,305,0,0,679,684,3,168,84,0,680,681,5,303,0,0,681,683,3,168,84,
0,682,680,1,0,0,0,683,686,1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,688,
1,0,0,0,686,684,1,0,0,0,687,679,1,0,0,0,687,688,1,0,0,0,688,689,1,0,0,0,
689,690,5,306,0,0,690,756,1,0,0,0,691,692,5,197,0,0,692,695,7,7,0,0,693,
694,5,69,0,0,694,696,5,24,0,0,695,693,1,0,0,0,695,696,1,0,0,0,696,697,1,
0,0,0,697,756,3,124,62,0,698,699,5,197,0,0,699,702,5,193,0,0,700,701,5,69,
0,0,701,703,5,24,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,704,1,0,0,0,704,
756,3,114,57,0,705,706,5,197,0,0,706,707,5,234,0,0,707,756,3,124,62,0,708,
709,5,197,0,0,709,712,5,256,0,0,710,711,5,69,0,0,711,713,5,24,0,0,712,710,
1,0,0,0,712,713,1,0,0,0,713,714,1,0,0,0,714,756,3,124,62,0,715,716,5,197,
0,0,716,719,5,257,0,0,717,718,5,69,0,0,718,720,5,24,0,0,719,717,1,0,0,0,
719,720,1,0,0,0,720,721,1,0,0,0,721,756,3,124,62,0,722,723,5,197,0,0,723,
726,5,274,0,0,724,725,5,69,0,0,725,727,5,24,0,0,726,724,1,0,0,0,726,727,
1,0,0,0,727,728,1,0,0,0,728,730,3,122,61,0,729,731,7,8,0,0,730,729,1,0,0,
0,730,731,1,0,0,0,731,756,1,0,0,0,732,733,5,197,0,0,733,734,5,275,0,0,734,
737,5,97,0,0,735,736,5,69,0,0,736,738,5,24,0,0,737,735,1,0,0,0,737,738,1,
0,0,0,738,739,1,0,0,0,739,741,3,114,57,0,740,742,7,8,0,0,741,740,1,0,0,0,
741,742,1,0,0,0,742,756,1,0,0,0,743,744,5,197,0,0,744,745,5,246,0,0,745,
748,5,279,0,0,746,747,5,69,0,0,747,749,5,24,0,0,748,746,1,0,0,0,748,749,
1,0,0,0,749,750,1,0,0,0,750,751,5,47,0,0,751,752,3,162,81,0,752,753,5,274,
0,0,753,754,3,124,62,0,754,756,1,0,0,0,755,647,1,0,0,0,755,655,1,0,0,0,755,
662,1,0,0,0,755,665,1,0,0,0,755,668,1,0,0,0,755,671,1,0,0,0,755,691,1,0,
0,0,755,698,1,0,0,0,755,705,1,0,0,0,755,708,1,0,0,0,755,715,1,0,0,0,755,
722,1,0,0,0,755,732,1,0,0,0,755,743,1,0,0,0,756,9,1,0,0,0,757,758,5,106,
0,0,758,759,5,97,0,0,759,760,3,170,85,0,760,765,3,186,93,0,761,762,5,303,
0,0,762,764,3,186,93,0,763,761,1,0,0,0,764,767,1,0,0,0,765,763,1,0,0,0,765,
766,1,0,0,0,766,933,1,0,0,0,767,765,1,0,0,0,768,769,5,106,0,0,769,770,5,
97,0,0,770,771,3,170,85,0,771,776,3,188,94,0,772,773,5,303,0,0,773,775,3,
188,94,0,774,772,1,0,0,0,775,778,1,0,0,0,776,774,1,0,0,0,776,777,1,0,0,0,
777,933,1,0,0,0,778,776,1,0,0,0,779,780,5,106,0,0,780,781,5,97,0,0,781,782,
3,170,85,0,782,783,5,197,0,0,783,784,5,173,0,0,784,785,3,124,62,0,785,933,
1,0,0,0,786,787,5,106,0,0,787,788,5,97,0,0,788,808,3,170,85,0,789,790,5,
216,0,0,790,791,5,305,0,0,791,792,3,208,104,0,792,793,5,306,0,0,793,809,
1,0,0,0,794,806,5,217,0,0,795,796,5,305,0,0,796,801,3,124,62,0,797,798,5,
303,0,0,798,800,3,124,62,0,799,797,1,0,0,0,800,803,1,0,0,0,801,799,1,0,0,
0,801,802,1,0,0,0,802,804,1,0,0,0,803,801,1,0,0,0,804,805,5,306,0,0,805,
807,1,0,0,0,806,795,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,0,808,789,1,0,
0,0,808,794,1,0,0,0,809,933,1,0,0,0,810,811,5,106,0,0,811,812,5,96,0,0,812,
813,5,97,0,0,813,833,3,170,85,0,814,815,5,216,0,0,815,816,5,305,0,0,816,
817,3,208,104,0,817,818,5,306,0,0,818,834,1,0,0,0,819,831,5,217,0,0,820,
821,5,305,0,0,821,826,3,124,62,0,822,823,5,303,0,0,823,825,3,124,62,0,824,
822,1,0,0,0,825,828,1,0,0,0,826,824,1,0,0,0,826,827,1,0,0,0,827,829,1,0,
0,0,828,826,1,0,0,0,829,830,5,306,0,0,830,832,1,0,0,0,831,820,1,0,0,0,831,
832,1,0,0,0,832,834,1,0,0,0,833,814,1,0,0,0,833,819,1,0,0,0,834,933,1,0,
0,0,835,837,5,106,0,0,836,838,5,96,0,0,837,836,1,0,0,0,837,838,1,0,0,0,838,
839,1,0,0,0,839,840,5,97,0,0,840,841,3,170,85,0,841,842,7,9,0,0,842,933,
1,0,0,0,843,845,5,106,0,0,844,846,5,96,0,0,845,844,1,0,0,0,845,846,1,0,0,
0,846,847,1,0,0,0,847,848,5,97,0,0,848,849,3,170,85,0,849,850,5,113,0,0,
850,851,5,4,0,0,851,852,3,116,58,0,852,933,1,0,0,0,853,855,5,106,0,0,854,
856,5,96,0,0,855,854,1,0,0,0,855,856,1,0,0,0,856,857,1,0,0,0,857,858,5,97,
0,0,858,859,3,170,85,0,859,861,5,113,0,0,860,862,5,110,0,0,861,860,1,0,0,
0,861,862,1,0,0,0,862,863,1,0,0,0,863,864,3,96,48,0,864,865,5,4,0,0,865,
866,3,96,48,0,866,933,1,0,0,0,867,869,5,106,0,0,868,870,5,96,0,0,869,868,
1,0,0,0,869,870,1,0,0,0,870,871,1,0,0,0,871,872,5,97,0,0,872,873,3,170,85,
0,873,874,5,114,0,0,874,875,3,190,95,0,875,933,1,0,0,0,876,877,5,106,0,0,
877,878,5,103,0,0,878,879,5,114,0,0,879,880,5,120,0,0,880,933,5,121,0,0,
881,882,5,106,0,0,882,883,5,103,0,0,883,884,5,98,0,0,884,885,5,97,0,0,885,
886,3,116,58,0,886,887,5,4,0,0,887,889,3,116,58,0,888,890,3,206,103,0,889,
888,1,0,0,0,889,890,1,0,0,0,890,933,1,0,0,0,891,892,5,106,0,0,892,893,5,
103,0,0,893,894,5,102,0,0,894,933,3,58,29,0,895,896,5,106,0,0,896,897,5,
103,0,0,897,898,5,99,0,0,898,899,5,100,0,0,899,933,5,101,0,0,900,901,5,106,
0,0,901,902,7,7,0,0,902,903,3,124,62,0,903,904,5,216,0,0,904,905,5,305,0,
0,905,906,3,208,104,0,906,907,5,306,0,0,907,933,1,0,0,0,908,909,5,106,0,
0,909,910,5,256,0,0,910,911,3,124,62,0,911,912,7,10,0,0,912,913,5,97,0,0,
913,915,3,116,58,0,914,916,5,295,0,0,915,914,1,0,0,0,915,916,1,0,0,0,916,
924,1,0,0,0,917,918,5,303,0,0,918,920,3,116,58,0,919,921,5,295,0,0,920,919,
1,0,0,0,920,921,1,0,0,0,921,923,1,0,0,0,922,917,1,0,0,0,923,926,1,0,0,0,
924,922,1,0,0,0,924,925,1,0,0,0,925,933,1,0,0,0,926,924,1,0,0,0,927,928,
5,106,0,0,928,929,5,257,0,0,929,930,3,124,62,0,930,931,3,172,86,0,931,933,
1,0,0,0,932,757,1,0,0,0,932,768,1,0,0,0,932,779,1,0,0,0,932,786,1,0,0,0,
932,810,1,0,0,0,932,835,1,0,0,0,932,843,1,0,0,0,932,853,1,0,0,0,932,867,
1,0,0,0,932,876,1,0,0,0,932,881,1,0,0,0,932,891,1,0,0,0,932,895,1,0,0,0,
932,900,1,0,0,0,932,908,1,0,0,0,932,927,1,0,0,0,933,11,1,0,0,0,934,935,5,
305,0,0,935,936,3,14,7,0,936,937,5,306,0,0,937,944,1,0,0,0,938,944,3,14,
7,0,939,940,5,305,0,0,940,941,3,12,6,0,941,942,5,306,0,0,942,944,1,0,0,0,
943,934,1,0,0,0,943,938,1,0,0,0,943,939,1,0,0,0,944,13,1,0,0,0,945,947,3,
54,27,0,946,945,1,0,0,0,946,947,1,0,0,0,947,948,1,0,0,0,948,949,3,16,8,0,
949,15,1,0,0,0,950,961,3,22,11,0,951,952,5,16,0,0,952,953,5,15,0,0,953,958,
3,26,13,0,954,955,5,303,0,0,955,957,3,26,13,0,956,954,1,0,0,0,957,960,1,
0,0,0,958,956,1,0,0,0,958,959,1,0,0,0,959,962,1,0,0,0,960,958,1,0,0,0,961,
951,1,0,0,0,961,962,1,0,0,0,962,975,1,0,0,0,963,965,3,18,9,0,964,963,1,0,
0,0,964,965,1,0,0,0,965,967,1,0,0,0,966,968,3,20,10,0,967,966,1,0,0,0,967,
968,1,0,0,0,968,976,1,0,0,0,969,971,3,20,10,0,970,969,1,0,0,0,970,971,1,
0,0,0,971,973,1,0,0,0,972,974,3,18,9,0,973,972,1,0,0,0,973,974,1,0,0,0,974,
976,1,0,0,0,975,964,1,0,0,0,975,970,1,0,0,0,976,17,1,0,0,0,977,980,5,18,
0,0,978,981,3,78,39,0,979,981,5,7,0,0,980,978,1,0,0,0,980,979,1,0,0,0,981,
989,1,0,0,0,982,983,5,35,0,0,983,984,7,11,0,0,984,985,3,78,39,0,985,986,
7,12,0,0,986,987,5,108,0,0,987,989,1,0,0,0,988,977,1,0,0,0,988,982,1,0,0,
0,989,19,1,0,0,0,990,991,5,19,0,0,991,993,3,78,39,0,992,994,7,12,0,0,993,
992,1,0,0,0,993,994,1,0,0,0,994,21,1,0,0,0,995,996,6,11,-1,0,996,1002,3,
28,14,0,997,998,3,28,14,0,998,999,7,13,0,0,999,1000,3,28,14,0,1000,1002,
1,0,0,0,1001,995,1,0,0,0,1001,997,1,0,0,0,1002,1011,1,0,0,0,1003,1004,10,
1,0,0,1004,1006,5,199,0,0,1005,1007,3,24,12,0,1006,1005,1,0,0,0,1006,1007,
1,0,0,0,1007,1008,1,0,0,0,1008,1010,3,22,11,2,1009,1003,1,0,0,0,1010,1013,
1,0,0,0,1011,1009,1,0,0,0,1011,1012,1,0,0,0,1012,23,1,0,0,0,1013,1011,1,
0,0,0,1014,1015,7,14,0,0,1015,25,1,0,0,0,1016,1018,3,58,29,0,1017,1019,7,
15,0,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,1022,1,0,0,0,1020,1021,5,
34,0,0,1021,1023,7,16,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,27,1,
0,0,0,1024,1026,5,2,0,0,1025,1027,3,24,12,0,1026,1025,1,0,0,0,1026,1027,
1,0,0,0,1027,1028,1,0,0,0,1028,1033,3,30,15,0,1029,1030,5,303,0,0,1030,1032,
3,30,15,0,1031,1029,1,0,0,0,1032,1035,1,0,0,0,1033,1031,1,0,0,0,1033,1034,
1,0,0,0,1034,1045,1,0,0,0,1035,1033,1,0,0,0,1036,1037,5,3,0,0,1037,1042,
3,38,19,0,1038,1039,5,303,0,0,1039,1041,3,38,19,0,1040,1038,1,0,0,0,1041,
1044,1,0,0,0,1042,1040,1,0,0,0,1042,1043,1,0,0,0,1043,1046,1,0,0,0,1044,
1042,1,0,0,0,1045,1036,1,0,0,0,1045,1046,1,0,0,0,1046,1048,1,0,0,0,1047,
1049,3,32,16,0,1048,1047,1,0,0,0,1048,1049,1,0,0,0,1049,1060,1,0,0,0,1050,
1051,5,14,0,0,1051,1052,5,15,0,0,1052,1057,3,58,29,0,1053,1054,5,303,0,0,
1054,1056,3,58,29,0,1055,1053,1,0,0,0,1056,1059,1,0,0,0,1057,1055,1,0,0,
0,1057,1058,1,0,0,0,1058,1061,1,0,0,0,1059,1057,1,0,0,0,1060,1050,1,0,0,
0,1060,1061,1,0,0,0,1061,1064,1,0,0,0,1062,1063,5,17,0,0,1063,1065,3,60,
30,0,1064,1062,1,0,0,0,1064,1065,1,0,0,0,1065,1075,1,0,0,0,1066,1067,5,82,
0,0,1067,1072,3,104,52,0,1068,1069,5,303,0,0,1069,1071,3,104,52,0,1070,1068,
1,0,0,0,1071,1074,1,0,0,0,1072,1070,1,0,0,0,1072,1073,1,0,0,0,1073,1076,
1,0,0,0,1074,1072,1,0,0,0,1075,1066,1,0,0,0,1075,1076,1,0,0,0,1076,1087,
1,0,0,0,1077,1078,5,208,0,0,1078,1083,3,154,77,0,1079,1080,5,303,0,0,1080,
1082,3,154,77,0,1081,1079,1,0,0,0,1082,1085,1,0,0,0,1083,1081,1,0,0,0,1083,
1084,1,0,0,0,1084,1087,1,0,0,0,1085,1083,1,0,0,0,1086,1024,1,0,0,0,1086,
1077,1,0,0,0,1087,29,1,0,0,0,1088,1093,3,58,29,0,1089,1091,5,5,0,0,1090,
1089,1,0,0,0,1090,1091,1,0,0,0,1091,1092,1,0,0,0,1092,1094,3,124,62,0,1093,
1090,1,0,0,0,1093,1094,1,0,0,0,1094,1101,1,0,0,0,1095,1096,3,116,58,0,1096,
1097,5,304,0,0,1097,1098,5,295,0,0,1098,1101,1,0,0,0,1099,1101,5,295,0,0,
1100,1088,1,0,0,0,1100,1095,1,0,0,0,1100,1099,1,0,0,0,1101,31,1,0,0,0,1102,
1103,5,13,0,0,1103,1104,3,60,30,0,1104,33,1,0,0,0,1105,1106,5,229,0,0,1106,
1111,3,30,15,0,1107,1108,5,303,0,0,1108,1110,3,30,15,0,1109,1107,1,0,0,0,
1110,1113,1,0,0,0,1111,1109,1,0,0,0,1111,1112,1,0,0,0,1112,35,1,0,0,0,1113,
1111,1,0,0,0,1114,1115,5,225,0,0,1115,1116,5,305,0,0,1116,1117,3,32,16,0,
1117,1118,5,306,0,0,1118,37,1,0,0,0,1119,1120,6,19,-1,0,1120,1121,3,44,22,
0,1121,1140,1,0,0,0,1122,1136,10,2,0,0,1123,1124,5,72,0,0,1124,1125,5,71,
0,0,1125,1137,3,44,22,0,1126,1127,3,40,20,0,1127,1128,5,71,0,0,1128,1129,
3,38,19,0,1129,1130,3,42,21,0,1130,1137,1,0,0,0,1131,1132,5,78,0,0,1132,
1133,3,40,20,0,1133,1134,5,71,0,0,1134,1135,3,44,22,0,1135,1137,1,0,0,0,
1136,1123,1,0,0,0,1136,1126,1,0,0,0,1136,1131,1,0,0,0,1137,1139,1,0,0,0,
1138,1122,1,0,0,0,1139,1142,1,0,0,0,1140,1138,1,0,0,0,1140,1141,1,0,0,0,
1141,39,1,0,0,0,1142,1140,1,0,0,0,1143,1145,5,74,0,0,1144,1143,1,0,0,0,1144,
1145,1,0,0,0,1145,1159,1,0,0,0,1146,1148,5,75,0,0,1147,1149,5,73,0,0,1148,
1147,1,0,0,0,1148,1149,1,0,0,0,1149,1159,1,0,0,0,1150,1152,5,76,0,0,1151,
1153,5,73,0,0,1152,1151,1,0,0,0,1152,1153,1,0,0,0,1153,1159,1,0,0,0,1154,
1156,5,77,0,0,1155,1157,5,73,0,0,1156,1155,1,0,0,0,1156,1157,1,0,0,0,1157,
1159,1,0,0,0,1158,1144,1,0,0,0,1158,1146,1,0,0,0,1158,1150,1,0,0,0,1158,
1154,1,0,0,0,1159,41,1,0,0,0,1160,1161,5,80,0,0,1161,1175,3,60,30,0,1162,
1163,5,79,0,0,1163,1164,5,305,0,0,1164,1169,3,124,62,0,1165,1166,5,303,0,
0,1166,1168,3,124,62,0,1167,1165,1,0,0,0,1168,1171,1,0,0,0,1169,1167,1,0,
0,0,1169,1170,1,0,0,0,1170,1172,1,0,0,0,1171,1169,1,0,0,0,1172,1173,5,306,
0,0,1173,1175,1,0,0,0,1174,1160,1,0,0,0,1174,1162,1,0,0,0,1175,43,1,0,0,
0,1176,1184,3,46,23,0,1177,1179,5,5,0,0,1178,1177,1,0,0,0,1178,1179,1,0,
0,0,1179,1180,1,0,0,0,1180,1182,3,124,62,0,1181,1183,3,52,26,0,1182,1181,
1,0,0,0,1182,1183,1,0,0,0,1183,1185,1,0,0,0,1184,1178,1,0,0,0,1184,1185,
1,0,0,0,1185,45,1,0,0,0,1186,1196,3,50,25,0,1187,1188,5,305,0,0,1188,1189,
3,14,7,0,1189,1190,5,306,0,0,1190,1196,1,0,0,0,1191,1192,5,305,0,0,1192,
1193,3,38,19,0,1193,1194,5,306,0,0,1194,1196,1,0,0,0,1195,1186,1,0,0,0,1195,
1187,1,0,0,0,1195,1191,1,0,0,0,1196,47,1,0,0,0,1197,1210,3,116,58,0,1198,
1199,5,83,0,0,1199,1200,5,305,0,0,1200,1205,3,158,79,0,1201,1202,5,303,0,
0,1202,1204,3,158,79,0,1203,1201,1,0,0,0,1204,1207,1,0,0,0,1205,1203,1,0,
0,0,1205,1206,1,0,0,0,1206,1208,1,0,0,0,1207,1205,1,0,0,0,1208,1209,5,306,
0,0,1209,1211,1,0,0,0,1210,1198,1,0,0,0,1210,1211,1,0,0,0,1211,49,1,0,0,
0,1212,1228,3,116,58,0,1213,1214,3,116,58,0,1214,1216,5,305,0,0,1215,1217,
3,66,33,0,1216,1215,1,0,0,0,1216,1217,1,0,0,0,1217,1222,1,0,0,0,1218,1219,
5,303,0,0,1219,1221,3,66,33,0,1220,1218,1,0,0,0,1221,1224,1,0,0,0,1222,1220,
1,0,0,0,1222,1223,1,0,0,0,1223,1225,1,0,0,0,1224,1222,1,0,0,0,1225,1226,
5,306,0,0,1226,1228,1,0,0,0,1227,1212,1,0,0,0,1227,1213,1,0,0,0,1228,51,
1,0,0,0,1229,1230,5,305,0,0,1230,1235,3,124,62,0,1231,1232,5,303,0,0,1232,
1234,3,124,62,0,1233,1231,1,0,0,0,1234,1237,1,0,0,0,1235,1233,1,0,0,0,1235,
1236,1,0,0,0,1236,1238,1,0,0,0,1237,1235,1,0,0,0,1238,1239,5,306,0,0,1239,
53,1,0,0,0,1240,1241,5,92,0,0,1241,1246,3,56,28,0,1242,1243,5,303,0,0,1243,
1245,3,56,28,0,1244,1242,1,0,0,0,1245,1248,1,0,0,0,1246,1244,1,0,0,0,1246,
1247,1,0,0,0,1247,55,1,0,0,0,1248,1246,1,0,0,0,1249,1251,3,124,62,0,1250,
1252,3,52,26,0,1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,1253,1,0,0,0,1253,
1254,5,5,0,0,1254,1255,5,305,0,0,1255,1256,3,14,7,0,1256,1257,5,306,0,0,
1257,57,1,0,0,0,1258,1259,3,60,30,0,1259,59,1,0,0,0,1260,1261,6,30,-1,0,
1261,1278,3,62,31,0,1262,1263,5,23,0,0,1263,1278,3,60,30,4,1264,1265,5,243,
0,0,1265,1266,5,305,0,0,1266,1267,3,216,108,0,1267,1268,5,303,0,0,1268,1269,
3,68,34,0,1269,1275,5,306,0,0,1270,1271,5,79,0,0,1271,1273,3,124,62,0,1272,
1274,3,206,103,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1276,1,0,0,0,1275,
1270,1,0,0,0,1275,1276,1,0,0,0,1276,1278,1,0,0,0,1277,1260,1,0,0,0,1277,
1262,1,0,0,0,1277,1264,1,0,0,0,1278,1287,1,0,0,0,1279,1280,10,3,0,0,1280,
1281,5,21,0,0,1281,1286,3,60,30,4,1282,1283,10,2,0,0,1283,1284,5,20,0,0,
1284,1286,3,60,30,3,1285,1279,1,0,0,0,1285,1282,1,0,0,0,1286,1289,1,0,0,
0,1287,1285,1,0,0,0,1287,1288,1,0,0,0,1288,61,1,0,0,0,1289,1287,1,0,0,0,
1290,1292,3,66,33,0,1291,1293,3,64,32,0,1292,1291,1,0,0,0,1292,1293,1,0,
0,0,1293,63,1,0,0,0,1294,1295,3,98,49,0,1295,1296,3,66,33,0,1296,1363,1,
0,0,0,1297,1298,3,98,49,0,1298,1299,3,100,50,0,1299,1300,3,68,34,0,1300,
1363,1,0,0,0,1301,1303,5,23,0,0,1302,1301,1,0,0,0,1302,1303,1,0,0,0,1303,
1304,1,0,0,0,1304,1305,5,25,0,0,1305,1306,3,66,33,0,1306,1307,5,21,0,0,1307,
1308,3,66,33,0,1308,1363,1,0,0,0,1309,1311,5,23,0,0,1310,1309,1,0,0,0,1310,
1311,1,0,0,0,1311,1312,1,0,0,0,1312,1313,5,22,0,0,1313,1314,5,305,0,0,1314,
1319,3,58,29,0,1315,1316,5,303,0,0,1316,1318,3,58,29,0,1317,1315,1,0,0,0,
1318,1321,1,0,0,0,1319,1317,1,0,0,0,1319,1320,1,0,0,0,1320,1322,1,0,0,0,
1321,1319,1,0,0,0,1322,1323,5,306,0,0,1323,1363,1,0,0,0,1324,1326,5,23,0,
0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,1327,1,0,0,0,1327,1328,5,22,0,
0,1328,1363,3,72,36,0,1329,1331,5,23,0,0,1330,1329,1,0,0,0,1330,1331,1,0,
0,0,1331,1332,1,0,0,0,1332,1333,7,17,0,0,1333,1336,3,66,33,0,1334,1335,5,
39,0,0,1335,1337,3,74,37,0,1336,1334,1,0,0,0,1336,1337,1,0,0,0,1337,1363,
1,0,0,0,1338,1340,5,23,0,0,1339,1338,1,0,0,0,1339,1340,1,0,0,0,1340,1341,
1,0,0,0,1341,1342,7,17,0,0,1342,1343,3,100,50,0,1343,1344,5,305,0,0,1344,
1345,3,66,33,0,1345,1348,5,306,0,0,1346,1347,5,39,0,0,1347,1349,3,66,33,
0,1348,1346,1,0,0,0,1348,1349,1,0,0,0,1349,1363,1,0,0,0,1350,1352,5,28,0,
0,1351,1353,5,23,0,0,1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,1354,1,0,0,
0,1354,1363,5,29,0,0,1355,1357,5,28,0,0,1356,1358,5,23,0,0,1357,1356,1,0,
0,0,1357,1358,1,0,0,0,1358,1359,1,0,0,0,1359,1360,5,12,0,0,1360,1361,5,3,
0,0,1361,1363,3,66,33,0,1362,1294,1,0,0,0,1362,1297,1,0,0,0,1362,1302,1,
0,0,0,1362,1310,1,0,0,0,1362,1325,1,0,0,0,1362,1330,1,0,0,0,1362,1339,1,
0,0,0,1362,1350,1,0,0,0,1362,1355,1,0,0,0,1363,65,1,0,0,0,1364,1365,6,33,
-1,0,1365,1372,3,68,34,0,1366,1367,7,18,0,0,1367,1372,3,66,33,7,1368,1369,
3,192,96,0,1369,1370,3,92,46,0,1370,1372,1,0,0,0,1371,1364,1,0,0,0,1371,
1366,1,0,0,0,1371,1368,1,0,0,0,1372,1390,1,0,0,0,1373,1374,10,6,0,0,1374,
1375,5,296,0,0,1375,1389,3,66,33,7,1376,1377,10,5,0,0,1377,1378,7,19,0,0,
1378,1389,3,66,33,6,1379,1380,10,4,0,0,1380,1381,7,18,0,0,1381,1389,3,66,
33,5,1382,1383,10,3,0,0,1383,1384,7,20,0,0,1384,1389,3,66,33,4,1385,1386,
10,2,0,0,1386,1387,5,299,0,0,1387,1389,3,66,33,3,1388,1373,1,0,0,0,1388,
1376,1,0,0,0,1388,1379,1,0,0,0,1388,1382,1,0,0,0,1388,1385,1,0,0,0,1389,
1392,1,0,0,0,1390,1388,1,0,0,0,1390,1391,1,0,0,0,1391,67,1,0,0,0,1392,1390,
1,0,0,0,1393,1394,6,34,-1,0,1394,1462,3,74,37,0,1395,1462,3,70,35,0,1396,
1397,3,116,58,0,1397,1398,5,305,0,0,1398,1399,5,295,0,0,1399,1401,5,306,
0,0,1400,1402,3,36,18,0,1401,1400,1,0,0,0,1401,1402,1,0,0,0,1402,1404,1,
0,0,0,1403,1405,3,106,53,0,1404,1403,1,0,0,0,1404,1405,1,0,0,0,1405,1462,
1,0,0,0,1406,1462,3,124,62,0,1407,1408,3,116,58,0,1408,1420,5,305,0,0,1409,
1411,3,24,12,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,1412,1,0,0,0,1412,
1417,3,58,29,0,1413,1414,5,303,0,0,1414,1416,3,58,29,0,1415,1413,1,0,0,0,
1416,1419,1,0,0,0,1417,1415,1,0,0,0,1417,1418,1,0,0,0,1418,1421,1,0,0,0,
1419,1417,1,0,0,0,1420,1410,1,0,0,0,1420,1421,1,0,0,0,1421,1422,1,0,0,0,
1422,1424,5,306,0,0,1423,1425,3,36,18,0,1424,1423,1,0,0,0,1424,1425,1,0,
0,0,1425,1428,1,0,0,0,1426,1427,7,21,0,0,1427,1429,5,34,0,0,1428,1426,1,
0,0,0,1428,1429,1,0,0,0,1429,1431,1,0,0,0,1430,1432,3,106,53,0,1431,1430,
1,0,0,0,1431,1432,1,0,0,0,1432,1462,1,0,0,0,1433,1462,3,72,36,0,1434,1435,
5,305,0,0,1435,1436,3,68,34,0,1436,1437,5,306,0,0,1437,1438,5,304,0,0,1438,
1439,3,124,62,0,1439,1462,1,0,0,0,1440,1441,5,305,0,0,1441,1442,3,58,29,
0,1442,1443,5,306,0,0,1443,1462,1,0,0,0,1444,1445,5,24,0,0,1445,1446,5,305,
0,0,1446,1447,3,14,7,0,1447,1448,5,306,0,0,1448,1462,1,0,0,0,1449,1454,3,
124,62,0,1450,1451,5,304,0,0,1451,1453,3,124,62,0,1452,1450,1,0,0,0,1453,
1456,1,0,0,0,1454,1452,1,0,0,0,1454,1455,1,0,0,0,1455,1462,1,0,0,0,1456,
1454,1,0,0,0,1457,1459,5,233,0,0,1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,
1460,1,0,0,0,1460,1462,5,311,0,0,1461,1393,1,0,0,0,1461,1395,1,0,0,0,1461,
1396,1,0,0,0,1461,1406,1,0,0,0,1461,1407,1,0,0,0,1461,1433,1,0,0,0,1461,
1434,1,0,0,0,1461,1440,1,0,0,0,1461,1444,1,0,0,0,1461,1449,1,0,0,0,1461,
1458,1,0,0,0,1462,1488,1,0,0,0,1463,1464,10,2,0,0,1464,1465,5,6,0,0,1465,
1466,5,48,0,0,1466,1467,5,49,0,0,1467,1487,3,68,34,3,1468,1469,10,6,0,0,
1469,1470,5,309,0,0,1470,1471,3,66,33,0,1471,1472,5,310,0,0,1472,1487,1,
0,0,0,1473,1474,10,5,0,0,1474,1476,5,309,0,0,1475,1477,3,66,33,0,1476,1475,
1,0,0,0,1476,1477,1,0,0,0,1477,1478,1,0,0,0,1478,1480,5,302,0,0,1479,1481,
3,66,33,0,1480,1479,1,0,0,0,1480,1481,1,0,0,0,1481,1482,1,0,0,0,1482,1487,
5,310,0,0,1483,1484,10,3,0,0,1484,1485,5,300,0,0,1485,1487,3,192,96,0,1486,
1463,1,0,0,0,1486,1468,1,0,0,0,1486,1473,1,0,0,0,1486,1483,1,0,0,0,1487,
1490,1,0,0,0,1488,1486,1,0,0,0,1488,1489,1,0,0,0,1489,69,1,0,0,0,1490,1488,
1,0,0,0,1491,1608,5,56,0,0,1492,1497,5,57,0,0,1493,1494,5,305,0,0,1494,1495,
3,144,72,0,1495,1496,5,306,0,0,1496,1498,1,0,0,0,1497,1493,1,0,0,0,1497,
1498,1,0,0,0,1498,1608,1,0,0,0,1499,1504,5,58,0,0,1500,1501,5,305,0,0,1501,
1502,3,144,72,0,1502,1503,5,306,0,0,1503,1505,1,0,0,0,1504,1500,1,0,0,0,
1504,1505,1,0,0,0,1505,1608,1,0,0,0,1506,1608,5,59,0,0,1507,1608,7,22,0,
0,1508,1608,5,62,0,0,1509,1510,5,75,0,0,1510,1511,5,305,0,0,1511,1512,3,
58,29,0,1512,1513,5,303,0,0,1513,1514,3,58,29,0,1514,1515,5,306,0,0,1515,
1608,1,0,0,0,1516,1517,5,76,0,0,1517,1518,5,305,0,0,1518,1519,3,58,29,0,
1519,1520,5,303,0,0,1520,1521,3,58,29,0,1521,1522,5,306,0,0,1522,1608,1,
0,0,0,1523,1524,5,42,0,0,1524,1525,5,305,0,0,1525,1526,3,58,29,0,1526,1527,
5,3,0,0,1527,1530,3,58,29,0,1528,1529,5,47,0,0,1529,1531,3,58,29,0,1530,
1528,1,0,0,0,1530,1531,1,0,0,0,1531,1532,1,0,0,0,1532,1533,5,306,0,0,1533,
1608,1,0,0,0,1534,1535,5,43,0,0,1535,1543,5,305,0,0,1536,1538,7,23,0,0,1537,
1536,1,0,0,0,1537,1538,1,0,0,0,1538,1540,1,0,0,0,1539,1541,3,58,29,0,1540,
1539,1,0,0,0,1540,1541,1,0,0,0,1541,1542,1,0,0,0,1542,1544,5,3,0,0,1543,
1537,1,0,0,0,1543,1544,1,0,0,0,1544,1545,1,0,0,0,1545,1546,3,58,29,0,1546,
1547,5,306,0,0,1547,1608,1,0,0,0,1548,1549,5,63,0,0,1549,1550,5,305,0,0,
1550,1551,3,130,65,0,1551,1552,5,3,0,0,1552,1553,3,58,29,0,1553,1554,5,306,
0,0,1554,1608,1,0,0,0,1555,1556,5,183,0,0,1556,1557,5,305,0,0,1557,1558,
3,58,29,0,1558,1559,5,5,0,0,1559,1560,3,192,96,0,1560,1561,5,306,0,0,1561,
1608,1,0,0,0,1562,1563,5,184,0,0,1563,1564,5,305,0,0,1564,1565,3,58,29,0,
1565,1566,5,5,0,0,1566,1567,3,192,96,0,1567,1568,5,306,0,0,1568,1608,1,0,
0,0,1569,1570,5,64,0,0,1570,1572,3,58,29,0,1571,1573,3,102,51,0,1572,1571,
1,0,0,0,1573,1574,1,0,0,0,1574,1572,1,0,0,0,1574,1575,1,0,0,0,1575,1578,
1,0,0,0,1576,1577,5,67,0,0,1577,1579,3,58,29,0,1578,1576,1,0,0,0,1578,1579,
1,0,0,0,1579,1580,1,0,0,0,1580,1581,5,68,0,0,1581,1608,1,0,0,0,1582,1584,
5,64,0,0,1583,1585,3,102,51,0,1584,1583,1,0,0,0,1585,1586,1,0,0,0,1586,1584,
1,0,0,0,1586,1587,1,0,0,0,1587,1590,1,0,0,0,1588,1589,5,67,0,0,1589,1591,
3,58,29,0,1590,1588,1,0,0,0,1590,1591,1,0,0,0,1591,1592,1,0,0,0,1592,1593,
5,68,0,0,1593,1608,1,0,0,0,1594,1595,5,69,0,0,1595,1596,5,305,0,0,1596,1597,
3,58,29,0,1597,1598,5,303,0,0,1598,1601,3,58,29,0,1599,1600,5,303,0,0,1600,
1602,3,58,29,0,1601,1599,1,0,0,0,1601,1602,1,0,0,0,1602,1603,1,0,0,0,1603,
1604,5,306,0,0,1604,1608,1,0,0,0,1605,1606,5,233,0,0,1606,1608,3,72,36,0,
1607,1491,1,0,0,0,1607,1492,1,0,0,0,1607,1499,1,0,0,0,1607,1506,1,0,0,0,
1607,1507,1,0,0,0,1607,1508,1,0,0,0,1607,1509,1,0,0,0,1607,1516,1,0,0,0,
1607,1523,1,0,0,0,1607,1534,1,0,0,0,1607,1548,1,0,0,0,1607,1555,1,0,0,0,
1607,1562,1,0,0,0,1607,1569,1,0,0,0,1607,1582,1,0,0,0,1607,1594,1,0,0,0,
1607,1605,1,0,0,0,1608,71,1,0,0,0,1609,1610,5,305,0,0,1610,1611,3,14,7,0,
1611,1612,5,306,0,0,1612,73,1,0,0,0,1613,1642,3,76,38,0,1614,1616,5,233,
0,0,1615,1614,1,0,0,0,1615,1616,1,0,0,0,1616,1617,1,0,0,0,1617,1626,5,309,
0,0,1618,1623,3,58,29,0,1619,1620,5,303,0,0,1620,1622,3,58,29,0,1621,1619,
1,0,0,0,1622,1625,1,0,0,0,1623,1621,1,0,0,0,1623,1624,1,0,0,0,1624,1627,
1,0,0,0,1625,1623,1,0,0,0,1626,1618,1,0,0,0,1626,1627,1,0,0,0,1627,1628,
1,0,0,0,1628,1642,5,310,0,0,1629,1638,5,307,0,0,1630,1635,3,146,73,0,1631,
1632,5,303,0,0,1632,1634,3,146,73,0,1633,1631,1,0,0,0,1634,1637,1,0,0,0,
1635,1633,1,0,0,0,1635,1636,1,0,0,0,1636,1639,1,0,0,0,1637,1635,1,0,0,0,
1638,1630,1,0,0,0,1638,1639,1,0,0,0,1639,1640,1,0,0,0,1640,1642,5,308,0,
0,1641,1613,1,0,0,0,1641,1615,1,0,0,0,1641,1629,1,0,0,0,1642,75,1,0,0,0,
1643,1652,3,86,43,0,1644,1652,3,136,68,0,1645,1652,3,88,44,0,1646,1652,3,
92,46,0,1647,1652,3,134,67,0,1648,1652,3,140,70,0,1649,1652,3,94,47,0,1650,
1652,3,84,42,0,1651,1643,1,0,0,0,1651,1644,1,0,0,0,1651,1645,1,0,0,0,1651,
1646,1,0,0,0,1651,1647,1,0,0,0,1651,1648,1,0,0,0,1651,1649,1,0,0,0,1651,
1650,1,0,0,0,1652,77,1,0,0,0,1653,1675,3,84,42,0,1654,1675,3,144,72,0,1655,
1675,3,86,43,0,1656,1657,3,74,37,0,1657,1658,5,300,0,0,1658,1659,3,192,96,
0,1659,1675,1,0,0,0,1660,1661,5,183,0,0,1661,1662,5,305,0,0,1662,1663,3,
58,29,0,1663,1664,5,5,0,0,1664,1665,3,192,96,0,1665,1666,5,306,0,0,1666,
1675,1,0,0,0,1667,1668,5,184,0,0,1668,1669,5,305,0,0,1669,1670,3,58,29,0,
1670,1671,5,5,0,0,1671,1672,3,192,96,0,1672,1673,5,306,0,0,1673,1675,1,0,
0,0,1674,1653,1,0,0,0,1674,1654,1,0,0,0,1674,1655,1,0,0,0,1674,1656,1,0,
0,0,1674,1660,1,0,0,0,1674,1667,1,0,0,0,1675,79,1,0,0,0,1676,1679,3,84,42,
0,1677,1679,3,124,62,0,1678,1676,1,0,0,0,1678,1677,1,0,0,0,1679,81,1,0,0,
0,1680,1683,3,84,42,0,1681,1683,3,92,46,0,1682,1680,1,0,0,0,1682,1681,1,
0,0,0,1683,83,1,0,0,0,1684,1685,5,313,0,0,1685,1688,3,144,72,0,1686,1688,
5,312,0,0,1687,1684,1,0,0,0,1687,1686,1,0,0,0,1688,85,1,0,0,0,1689,1690,
5,29,0,0,1690,87,1,0,0,0,1691,1692,5,318,0,0,1692,89,1,0,0,0,1693,1697,5,
326,0,0,1694,1696,5,330,0,0,1695,1694,1,0,0,0,1696,1699,1,0,0,0,1697,1695,
1,0,0,0,1697,1698,1,0,0,0,1698,1700,1,0,0,0,1699,1697,1,0,0,0,1700,1701,
5,331,0,0,1701,91,1,0,0,0,1702,1705,5,317,0,0,1703,1705,3,90,45,0,1704,1702,
1,0,0,0,1704,1703,1,0,0,0,1705,93,1,0,0,0,1706,1707,5,319,0,0,1707,95,1,
0,0,0,1708,1709,6,48,-1,0,1709,1710,3,116,58,0,1710,1718,1,0,0,0,1711,1712,
10,2,0,0,1712,1713,5,309,0,0,1713,1714,3,66,33,0,1714,1715,5,310,0,0,1715,
1717,1,0,0,0,1716,1711,1,0,0,0,1717,1720,1,0,0,0,1718,1716,1,0,0,0,1718,
1719,1,0,0,0,1719,97,1,0,0,0,1720,1718,1,0,0,0,1721,1722,7,24,0,0,1722,99,
1,0,0,0,1723,1724,7,25,0,0,1724,101,1,0,0,0,1725,1726,5,65,0,0,1726,1727,
3,58,29,0,1727,1728,5,66,0,0,1728,1729,3,58,29,0,1729,103,1,0,0,0,1730,1731,
3,124,62,0,1731,1732,5,5,0,0,1732,1733,3,108,54,0,1733,105,1,0,0,0,1734,
1735,5,81,0,0,1735,1736,3,108,54,0,1736,107,1,0,0,0,1737,1771,3,124,62,0,
1738,1740,5,305,0,0,1739,1741,3,124,62,0,1740,1739,1,0,0,0,1740,1741,1,0,
0,0,1741,1752,1,0,0,0,1742,1743,5,83,0,0,1743,1744,5,15,0,0,1744,1749,3,
58,29,0,1745,1746,5,303,0,0,1746,1748,3,58,29,0,1747,1745,1,0,0,0,1748,1751,
1,0,0,0,1749,1747,1,0,0,0,1749,1750,1,0,0,0,1750,1753,1,0,0,0,1751,1749,
1,0,0,0,1752,1742,1,0,0,0,1752,1753,1,0,0,0,1753,1764,1,0,0,0,1754,1755,
5,16,0,0,1755,1756,5,15,0,0,1756,1761,3,26,13,0,1757,1758,5,303,0,0,1758,
1760,3,26,13,0,1759,1757,1,0,0,0,1760,1763,1,0,0,0,1761,1759,1,0,0,0,1761,
1762,1,0,0,0,1762,1765,1,0,0,0,1763,1761,1,0,0,0,1764,1754,1,0,0,0,1764,
1765,1,0,0,0,1765,1767,1,0,0,0,1766,1768,3,110,55,0,1767,1766,1,0,0,0,1767,
1768,1,0,0,0,1768,1769,1,0,0,0,1769,1771,5,306,0,0,1770,1737,1,0,0,0,1770,
1738,1,0,0,0,1771,109,1,0,0,0,1772,1773,5,85,0,0,1773,1789,3,112,56,0,1774,
1775,5,86,0,0,1775,1789,3,112,56,0,1776,1777,5,85,0,0,1777,1778,5,25,0,0,
1778,1779,3,112,56,0,1779,1780,5,21,0,0,1780,1781,3,112,56,0,1781,1789,1,
0,0,0,1782,1783,5,86,0,0,1783,1784,5,25,0,0,1784,1785,3,112,56,0,1785,1786,
5,21,0,0,1786,1787,3,112,56,0,1787,1789,1,0,0,0,1788,1772,1,0,0,0,1788,1774,
1,0,0,0,1788,1776,1,0,0,0,1788,1782,1,0,0,0,1789,111,1,0,0,0,1790,1791,5,
87,0,0,1791,1800,5,88,0,0,1792,1793,5,87,0,0,1793,1800,5,89,0,0,1794,1795,
5,90,0,0,1795,1800,5,91,0,0,1796,1797,3,58,29,0,1797,1798,7,26,0,0,1798,
1800,1,0,0,0,1799,1790,1,0,0,0,1799,1792,1,0,0,0,1799,1794,1,0,0,0,1799,
1796,1,0,0,0,1800,113,1,0,0,0,1801,1806,3,116,58,0,1802,1803,5,303,0,0,1803,
1805,3,116,58,0,1804,1802,1,0,0,0,1805,1808,1,0,0,0,1806,1804,1,0,0,0,1806,
1807,1,0,0,0,1807,115,1,0,0,0,1808,1806,1,0,0,0,1809,1814,3,124,62,0,1810,
1811,5,304,0,0,1811,1813,3,124,62,0,1812,1810,1,0,0,0,1813,1816,1,0,0,0,
1814,1812,1,0,0,0,1814,1815,1,0,0,0,1815,117,1,0,0,0,1816,1814,1,0,0,0,1817,
1821,3,120,60,0,1818,1820,3,120,60,0,1819,1818,1,0,0,0,1820,1823,1,0,0,0,
1821,1819,1,0,0,0,1821,1822,1,0,0,0,1822,119,1,0,0,0,1823,1821,1,0,0,0,1824,
1826,3,124,62,0,1825,1827,3,76,38,0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,
1827,121,1,0,0,0,1828,1833,3,124,62,0,1829,1830,5,303,0,0,1830,1832,3,124,
62,0,1831,1829,1,0,0,0,1832,1835,1,0,0,0,1833,1831,1,0,0,0,1833,1834,1,0,
0,0,1834,123,1,0,0,0,1835,1833,1,0,0,0,1836,1839,3,126,63,0,1837,1839,3,
128,64,0,1838,1836,1,0,0,0,1838,1837,1,0,0,0,1839,125,1,0,0,0,1840,1844,
5,322,0,0,1841,1844,3,248,124,0,1842,1844,5,323,0,0,1843,1840,1,0,0,0,1843,
1841,1,0,0,0,1843,1842,1,0,0,0,1844,127,1,0,0,0,1845,1848,5,324,0,0,1846,
1848,5,325,0,0,1847,1845,1,0,0,0,1847,1846,1,0,0,0,1848,129,1,0,0,0,1849,
1852,3,124,62,0,1850,1852,3,92,46,0,1851,1849,1,0,0,0,1851,1850,1,0,0,0,
1852,131,1,0,0,0,1853,1857,3,124,62,0,1854,1857,3,116,58,0,1855,1857,3,92,
46,0,1856,1853,1,0,0,0,1856,1854,1,0,0,0,1856,1855,1,0,0,0,1857,133,1,0,
0,0,1858,1861,3,142,71,0,1859,1861,3,144,72,0,1860,1858,1,0,0,0,1860,1859,
1,0,0,0,1861,135,1,0,0,0,1862,1864,5,70,0,0,1863,1865,7,18,0,0,1864,1863,
1,0,0,0,1864,1865,1,0,0,0,1865,1866,1,0,0,0,1866,1867,3,92,46,0,1867,1870,
3,138,69,0,1868,1869,5,4,0,0,1869,1871,3,138,69,0,1870,1868,1,0,0,0,1870,
1871,1,0,0,0,1871,137,1,0,0,0,1872,1873,7,27,0,0,1873,139,1,0,0,0,1874,1875,
7,28,0,0,1875,141,1,0,0,0,1876,1877,5,321,0,0,1877,143,1,0,0,0,1878,1879,
5,320,0,0,1879,145,1,0,0,0,1880,1881,3,124,62,0,1881,1882,5,282,0,0,1882,
1883,3,58,29,0,1883,147,1,0,0,0,1884,1890,3,14,7,0,1885,1886,5,305,0,0,1886,
1887,3,14,7,0,1887,1888,5,306,0,0,1888,1890,1,0,0,0,1889,1884,1,0,0,0,1889,
1885,1,0,0,0,1890,149,1,0,0,0,1891,1892,5,80,0,0,1892,1894,5,213,0,0,1893,
1895,3,152,76,0,1894,1893,1,0,0,0,1894,1895,1,0,0,0,1895,1896,1,0,0,0,1896,
1897,5,214,0,0,1897,1913,5,215,0,0,1898,1899,5,80,0,0,1899,1900,5,213,0,
0,1900,1901,3,152,76,0,1901,1902,5,214,0,0,1902,1903,5,210,0,0,1903,1904,
5,216,0,0,1904,1909,3,158,79,0,1905,1906,5,303,0,0,1906,1908,3,158,79,0,
1907,1905,1,0,0,0,1908,1911,1,0,0,0,1909,1907,1,0,0,0,1909,1910,1,0,0,0,
1910,1913,1,0,0,0,1911,1909,1,0,0,0,1912,1891,1,0,0,0,1912,1898,1,0,0,0,
1913,151,1,0,0,0,1914,1915,5,305,0,0,1915,1920,3,96,48,0,1916,1917,5,303,
0,0,1917,1919,3,96,48,0,1918,1916,1,0,0,0,1919,1922,1,0,0,0,1920,1918,1,
0,0,0,1920,1921,1,0,0,0,1921,1923,1,0,0,0,1922,1920,1,0,0,0,1923,1924,5,
306,0,0,1924,153,1,0,0,0,1925,1926,5,305,0,0,1926,1931,3,58,29,0,1927,1928,
5,303,0,0,1928,1930,3,58,29,0,1929,1927,1,0,0,0,1930,1933,1,0,0,0,1931,1929,
1,0,0,0,1931,1932,1,0,0,0,1932,1934,1,0,0,0,1933,1931,1,0,0,0,1934,1935,
5,306,0,0,1935,155,1,0,0,0,1936,1937,5,305,0,0,1937,1942,3,68,34,0,1938,
1939,5,303,0,0,1939,1941,3,68,34,0,1940,1938,1,0,0,0,1941,1944,1,0,0,0,1942,
1940,1,0,0,0,1942,1943,1,0,0,0,1943,1945,1,0,0,0,1944,1942,1,0,0,0,1945,
1946,5,306,0,0,1946,157,1,0,0,0,1947,1948,3,68,34,0,1948,1949,5,282,0,0,
1949,1950,3,58,29,0,1950,159,1,0,0,0,1951,1952,5,95,0,0,1952,1956,5,97,0,
0,1953,1954,5,69,0,0,1954,1955,5,23,0,0,1955,1957,5,24,0,0,1956,1953,1,0,
0,0,1956,1957,1,0,0,0,1957,1958,1,0,0,0,1958,1959,3,50,25,0,1959,1960,5,
305,0,0,1960,1965,3,182,91,0,1961,1962,5,303,0,0,1962,1964,3,182,91,0,1963,
1961,1,0,0,0,1964,1967,1,0,0,0,1965,1963,1,0,0,0,1965,1966,1,0,0,0,1966,
1968,1,0,0,0,1967,1965,1,0,0,0,1968,1969,5,306,0,0,1969,1971,3,174,87,0,
1970,1972,3,206,103,0,1971,1970,1,0,0,0,1971,1972,1,0,0,0,1972,2172,1,0,
0,0,1973,1974,5,95,0,0,1974,1975,5,97,0,0,1975,1976,3,50,25,0,1976,1977,
5,5,0,0,1977,1978,3,148,74,0,1978,2172,1,0,0,0,1979,1980,5,95,0,0,1980,1981,
5,275,0,0,1981,1985,5,97,0,0,1982,1983,5,69,0,0,1983,1984,5,23,0,0,1984,
1986,5,24,0,0,1985,1982,1,0,0,0,1985,1986,1,0,0,0,1986,1987,1,0,0,0,1987,
1988,3,116,58,0,1988,1989,5,305,0,0,1989,1994,3,182,91,0,1990,1991,5,303,
0,0,1991,1993,3,182,91,0,1992,1990,1,0,0,0,1993,1996,1,0,0,0,1994,1992,1,
0,0,0,1994,1995,1,0,0,0,1995,1997,1,0,0,0,1996,1994,1,0,0,0,1997,1998,5,
306,0,0,1998,1999,5,274,0,0,1999,2001,3,124,62,0,2000,2002,3,164,82,0,2001,
2000,1,0,0,0,2001,2002,1,0,0,0,2002,2172,1,0,0,0,2003,2004,5,95,0,0,2004,
2005,5,96,0,0,2005,2006,5,97,0,0,2006,2008,3,50,25,0,2007,2009,3,180,90,
0,2008,2007,1,0,0,0,2008,2009,1,0,0,0,2009,2011,1,0,0,0,2010,2012,3,206,
103,0,2011,2010,1,0,0,0,2011,2012,1,0,0,0,2012,2172,1,0,0,0,2013,2014,5,
95,0,0,2014,2015,5,104,0,0,2015,2016,3,124,62,0,2016,2017,5,178,0,0,2017,
2019,3,124,62,0,2018,2020,3,206,103,0,2019,2018,1,0,0,0,2019,2020,1,0,0,
0,2020,2172,1,0,0,0,2021,2022,5,95,0,0,2022,2023,5,105,0,0,2023,2027,3,116,
58,0,2024,2028,5,7,0,0,2025,2026,5,97,0,0,2026,2028,3,230,115,0,2027,2024,
1,0,0,0,2027,2025,1,0,0,0,2028,2030,1,0,0,0,2029,2031,3,206,103,0,2030,2029,
1,0,0,0,2030,2031,1,0,0,0,2031,2172,1,0,0,0,2032,2033,5,95,0,0,2033,2034,
5,234,0,0,2034,2037,3,124,62,0,2035,2036,5,235,0,0,2036,2038,3,124,62,0,
2037,2035,1,0,0,0,2037,2038,1,0,0,0,2038,2040,1,0,0,0,2039,2041,5,92,0,0,
2040,2039,1,0,0,0,2040,2041,1,0,0,0,2041,2042,1,0,0,0,2042,2043,5,305,0,
0,2043,2048,3,220,110,0,2044,2045,5,303,0,0,2045,2047,3,220,110,0,2046,2044,
1,0,0,0,2047,2050,1,0,0,0,2048,2046,1,0,0,0,2048,2049,1,0,0,0,2049,2051,
1,0,0,0,2050,2048,1,0,0,0,2051,2052,5,306,0,0,2052,2172,1,0,0,0,2053,2056,
5,95,0,0,2054,2055,5,20,0,0,2055,2057,5,161,0,0,2056,2054,1,0,0,0,2056,2057,
1,0,0,0,2057,2058,1,0,0,0,2058,2059,5,162,0,0,2059,2060,3,116,58,0,2060,
2069,5,305,0,0,2061,2066,3,168,84,0,2062,2063,5,303,0,0,2063,2065,3,168,
84,0,2064,2062,1,0,0,0,2065,2068,1,0,0,0,2066,2064,1,0,0,0,2066,2067,1,0,
0,0,2067,2070,1,0,0,0,2068,2066,1,0,0,0,2069,2061,1,0,0,0,2069,2070,1,0,
0,0,2070,2071,1,0,0,0,2071,2072,5,306,0,0,2072,2073,5,159,0,0,2073,2074,
3,192,96,0,2074,2075,5,163,0,0,2075,2076,3,80,40,0,2076,2077,5,5,0,0,2077,
2078,3,82,41,0,2078,2172,1,0,0,0,2079,2080,5,95,0,0,2080,2081,5,246,0,0,
2081,2085,5,279,0,0,2082,2083,5,69,0,0,2083,2084,5,23,0,0,2084,2086,5,24,
0,0,2085,2082,1,0,0,0,2085,2086,1,0,0,0,2086,2087,1,0,0,0,2087,2088,5,47,
0,0,2088,2089,3,162,81,0,2089,2090,5,274,0,0,2090,2092,3,124,62,0,2091,2093,
3,164,82,0,2092,2091,1,0,0,0,2092,2093,1,0,0,0,2093,2172,1,0,0,0,2094,2095,
5,95,0,0,2095,2096,7,7,0,0,2096,2110,3,124,62,0,2097,2109,3,206,103,0,2098,
2100,5,92,0,0,2099,2098,1,0,0,0,2099,2100,1,0,0,0,2100,2102,1,0,0,0,2101,
2103,5,305,0,0,2102,2101,1,0,0,0,2102,2103,1,0,0,0,2103,2104,1,0,0,0,2104,
2106,3,118,59,0,2105,2107,5,306,0,0,2106,2105,1,0,0,0,2106,2107,1,0,0,0,
2107,2109,1,0,0,0,2108,2097,1,0,0,0,2108,2099,1,0,0,0,2109,2111,1,0,0,0,
2110,2108,1,0,0,0,2110,2111,1,0,0,0,2111,2172,1,0,0,0,2112,2115,5,95,0,0,
2113,2114,5,20,0,0,2114,2116,5,161,0,0,2115,2113,1,0,0,0,2115,2116,1,0,0,
0,2116,2117,1,0,0,0,2117,2118,5,193,0,0,2118,2119,3,116,58,0,2119,2120,5,
5,0,0,2120,2121,3,12,6,0,2121,2172,1,0,0,0,2122,2123,5,95,0,0,2123,2124,
5,256,0,0,2124,2144,3,124,62,0,2125,2126,5,47,0,0,2126,2127,5,7,0,0,2127,
2145,5,186,0,0,2128,2129,5,47,0,0,2129,2130,5,97,0,0,2130,2132,3,116,58,
0,2131,2133,5,295,0,0,2132,2131,1,0,0,0,2132,2133,1,0,0,0,2133,2141,1,0,
0,0,2134,2135,5,303,0,0,2135,2137,3,116,58,0,2136,2138,5,295,0,0,2137,2136,
1,0,0,0,2137,2138,1,0,0,0,2138,2140,1,0,0,0,2139,2134,1,0,0,0,2140,2143,
1,0,0,0,2141,2139,1,0,0,0,2141,2142,1,0,0,0,2142,2145,1,0,0,0,2143,2141,
1,0,0,0,2144,2125,1,0,0,0,2144,2128,1,0,0,0,2144,2145,1,0,0,0,2145,2172,
1,0,0,0,2146,2147,5,95,0,0,2147,2148,5,257,0,0,2148,2149,3,124,62,0,2149,
2150,5,258,0,0,2150,2151,3,58,29,0,2151,2152,5,256,0,0,2152,2154,3,122,61,
0,2153,2155,3,206,103,0,2154,2153,1,0,0,0,2154,2155,1,0,0,0,2155,2172,1,
0,0,0,2156,2157,5,95,0,0,2157,2161,5,274,0,0,2158,2159,5,69,0,0,2159,2160,
5,23,0,0,2160,2162,5,24,0,0,2161,2158,1,0,0,0,2161,2162,1,0,0,0,2162,2163,
1,0,0,0,2163,2164,3,124,62,0,2164,2165,5,275,0,0,2165,2166,5,276,0,0,2166,
2167,5,277,0,0,2167,2169,3,124,62,0,2168,2170,3,164,82,0,2169,2168,1,0,0,
0,2169,2170,1,0,0,0,2170,2172,1,0,0,0,2171,1951,1,0,0,0,2171,1973,1,0,0,
0,2171,1979,1,0,0,0,2171,2003,1,0,0,0,2171,2013,1,0,0,0,2171,2021,1,0,0,
0,2171,2032,1,0,0,0,2171,2053,1,0,0,0,2171,2079,1,0,0,0,2171,2094,1,0,0,
0,2171,2112,1,0,0,0,2171,2122,1,0,0,0,2171,2146,1,0,0,0,2171,2156,1,0,0,
0,2172,161,1,0,0,0,2173,2178,3,124,62,0,2174,2178,5,246,0,0,2175,2178,5,
61,0,0,2176,2178,5,60,0,0,2177,2173,1,0,0,0,2177,2174,1,0,0,0,2177,2175,
1,0,0,0,2177,2176,1,0,0,0,2178,163,1,0,0,0,2179,2180,5,278,0,0,2180,2181,
5,305,0,0,2181,2186,3,166,83,0,2182,2183,5,303,0,0,2183,2185,3,166,83,0,
2184,2182,1,0,0,0,2185,2188,1,0,0,0,2186,2184,1,0,0,0,2186,2187,1,0,0,0,
2187,2189,1,0,0,0,2188,2186,1,0,0,0,2189,2190,5,306,0,0,2190,165,1,0,0,0,
2191,2192,3,124,62,0,2192,2193,3,74,37,0,2193,167,1,0,0,0,2194,2196,3,124,
62,0,2195,2194,1,0,0,0,2195,2196,1,0,0,0,2196,2197,1,0,0,0,2197,2198,3,192,
96,0,2198,169,1,0,0,0,2199,2200,5,108,0,0,2200,2203,3,116,58,0,2201,2203,
3,48,24,0,2202,2199,1,0,0,0,2202,2201,1,0,0,0,2203,171,1,0,0,0,2204,2205,
7,29,0,0,2205,173,1,0,0,0,2206,2208,3,176,88,0,2207,2206,1,0,0,0,2207,2208,
1,0,0,0,2208,2210,1,0,0,0,2209,2211,3,178,89,0,2210,2209,1,0,0,0,2210,2211,
1,0,0,0,2211,2219,1,0,0,0,2212,2214,3,178,89,0,2213,2212,1,0,0,0,2213,2214,
1,0,0,0,2214,2216,1,0,0,0,2215,2217,3,176,88,0,2216,2215,1,0,0,0,2216,2217,
1,0,0,0,2217,2219,1,0,0,0,2218,2207,1,0,0,0,2218,2213,1,0,0,0,2219,175,1,
0,0,0,2220,2221,5,239,0,0,2221,2222,5,15,0,0,2222,2223,3,156,78,0,2223,177,
1,0,0,0,2224,2230,5,220,0,0,2225,2226,5,15,0,0,2226,2227,5,305,0,0,2227,
2228,3,68,34,0,2228,2229,5,306,0,0,2229,2231,1,0,0,0,2230,2225,1,0,0,0,2230,
2231,1,0,0,0,2231,2236,1,0,0,0,2232,2233,5,207,0,0,2233,2234,3,78,39,0,2234,
2235,5,221,0,0,2235,2237,1,0,0,0,2236,2232,1,0,0,0,2236,2237,1,0,0,0,2237,
179,1,0,0,0,2238,2239,5,220,0,0,2239,2240,5,207,0,0,2240,2241,3,78,39,0,
2241,2242,5,221,0,0,2242,181,1,0,0,0,2243,2257,3,184,92,0,2244,2245,3,202,
101,0,2245,2246,3,156,78,0,2246,2257,1,0,0,0,2247,2248,5,227,0,0,2248,2249,
3,124,62,0,2249,2250,5,79,0,0,2250,2251,3,124,62,0,2251,2253,3,156,78,0,
2252,2254,3,206,103,0,2253,2252,1,0,0,0,2253,2254,1,0,0,0,2254,2257,1,0,
0,0,2255,2257,3,204,102,0,2256,2243,1,0,0,0,2256,2244,1,0,0,0,2256,2247,
1,0,0,0,2256,2255,1,0,0,0,2257,183,1,0,0,0,2258,2260,3,124,62,0,2259,2261,
3,192,96,0,2260,2259,1,0,0,0,2260,2261,1,0,0,0,2261,2265,1,0,0,0,2262,2264,
3,200,100,0,2263,2262,1,0,0,0,2264,2267,1,0,0,0,2265,2263,1,0,0,0,2265,2266,
1,0,0,0,2266,185,1,0,0,0,2267,2265,1,0,0,0,2268,2270,5,109,0,0,2269,2271,
5,110,0,0,2270,2269,1,0,0,0,2270,2271,1,0,0,0,2271,2272,1,0,0,0,2272,2274,
3,96,48,0,2273,2275,3,192,96,0,2274,2273,1,0,0,0,2274,2275,1,0,0,0,2275,
2279,1,0,0,0,2276,2278,3,200,100,0,2277,2276,1,0,0,0,2278,2281,1,0,0,0,2279,
2277,1,0,0,0,2279,2280,1,0,0,0,2280,187,1,0,0,0,2281,2279,1,0,0,0,2282,2284,
5,197,0,0,2283,2285,5,110,0,0,2284,2283,1,0,0,0,2284,2285,1,0,0,0,2285,2288,
1,0,0,0,2286,2287,5,69,0,0,2287,2289,5,24,0,0,2288,2286,1,0,0,0,2288,2289,
1,0,0,0,2289,2290,1,0,0,0,2290,2291,3,96,48,0,2291,189,1,0,0,0,2292,2293,
5,115,0,0,2293,2294,5,116,0,0,2294,2295,3,78,39,0,2295,2296,5,3,0,0,2296,
2297,3,82,41,0,2297,2298,5,4,0,0,2298,2299,3,82,41,0,2299,2325,1,0,0,0,2300,
2301,5,117,0,0,2301,2302,5,118,0,0,2302,2303,5,116,0,0,2303,2304,3,78,39,
0,2304,2305,5,80,0,0,2305,2306,3,82,41,0,2306,2325,1,0,0,0,2307,2308,5,84,
0,0,2308,2309,5,118,0,0,2309,2310,5,116,0,0,2310,2311,3,78,39,0,2311,2312,
5,80,0,0,2312,2314,3,82,41,0,2313,2315,3,206,103,0,2314,2313,1,0,0,0,2314,
2315,1,0,0,0,2315,2325,1,0,0,0,2316,2317,5,119,0,0,2317,2318,5,116,0,0,2318,
2319,3,78,39,0,2319,2320,5,80,0,0,2320,2322,3,82,41,0,2321,2323,3,206,103,
0,2322,2321,1,0,0,0,2322,2323,1,0,0,0,2323,2325,1,0,0,0,2324,2292,1,0,0,
0,2324,2300,1,0,0,0,2324,2307,1,0,0,0,2324,2316,1,0,0,0,2325,191,1,0,0,0,
2326,2327,6,96,-1,0,2327,2339,3,194,97,0,2328,2329,5,305,0,0,2329,2334,3,
144,72,0,2330,2331,5,303,0,0,2331,2333,3,144,72,0,2332,2330,1,0,0,0,2333,
2336,1,0,0,0,2334,2332,1,0,0,0,2334,2335,1,0,0,0,2335,2337,1,0,0,0,2336,
2334,1,0,0,0,2337,2338,5,306,0,0,2338,2340,1,0,0,0,2339,2328,1,0,0,0,2339,
2340,1,0,0,0,2340,2348,1,0,0,0,2341,2348,3,198,99,0,2342,2343,5,233,0,0,
2343,2344,5,305,0,0,2344,2345,3,192,96,0,2345,2346,5,306,0,0,2346,2348,1,
0,0,0,2347,2326,1,0,0,0,2347,2341,1,0,0,0,2347,2342,1,0,0,0,2348,2353,1,
0,0,0,2349,2350,10,1,0,0,2350,2352,5,311,0,0,2351,2349,1,0,0,0,2352,2355,
1,0,0,0,2353,2351,1,0,0,0,2353,2354,1,0,0,0,2354,193,1,0,0,0,2355,2353,1,
0,0,0,2356,2359,3,196,98,0,2357,2359,3,124,62,0,2358,2356,1,0,0,0,2358,2357,
1,0,0,0,2359,195,1,0,0,0,2360,2361,5,129,0,0,2361,2378,5,130,0,0,2362,2363,
5,131,0,0,2363,2364,5,93,0,0,2364,2365,5,48,0,0,2365,2378,5,49,0,0,2366,
2367,5,131,0,0,2367,2368,5,92,0,0,2368,2369,5,48,0,0,2369,2378,5,49,0,0,
2370,2371,5,48,0,0,2371,2372,5,92,0,0,2372,2373,5,48,0,0,2373,2378,5,49,
0,0,2374,2375,5,133,0,0,2375,2378,5,135,0,0,2376,2378,5,134,0,0,2377,2360,
1,0,0,0,2377,2362,1,0,0,0,2377,2366,1,0,0,0,2377,2370,1,0,0,0,2377,2374,
1,0,0,0,2377,2376,1,0,0,0,2378,197,1,0,0,0,2379,2383,5,136,0,0,2380,2381,
5,305,0,0,2381,2382,7,30,0,0,2382,2384,5,306,0,0,2383,2380,1,0,0,0,2383,
2384,1,0,0,0,2384,2397,1,0,0,0,2385,2386,5,5,0,0,2386,2387,5,305,0,0,2387,
2392,3,184,92,0,2388,2389,5,303,0,0,2389,2391,3,184,92,0,2390,2388,1,0,0,
0,2391,2394,1,0,0,0,2392,2390,1,0,0,0,2392,2393,1,0,0,0,2393,2395,1,0,0,
0,2394,2392,1,0,0,0,2395,2396,5,306,0,0,2396,2398,1,0,0,0,2397,2385,1,0,
0,0,2397,2398,1,0,0,0,2398,199,1,0,0,0,2399,2431,3,202,101,0,2400,2401,5,
23,0,0,2401,2431,5,29,0,0,2402,2431,5,29,0,0,2403,2404,5,227,0,0,2404,2405,
5,79,0,0,2405,2407,3,124,62,0,2406,2408,3,206,103,0,2407,2406,1,0,0,0,2407,
2408,1,0,0,0,2408,2431,1,0,0,0,2409,2410,5,227,0,0,2410,2431,5,223,0,0,2411,
2412,5,228,0,0,2412,2431,3,206,103,0,2413,2414,5,173,0,0,2414,2416,3,124,
62,0,2415,2413,1,0,0,0,2415,2416,1,0,0,0,2416,2417,1,0,0,0,2417,2418,5,218,
0,0,2418,2431,3,58,29,0,2419,2420,5,173,0,0,2420,2422,3,124,62,0,2421,2419,
1,0,0,0,2421,2422,1,0,0,0,2422,2425,1,0,0,0,2423,2424,5,244,0,0,2424,2426,
5,245,0,0,2425,2423,1,0,0,0,2425,2426,1,0,0,0,2426,2427,1,0,0,0,2427,2428,
5,5,0,0,2428,2431,3,58,29,0,2429,2431,3,204,102,0,2430,2399,1,0,0,0,2430,
2400,1,0,0,0,2430,2402,1,0,0,0,2430,2403,1,0,0,0,2430,2409,1,0,0,0,2430,
2411,1,0,0,0,2430,2415,1,0,0,0,2430,2421,1,0,0,0,2430,2429,1,0,0,0,2431,
201,1,0,0,0,2432,2433,5,173,0,0,2433,2435,3,124,62,0,2434,2432,1,0,0,0,2434,
2435,1,0,0,0,2435,2436,1,0,0,0,2436,2437,5,222,0,0,2437,203,1,0,0,0,2438,
2439,5,173,0,0,2439,2441,3,124,62,0,2440,2438,1,0,0,0,2440,2441,1,0,0,0,
2441,2442,1,0,0,0,2442,2443,5,174,0,0,2443,2444,5,305,0,0,2444,2445,3,60,
30,0,2445,2446,5,306,0,0,2446,205,1,0,0,0,2447,2448,5,92,0,0,2448,2449,5,
305,0,0,2449,2450,3,208,104,0,2450,2451,5,306,0,0,2451,207,1,0,0,0,2452,
2457,3,210,105,0,2453,2454,5,303,0,0,2454,2456,3,210,105,0,2455,2453,1,0,
0,0,2456,2459,1,0,0,0,2457,2455,1,0,0,0,2457,2458,1,0,0,0,2458,209,1,0,0,
0,2459,2457,1,0,0,0,2460,2461,3,124,62,0,2461,2462,5,282,0,0,2462,2463,3,
58,29,0,2463,211,1,0,0,0,2464,2465,5,305,0,0,2465,2470,3,214,107,0,2466,
2467,5,303,0,0,2467,2469,3,214,107,0,2468,2466,1,0,0,0,2469,2472,1,0,0,0,
2470,2468,1,0,0,0,2470,2471,1,0,0,0,2471,2473,1,0,0,0,2472,2470,1,0,0,0,
2473,2474,5,306,0,0,2474,213,1,0,0,0,2475,2477,7,31,0,0,2476,2478,3,140,
70,0,2477,2476,1,0,0,0,2477,2478,1,0,0,0,2478,215,1,0,0,0,2479,2492,3,218,
109,0,2480,2481,5,305,0,0,2481,2486,3,218,109,0,2482,2483,5,303,0,0,2483,
2485,3,218,109,0,2484,2482,1,0,0,0,2485,2488,1,0,0,0,2486,2484,1,0,0,0,2486,
2487,1,0,0,0,2487,2489,1,0,0,0,2488,2486,1,0,0,0,2489,2490,5,306,0,0,2490,
2492,1,0,0,0,2491,2479,1,0,0,0,2491,2480,1,0,0,0,2492,217,1,0,0,0,2493,2495,
3,96,48,0,2494,2496,3,76,38,0,2495,2494,1,0,0,0,2495,2496,1,0,0,0,2496,219,
1,0,0,0,2497,2502,3,222,111,0,2498,2502,3,224,112,0,2499,2502,3,226,113,
0,2500,2502,3,210,105,0,2501,2497,1,0,0,0,2501,2498,1,0,0,0,2501,2499,1,
0,0,0,2501,2500,1,0,0,0,2502,221,1,0,0,0,2503,2504,5,236,0,0,2504,2505,3,
228,114,0,2505,223,1,0,0,0,2506,2507,5,237,0,0,2507,2508,5,305,0,0,2508,
2513,3,228,114,0,2509,2510,5,303,0,0,2510,2512,3,228,114,0,2511,2509,1,0,
0,0,2512,2515,1,0,0,0,2513,2511,1,0,0,0,2513,2514,1,0,0,0,2514,2516,1,0,
0,0,2515,2513,1,0,0,0,2516,2517,5,306,0,0,2517,225,1,0,0,0,2518,2519,5,238,
0,0,2519,2520,5,305,0,0,2520,2525,3,228,114,0,2521,2522,5,303,0,0,2522,2524,
3,228,114,0,2523,2521,1,0,0,0,2524,2527,1,0,0,0,2525,2523,1,0,0,0,2525,2526,
1,0,0,0,2526,2528,1,0,0,0,2527,2525,1,0,0,0,2528,2529,5,306,0,0,2529,227,
1,0,0,0,2530,2532,3,124,62,0,2531,2533,3,206,103,0,2532,2531,1,0,0,0,2532,
2533,1,0,0,0,2533,229,1,0,0,0,2534,2539,3,48,24,0,2535,2536,5,303,0,0,2536,
2538,3,48,24,0,2537,2535,1,0,0,0,2538,2541,1,0,0,0,2539,2537,1,0,0,0,2539,
2540,1,0,0,0,2540,231,1,0,0,0,2541,2539,1,0,0,0,2542,2543,3,68,34,0,2543,
2544,7,3,0,0,2544,2545,3,58,29,0,2545,233,1,0,0,0,2546,2552,3,92,46,0,2547,
2552,3,140,70,0,2548,2552,3,134,67,0,2549,2552,3,124,62,0,2550,2552,3,236,
118,0,2551,2546,1,0,0,0,2551,2547,1,0,0,0,2551,2548,1,0,0,0,2551,2549,1,
0,0,0,2551,2550,1,0,0,0,2552,235,1,0,0,0,2553,2554,5,80,0,0,2554,237,1,0,
0,0,2555,2556,7,32,0,0,2556,239,1,0,0,0,2557,2558,5,150,0,0,2558,2559,5,
151,0,0,2559,2571,3,242,121,0,2560,2561,5,156,0,0,2561,2565,5,157,0,0,2562,
2563,5,156,0,0,2563,2565,5,108,0,0,2564,2560,1,0,0,0,2564,2562,1,0,0,0,2565,
2571,1,0,0,0,2566,2568,5,23,0,0,2567,2566,1,0,0,0,2567,2568,1,0,0,0,2568,
2569,1,0,0,0,2569,2571,5,158,0,0,2570,2557,1,0,0,0,2570,2564,1,0,0,0,2570,
2567,1,0,0,0,2571,241,1,0,0,0,2572,2580,5,152,0,0,2573,2574,5,153,0,0,2574,
2580,5,156,0,0,2575,2576,5,156,0,0,2576,2580,5,154,0,0,2577,2578,5,156,0,
0,2578,2580,5,155,0,0,2579,2572,1,0,0,0,2579,2573,1,0,0,0,2579,2575,1,0,
0,0,2579,2577,1,0,0,0,2580,243,1,0,0,0,2581,2605,5,38,0,0,2582,2605,5,273,
0,0,2583,2605,5,36,0,0,2584,2605,5,37,0,0,2585,2586,5,269,0,0,2586,2605,
3,144,72,0,2587,2589,5,272,0,0,2588,2590,5,294,0,0,2589,2588,1,0,0,0,2589,
2590,1,0,0,0,2590,2591,1,0,0,0,2591,2605,3,144,72,0,2592,2605,3,144,72,0,
2593,2605,5,7,0,0,2594,2605,5,270,0,0,2595,2596,5,270,0,0,2596,2605,3,144,
72,0,2597,2598,5,270,0,0,2598,2605,5,7,0,0,2599,2605,5,271,0,0,2600,2601,
5,271,0,0,2601,2605,3,144,72,0,2602,2603,5,271,0,0,2603,2605,5,7,0,0,2604,
2581,1,0,0,0,2604,2582,1,0,0,0,2604,2583,1,0,0,0,2604,2584,1,0,0,0,2604,
2585,1,0,0,0,2604,2587,1,0,0,0,2604,2592,1,0,0,0,2604,2593,1,0,0,0,2604,
2594,1,0,0,0,2604,2595,1,0,0,0,2604,2597,1,0,0,0,2604,2599,1,0,0,0,2604,
2600,1,0,0,0,2604,2602,1,0,0,0,2605,245,1,0,0,0,2606,2614,5,263,0,0,2607,
2614,5,265,0,0,2608,2614,5,264,0,0,2609,2611,5,266,0,0,2610,2609,1,0,0,0,
2610,2611,1,0,0,0,2611,2612,1,0,0,0,2612,2614,5,267,0,0,2613,2606,1,0,0,
0,2613,2607,1,0,0,0,2613,2608,1,0,0,0,2613,2610,1,0,0,0,2614,2617,1,0,0,
0,2615,2613,1,0,0,0,2615,2616,1,0,0,0,2616,247,1,0,0,0,2617,2615,1,0,0,0,
2618,2619,7,33,0,0,2619,249,1,0,0,0,338,255,259,265,275,279,284,287,293,
298,301,305,309,317,320,327,340,344,347,353,360,370,375,382,390,395,400,
410,417,425,430,436,443,453,456,461,468,477,482,493,498,502,505,515,518,
528,533,538,542,547,550,554,558,565,567,573,581,583,589,597,599,605,612,
616,627,634,637,643,645,652,659,675,684,687,695,702,712,719,726,730,737,
741,748,755,765,776,801,806,808,826,831,833,837,845,855,861,869,889,915,
920,924,932,943,946,958,961,964,967,970,973,975,980,988,993,1001,1006,1011,
1018,1022,1026,1033,1042,1045,1048,1057,1060,1064,1072,1075,1083,1086,1090,
1093,1100,1111,1136,1140,1144,1148,1152,1156,1158,1169,1174,1178,1182,1184,
1195,1205,1210,1216,1222,1227,1235,1246,1251,1273,1275,1277,1285,1287,1292,
1302,1310,1319,1325,1330,1336,1339,1348,1352,1357,1362,1371,1388,1390,1401,
1404,1410,1417,1420,1424,1428,1431,1454,1458,1461,1476,1480,1486,1488,1497,
1504,1530,1537,1540,1543,1574,1578,1586,1590,1601,1607,1615,1623,1626,1635,
1638,1641,1651,1674,1678,1682,1687,1697,1704,1718,1740,1749,1752,1761,1764,
1767,1770,1788,1799,1806,1814,1821,1826,1833,1838,1843,1847,1851,1856,1860,
1864,1870,1889,1894,1909,1912,1920,1931,1942,1956,1965,1971,1985,1994,2001,
2008,2011,2019,2027,2030,2037,2040,2048,2056,2066,2069,2085,2092,2099,2102,
2106,2108,2110,2115,2132,2137,2141,2144,2154,2161,2169,2171,2177,2186,2195,
2202,2207,2210,2213,2216,2218,2230,2236,2253,2256,2260,2265,2270,2274,2279,
2284,2288,2314,2322,2324,2334,2339,2347,2353,2358,2377,2383,2392,2397,2407,
2415,2421,2425,2430,2434,2440,2457,2470,2477,2486,2491,2495,2501,2513,2525,
2532,2539,2551,2564,2567,2570,2579,2589,2604,2610,2613,2615];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class SqlBaseParser extends antlr4.Parser {

    static grammarFileName = "SqlBaseParser.g4";
    static literalNames = [ null, "'AUTHORIZATION'", "'SELECT'", "'FROM'", 
                            "'TO'", "'AS'", "'AT'", "'ALL'", "'ANY'", "'SOME'", 
                            "'DEALLOCATE'", "'DIRECTORY'", "'DISTINCT'", 
                            "'WHERE'", "'GROUP'", "'BY'", "'ORDER'", "'HAVING'", 
                            "'LIMIT'", "'OFFSET'", "'OR'", "'AND'", "'IN'", 
                            "'NOT'", "'EXISTS'", "'BETWEEN'", "'LIKE'", 
                            "'ILIKE'", "'IS'", "'NULL'", "'TRUE'", "'FALSE'", 
                            "'IGNORE'", "'RESPECT'", "'NULLS'", "'FETCH'", 
                            "'FIRST'", "'LAST'", "'NEXT'", "'ESCAPE'", "'ASC'", 
                            "'DESC'", "'SUBSTRING'", "'TRIM'", "'LEADING'", 
                            "'TRAILING'", "'BOTH'", "'FOR'", "'TIME'", "'ZONE'", 
                            "'YEAR'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", 
                            "'SECOND'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
                            "'CURRENT_TIMESTAMP'", "'CURRENT_SCHEMA'", "'CURRENT_USER'", 
                            "'CURRENT_ROLE'", "'SESSION_USER'", "'EXTRACT'", 
                            "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", "'END'", 
                            "'IF'", "'INTERVAL'", "'JOIN'", "'CROSS'", "'OUTER'", 
                            "'INNER'", "'LEFT'", "'RIGHT'", "'FULL'", "'NATURAL'", 
                            "'USING'", "'ON'", "'OVER'", "'WINDOW'", "'PARTITION'", 
                            "'PROMOTE'", "'RANGE'", "'ROWS'", "'UNBOUNDED'", 
                            "'PRECEDING'", "'FOLLOWING'", "'CURRENT'", "'ROW'", 
                            "'WITH'", "'WITHOUT'", "'RECURSIVE'", "'CREATE'", 
                            "'BLOB'", "'TABLE'", "'SWAP'", "'GC'", "'DANGLING'", 
                            "'ARTIFACTS'", "'DECOMMISSION'", "'CLUSTER'", 
                            "'REPOSITORY'", "'SNAPSHOT'", "'ALTER'", "'KILL'", 
                            "'ONLY'", "'ADD'", "'COLUMN'", "'OPEN'", "'CLOSE'", 
                            "'RENAME'", "'REROUTE'", "'MOVE'", "'SHARD'", 
                            "'ALLOCATE'", "'REPLICA'", "'CANCEL'", "'RETRY'", 
                            "'FAILED'", "'BOOLEAN'", "'BYTE'", "'SHORT'", 
                            "'INTEGER'", "'INT'", "'LONG'", "'FLOAT'", "'DOUBLE'", 
                            "'PRECISION'", "'TIMESTAMP'", "'IP'", "'CHARACTER'", 
                            "'\"CHAR\"'", "'VARYING'", "'OBJECT'", "'STRING'", 
                            "'GEO_POINT'", "'GEO_SHAPE'", "'GLOBAL'", "'SESSION'", 
                            "'LOCAL'", "'BEGIN'", "'START'", "'COMMIT'", 
                            "'WORK'", "'TRANSACTION'", "'TRANSACTION_ISOLATION'", 
                            "'CHARACTERISTICS'", "'ISOLATION'", "'LEVEL'", 
                            "'SERIALIZABLE'", "'REPEATABLE'", "'COMMITTED'", 
                            "'UNCOMMITTED'", "'READ'", "'WRITE'", "'DEFERRABLE'", 
                            "'RETURNS'", "'CALLED'", "'REPLACE'", "'FUNCTION'", 
                            "'LANGUAGE'", "'INPUT'", "'ANALYZE'", "'COSTS'", 
                            "'VERBOSE'", "'DISCARD'", "'PLANS'", "'SEQUENCES'", 
                            "'TEMPORARY'", "'TEMP'", "'CONSTRAINT'", "'CHECK'", 
                            "'DESCRIBE'", "'EXPLAIN'", "'FORMAT'", "'TYPE'", 
                            "'TEXT'", "'GRAPHVIZ'", "'LOGICAL'", "'DISTRIBUTED'", 
                            "'CAST'", "'TRY_CAST'", "'SHOW'", "'TABLES'", 
                            "'SCHEMAS'", "'CATALOGS'", "'COLUMNS'", "'PARTITIONS'", 
                            "'FUNCTIONS'", "'MATERIALIZED'", "'VIEW'", "'OPTIMIZE'", 
                            "'REFRESH'", "'RESTORE'", "'DROP'", "'ALIAS'", 
                            "'UNION'", "'EXCEPT'", "'INTERSECT'", "'SYSTEM'", 
                            "'BERNOULLI'", "'TABLESAMPLE'", "'STRATIFY'", 
                            "'INSERT'", "'INTO'", "'VALUES'", "'DELETE'", 
                            "'UPDATE'", "'KEY'", "'DUPLICATE'", "'CONFLICT'", 
                            "'DO'", "'NOTHING'", "'SET'", "'RESET'", "'DEFAULT'", 
                            "'COPY'", "'CLUSTERED'", "'SHARDS'", "'PRIMARY KEY'", 
                            "'OFF'", "'FULLTEXT'", "'FILTER'", "'PLAIN'", 
                            "'INDEX'", "'STORAGE'", "'RETURNING'", "'DYNAMIC'", 
                            "'STRICT'", "'IGNORED'", "'ARRAY'", "'ANALYZER'", 
                            "'EXTENDS'", "'TOKENIZER'", "'TOKEN_FILTERS'", 
                            "'CHAR_FILTERS'", "'PARTITIONED'", "'PREPARE'", 
                            "'TRANSIENT'", "'PERSISTENT'", "'MATCH'", "'GENERATED'", 
                            "'ALWAYS'", "'USER'", "'ROLE'", "'GRANT'", "'DENY'", 
                            "'REVOKE'", "'PRIVILEGES'", "'SCHEMA'", "'RETURN'", 
                            "'SUMMARY'", "'METADATA'", "'PUBLICATION'", 
                            "'SUBSCRIPTION'", "'CONNECTION'", "'ENABLE'", 
                            "'DISABLE'", "'DECLARE'", "'CURSOR'", "'ASENSITIVE'", 
                            "'INSENSITIVE'", "'BINARY'", "'NO'", "'SCROLL'", 
                            "'HOLD'", "'ABSOLUTE'", "'FORWARD'", "'BACKWARD'", 
                            "'RELATIVE'", "'PRIOR'", "'SERVER'", "'FOREIGN'", 
                            "'DATA'", "'WRAPPER'", "'OPTIONS'", "'MAPPING'", 
                            "'CASCADE'", "'RESTRICT'", "'='", null, "'<'", 
                            "'<='", "'>'", "'>='", "'<<'", "'~'", "'!~'", 
                            "'~*'", "'!~*'", "'+'", "'-'", "'*'", "'^'", 
                            "'/'", "'%'", "'||'", "'::'", "';'", "':'", 
                            "','", "'.'", "'('", "')'", "'{'", "'}'", "'['", 
                            "']'", "'[]'", "'?'", "'$'", "'&'", "'|'", "'#'" ];
    static symbolicNames = [ null, "AUTHORIZATION", "SELECT", "FROM", "TO", 
                             "AS", "AT", "ALL", "ANY", "SOME", "DEALLOCATE", 
                             "DIRECTORY", "DISTINCT", "WHERE", "GROUP", 
                             "BY", "ORDER", "HAVING", "LIMIT", "OFFSET", 
                             "OR", "AND", "IN", "NOT", "EXISTS", "BETWEEN", 
                             "LIKE", "ILIKE", "IS", "NULL", "TRUE", "FALSE", 
                             "IGNORE", "RESPECT", "NULLS", "FETCH", "FIRST", 
                             "LAST", "NEXT", "ESCAPE", "ASC", "DESC", "SUBSTRING", 
                             "TRIM", "LEADING", "TRAILING", "BOTH", "FOR", 
                             "TIME", "ZONE", "YEAR", "MONTH", "DAY", "HOUR", 
                             "MINUTE", "SECOND", "CURRENT_DATE", "CURRENT_TIME", 
                             "CURRENT_TIMESTAMP", "CURRENT_SCHEMA", "CURRENT_USER", 
                             "CURRENT_ROLE", "SESSION_USER", "EXTRACT", 
                             "CASE", "WHEN", "THEN", "ELSE", "END", "IF", 
                             "INTERVAL", "JOIN", "CROSS", "OUTER", "INNER", 
                             "LEFT", "RIGHT", "FULL", "NATURAL", "USING", 
                             "ON", "OVER", "WINDOW", "PARTITION", "PROMOTE", 
                             "RANGE", "ROWS", "UNBOUNDED", "PRECEDING", 
                             "FOLLOWING", "CURRENT", "ROW", "WITH", "WITHOUT", 
                             "RECURSIVE", "CREATE", "BLOB", "TABLE", "SWAP", 
                             "GC", "DANGLING", "ARTIFACTS", "DECOMMISSION", 
                             "CLUSTER", "REPOSITORY", "SNAPSHOT", "ALTER", 
                             "KILL", "ONLY", "ADD", "COLUMN", "OPEN", "CLOSE", 
                             "RENAME", "REROUTE", "MOVE", "SHARD", "ALLOCATE", 
                             "REPLICA", "CANCEL", "RETRY", "FAILED", "BOOLEAN", 
                             "BYTE", "SHORT", "INTEGER", "INT", "LONG", 
                             "FLOAT", "DOUBLE", "PRECISION", "TIMESTAMP", 
                             "IP", "CHARACTER", "CHAR_SPECIAL", "VARYING", 
                             "OBJECT", "STRING_TYPE", "GEO_POINT", "GEO_SHAPE", 
                             "GLOBAL", "SESSION", "LOCAL", "BEGIN", "START", 
                             "COMMIT", "WORK", "TRANSACTION", "TRANSACTION_ISOLATION", 
                             "CHARACTERISTICS", "ISOLATION", "LEVEL", "SERIALIZABLE", 
                             "REPEATABLE", "COMMITTED", "UNCOMMITTED", "READ", 
                             "WRITE", "DEFERRABLE", "RETURNS", "CALLED", 
                             "REPLACE", "FUNCTION", "LANGUAGE", "INPUT", 
                             "ANALYZE", "COSTS", "VERBOSE", "DISCARD", "PLANS", 
                             "SEQUENCES", "TEMPORARY", "TEMP", "CONSTRAINT", 
                             "CHECK", "DESCRIBE", "EXPLAIN", "FORMAT", "TYPE", 
                             "TEXT", "GRAPHVIZ", "LOGICAL", "DISTRIBUTED", 
                             "CAST", "TRY_CAST", "SHOW", "TABLES", "SCHEMAS", 
                             "CATALOGS", "COLUMNS", "PARTITIONS", "FUNCTIONS", 
                             "MATERIALIZED", "VIEW", "OPTIMIZE", "REFRESH", 
                             "RESTORE", "DROP", "ALIAS", "UNION", "EXCEPT", 
                             "INTERSECT", "SYSTEM", "BERNOULLI", "TABLESAMPLE", 
                             "STRATIFY", "INSERT", "INTO", "VALUES", "DELETE", 
                             "UPDATE", "KEY", "DUPLICATE", "CONFLICT", "DO", 
                             "NOTHING", "SET", "RESET", "DEFAULT", "COPY", 
                             "CLUSTERED", "SHARDS", "PRIMARY_KEY", "OFF", 
                             "FULLTEXT", "FILTER", "PLAIN", "INDEX", "STORAGE", 
                             "RETURNING", "DYNAMIC", "STRICT", "IGNORED", 
                             "ARRAY", "ANALYZER", "EXTENDS", "TOKENIZER", 
                             "TOKEN_FILTERS", "CHAR_FILTERS", "PARTITIONED", 
                             "PREPARE", "TRANSIENT", "PERSISTENT", "MATCH", 
                             "GENERATED", "ALWAYS", "USER", "ROLE", "GRANT", 
                             "DENY", "REVOKE", "PRIVILEGES", "SCHEMA", "RETURN", 
                             "SUMMARY", "METADATA", "PUBLICATION", "SUBSCRIPTION", 
                             "CONNECTION", "ENABLE", "DISABLE", "DECLARE", 
                             "CURSOR", "ASENSITIVE", "INSENSITIVE", "BINARY", 
                             "NO", "SCROLL", "HOLD", "ABSOLUTE", "FORWARD", 
                             "BACKWARD", "RELATIVE", "PRIOR", "SERVER", 
                             "FOREIGN", "DATA", "WRAPPER", "OPTIONS", "MAPPING", 
                             "CASCADE", "RESTRICT", "EQ", "NEQ", "LT", "LTE", 
                             "GT", "GTE", "LLT", "REGEX_MATCH", "REGEX_NO_MATCH", 
                             "REGEX_MATCH_CI", "REGEX_NO_MATCH_CI", "PLUS", 
                             "MINUS", "ASTERISK", "CARET", "SLASH", "PERCENT", 
                             "CONCAT", "CAST_OPERATOR", "SEMICOLON", "COLON", 
                             "COMMA", "DOT", "OPEN_ROUND_BRACKET", "CLOSE_ROUND_BRACKET", 
                             "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", 
                             "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", 
                             "EMPTY_SQUARE_BRACKET", "QUESTION", "DOLLAR", 
                             "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", 
                             "STRING", "ESCAPED_STRING", "BIT_STRING", "INTEGER_VALUE", 
                             "DECIMAL_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", 
                             "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
                             "BEGIN_DOLLAR_QUOTED_STRING", "COMMENT", "WS", 
                             "UNRECOGNIZED", "DOLLAR_QUOTED_STRING_BODY", 
                             "END_DOLLAR_QUOTED_STRING" ];
    static ruleNames = [ "statements", "singleStatement", "singleExpression", 
                         "statement", "dropStmt", "alterStmt", "queryOptParens", 
                         "query", "queryNoWith", "limitClause", "offsetClause", 
                         "queryTerm", "setQuant", "sortItem", "querySpec", 
                         "selectItem", "where", "returning", "filter", "relation", 
                         "joinType", "joinCriteria", "aliasedRelation", 
                         "relationPrimary", "tableWithPartition", "table", 
                         "aliasedColumns", "with", "namedQuery", "expr", 
                         "booleanExpression", "predicated", "predicate", 
                         "valueExpression", "primaryExpression", "explicitFunction", 
                         "subqueryExpression", "parameterOrLiteral", "parameterOrSimpleLiteral", 
                         "parameterOrInteger", "parameterOrIdent", "parameterOrString", 
                         "parameterExpr", "nullLiteral", "escapedCharsStringLiteral", 
                         "dollarQuotedStringLiteral", "stringLiteral", "bitString", 
                         "subscriptSafe", "cmpOp", "setCmpQuantifier", "whenClause", 
                         "namedWindow", "over", "windowDefinition", "windowFrame", 
                         "frameBound", "qnames", "qname", "spaceSeparatedIdents", 
                         "identWithOrWithoutValue", "idents", "ident", "unquotedIdent", 
                         "quotedIdent", "stringLiteralOrIdentifier", "stringLiteralOrIdentifierOrQname", 
                         "numericLiteral", "intervalLiteral", "intervalField", 
                         "booleanLiteral", "decimalLiteral", "integerLiteral", 
                         "objectKeyValue", "insertSource", "onConflict", 
                         "conflictTarget", "values", "columns", "assignment", 
                         "createStmt", "mappedUser", "kvOptions", "kvOption", 
                         "functionArgument", "alterTableDefinition", "alterSubscriptionMode", 
                         "partitionedByOrClusteredInto", "partitionedBy", 
                         "clusteredBy", "blobClusteredInto", "tableElement", 
                         "columnDefinition", "addColumnDefinition", "dropColumnDefinition", 
                         "rerouteOption", "dataType", "baseDataType", "definedDataType", 
                         "objectTypeDefinition", "columnConstraint", "primaryKeyContraint", 
                         "checkConstraint", "withProperties", "genericProperties", 
                         "genericProperty", "explainOptions", "explainOption", 
                         "matchPredicateIdents", "matchPredicateIdent", 
                         "analyzerElement", "tokenizer", "tokenFilters", 
                         "charFilters", "namedProperties", "tableWithPartitions", 
                         "setGlobalAssignment", "setExpr", "on", "securable", 
                         "transactionMode", "isolationLevel", "direction", 
                         "declareCursorParams", "nonReserved" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SqlBaseParser.ruleNames;
        this.literalNames = SqlBaseParser.literalNames;
        this.symbolicNames = SqlBaseParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 11:
    	    		return this.queryTerm_sempred(localctx, predIndex);
    	case 19:
    	    		return this.relation_sempred(localctx, predIndex);
    	case 30:
    	    		return this.booleanExpression_sempred(localctx, predIndex);
    	case 33:
    	    		return this.valueExpression_sempred(localctx, predIndex);
    	case 34:
    	    		return this.primaryExpression_sempred(localctx, predIndex);
    	case 48:
    	    		return this.subscriptSafe_sempred(localctx, predIndex);
    	case 96:
    	    		return this.dataType_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    queryTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    relation_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    booleanExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 3);
    		case 3:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    valueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 6);
    		case 5:
    			return this.precpred(this._ctx, 5);
    		case 6:
    			return this.precpred(this._ctx, 4);
    		case 7:
    			return this.precpred(this._ctx, 3);
    		case 8:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    primaryExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 9:
    			return this.precpred(this._ctx, 2);
    		case 10:
    			return this.precpred(this._ctx, 6);
    		case 11:
    			return this.precpred(this._ctx, 5);
    		case 12:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    subscriptSafe_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 13:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dataType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 14:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	statements() {
	    let localctx = new StatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SqlBaseParser.RULE_statements);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 250;
	        this.statement();
	        this.state = 255;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 251;
	                this.match(SqlBaseParser.SEMICOLON);
	                this.state = 252;
	                this.statement(); 
	            }
	            this.state = 257;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
	        }

	        this.state = 259;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===301) {
	            this.state = 258;
	            this.match(SqlBaseParser.SEMICOLON);
	        }

	        this.state = 261;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleStatement() {
	    let localctx = new SingleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SqlBaseParser.RULE_singleStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 263;
	        this.statement();
	        this.state = 265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===301) {
	            this.state = 264;
	            this.match(SqlBaseParser.SEMICOLON);
	        }

	        this.state = 267;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleExpression() {
	    let localctx = new SingleExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SqlBaseParser.RULE_singleExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 269;
	        this.expr();
	        this.state = 270;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SqlBaseParser.RULE_statement);
	    var _la = 0;
	    try {
	        this.state = 645;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DefaultContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 272;
	            this.query();
	            break;

	        case 2:
	            localctx = new BeginContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 273;
	            this.match(SqlBaseParser.BEGIN);
	            this.state = 275;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===146 || _la===147) {
	                this.state = 274;
	                _la = this._input.LA(1);
	                if(!(_la===146 || _la===147)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 287;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23 || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 321) !== 0)) {
	                this.state = 277;
	                this.transactionMode();
	                this.state = 284;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===23 || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 321) !== 0) || _la===303) {
	                    this.state = 279;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===303) {
	                        this.state = 278;
	                        this.match(SqlBaseParser.COMMA);
	                    }

	                    this.state = 281;
	                    this.transactionMode();
	                    this.state = 286;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;

	        case 3:
	            localctx = new StartTransactionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 289;
	            this.match(SqlBaseParser.START);
	            this.state = 290;
	            this.match(SqlBaseParser.TRANSACTION);
	            this.state = 301;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23 || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 321) !== 0)) {
	                this.state = 291;
	                this.transactionMode();
	                this.state = 298;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===23 || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 321) !== 0) || _la===303) {
	                    this.state = 293;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===303) {
	                        this.state = 292;
	                        this.match(SqlBaseParser.COMMA);
	                    }

	                    this.state = 295;
	                    this.transactionMode();
	                    this.state = 300;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;

	        case 4:
	            localctx = new CommitContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 303;
	            this.match(SqlBaseParser.COMMIT);
	            this.state = 305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===146 || _la===147) {
	                this.state = 304;
	                _la = this._input.LA(1);
	                if(!(_la===146 || _la===147)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 5:
	            localctx = new CommitContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 307;
	            this.match(SqlBaseParser.END);
	            this.state = 309;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===146 || _la===147) {
	                this.state = 308;
	                _la = this._input.LA(1);
	                if(!(_la===146 || _la===147)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 6:
	            localctx = new ExplainContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 311;
	            this.match(SqlBaseParser.EXPLAIN);
	            this.state = 320;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 312;
	                this.match(SqlBaseParser.ANALYZE);
	                break;

	            case 2:
	                this.state = 313;
	                this.match(SqlBaseParser.VERBOSE);
	                break;

	            case 3:
	                this.state = 317;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===305) {
	                    this.state = 314;
	                    this.explainOptions();
	                    this.state = 319;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            }
	            this.state = 322;
	            this.statement();
	            break;

	        case 7:
	            localctx = new OptimizeContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 323;
	            this.match(SqlBaseParser.OPTIMIZE);
	            this.state = 324;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 325;
	            this.tableWithPartitions();
	            this.state = 327;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 326;
	                this.withProperties();
	            }

	            break;

	        case 8:
	            localctx = new RefreshTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 329;
	            this.match(SqlBaseParser.REFRESH);
	            this.state = 330;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 331;
	            this.tableWithPartitions();
	            break;

	        case 9:
	            localctx = new UpdateContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 332;
	            this.match(SqlBaseParser.UPDATE);
	            this.state = 333;
	            this.aliasedRelation();
	            this.state = 334;
	            this.match(SqlBaseParser.SET);
	            this.state = 335;
	            this.assignment();
	            this.state = 340;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 336;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 337;
	                this.assignment();
	                this.state = 342;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 344;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 343;
	                this.where();
	            }

	            this.state = 347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===229) {
	                this.state = 346;
	                this.returning();
	            }

	            break;

	        case 10:
	            localctx = new DeleteContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 349;
	            this.match(SqlBaseParser.DELETE);
	            this.state = 350;
	            this.match(SqlBaseParser.FROM);
	            this.state = 351;
	            this.aliasedRelation();
	            this.state = 353;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 352;
	                this.where();
	            }

	            break;

	        case 11:
	            localctx = new ShowTransactionContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 355;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 360;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 147:
	                this.state = 356;
	                this.match(SqlBaseParser.TRANSACTION);
	                this.state = 357;
	                this.match(SqlBaseParser.ISOLATION);
	                this.state = 358;
	                this.match(SqlBaseParser.LEVEL);
	                break;
	            case 148:
	                this.state = 359;
	                this.match(SqlBaseParser.TRANSACTION_ISOLATION);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 12:
	            localctx = new ShowCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 362;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 363;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 364;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 365;
	            this.table();
	            break;

	        case 13:
	            localctx = new ShowTablesContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 366;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 367;
	            this.match(SqlBaseParser.TABLES);
	            this.state = 370;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===22) {
	                this.state = 368;
	                _la = this._input.LA(1);
	                if(!(_la===3 || _la===22)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 369;
	                this.qname();
	            }

	            this.state = 375;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 26:
	            	this.state = 372;
	            	this.match(SqlBaseParser.LIKE);
	            	this.state = 373;
	            	localctx.pattern = this.stringLiteral();
	            	break;
	            case 13:
	            	this.state = 374;
	            	this.where();
	            	break;
	            case -1:
	            case 301:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 14:
	            localctx = new ShowSchemasContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 377;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 378;
	            this.match(SqlBaseParser.SCHEMAS);
	            this.state = 382;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 26:
	            	this.state = 379;
	            	this.match(SqlBaseParser.LIKE);
	            	this.state = 380;
	            	localctx.pattern = this.stringLiteral();
	            	break;
	            case 13:
	            	this.state = 381;
	            	this.where();
	            	break;
	            case -1:
	            case 301:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 15:
	            localctx = new ShowColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 384;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 385;
	            this.match(SqlBaseParser.COLUMNS);
	            this.state = 386;
	            _la = this._input.LA(1);
	            if(!(_la===3 || _la===22)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 387;
	            localctx.tableName = this.qname();
	            this.state = 390;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===22) {
	                this.state = 388;
	                _la = this._input.LA(1);
	                if(!(_la===3 || _la===22)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 389;
	                localctx.schema = this.qname();
	            }

	            this.state = 395;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 26:
	            	this.state = 392;
	            	this.match(SqlBaseParser.LIKE);
	            	this.state = 393;
	            	localctx.pattern = this.stringLiteral();
	            	break;
	            case 13:
	            	this.state = 394;
	            	this.where();
	            	break;
	            case -1:
	            case 301:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 16:
	            localctx = new ShowSessionParameterContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 397;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 400;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 4:
	            case 6:
	            case 10:
	            case 27:
	            case 32:
	            case 33:
	            case 35:
	            case 38:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 70:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 93:
	            case 96:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 107:
	            case 108:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 135:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 161:
	            case 163:
	            case 165:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 174:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 198:
	            case 202:
	            case 203:
	            case 204:
	            case 208:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 219:
	            case 220:
	            case 221:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 244:
	            case 245:
	            case 247:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	                this.state = 398;
	                this.qname();
	                break;
	            case 7:
	                this.state = 399;
	                this.match(SqlBaseParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 17:
	            localctx = new AlterContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 402;
	            this.alterStmt();
	            break;

	        case 18:
	            localctx = new ResetGlobalContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 403;
	            this.match(SqlBaseParser.RESET);
	            this.state = 404;
	            this.match(SqlBaseParser.GLOBAL);
	            this.state = 405;
	            this.primaryExpression(0);
	            this.state = 410;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 406;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 407;
	                this.primaryExpression(0);
	                this.state = 412;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 19:
	            localctx = new SetTransactionContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 413;
	            this.match(SqlBaseParser.SET);
	            this.state = 417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===141) {
	                this.state = 414;
	                this.match(SqlBaseParser.SESSION);
	                this.state = 415;
	                this.match(SqlBaseParser.CHARACTERISTICS);
	                this.state = 416;
	                this.match(SqlBaseParser.AS);
	            }

	            this.state = 419;
	            this.match(SqlBaseParser.TRANSACTION);
	            this.state = 420;
	            this.transactionMode();
	            this.state = 425;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 421;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 422;
	                this.transactionMode();
	                this.state = 427;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 20:
	            localctx = new SetSessionAuthorizationContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 428;
	            this.match(SqlBaseParser.SET);
	            this.state = 430;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	            if(la_===1) {
	                this.state = 429;
	                _la = this._input.LA(1);
	                if(!(_la===141 || _la===142)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 432;
	            this.match(SqlBaseParser.SESSION);
	            this.state = 433;
	            this.match(SqlBaseParser.AUTHORIZATION);
	            this.state = 436;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 218:
	                this.state = 434;
	                this.match(SqlBaseParser.DEFAULT);
	                break;
	            case 1:
	            case 4:
	            case 6:
	            case 10:
	            case 27:
	            case 32:
	            case 33:
	            case 35:
	            case 38:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 70:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 93:
	            case 96:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 107:
	            case 108:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 135:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 161:
	            case 163:
	            case 165:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 174:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 198:
	            case 202:
	            case 203:
	            case 204:
	            case 208:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 219:
	            case 220:
	            case 221:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 244:
	            case 245:
	            case 247:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 317:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	                this.state = 435;
	                localctx.username = this.stringLiteralOrIdentifier();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 21:
	            localctx = new ResetSessionAuthorizationContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 438;
	            this.match(SqlBaseParser.RESET);
	            this.state = 439;
	            this.match(SqlBaseParser.SESSION);
	            this.state = 440;
	            this.match(SqlBaseParser.AUTHORIZATION);
	            break;

	        case 22:
	            localctx = new SetContext(this, localctx);
	            this.enterOuterAlt(localctx, 22);
	            this.state = 441;
	            this.match(SqlBaseParser.SET);
	            this.state = 443;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	            if(la_===1) {
	                this.state = 442;
	                _la = this._input.LA(1);
	                if(!(_la===141 || _la===142)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 445;
	            this.qname();
	            this.state = 446;
	            _la = this._input.LA(1);
	            if(!(_la===4 || _la===282)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 456;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 218:
	                this.state = 447;
	                this.match(SqlBaseParser.DEFAULT);
	                break;
	            case 1:
	            case 4:
	            case 6:
	            case 10:
	            case 27:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 35:
	            case 38:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 70:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 93:
	            case 96:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 107:
	            case 108:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 135:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 161:
	            case 163:
	            case 165:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 174:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 198:
	            case 202:
	            case 203:
	            case 204:
	            case 208:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 219:
	            case 220:
	            case 221:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 244:
	            case 245:
	            case 247:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 317:
	            case 320:
	            case 321:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	                this.state = 448;
	                this.setExpr();
	                this.state = 453;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===303) {
	                    this.state = 449;
	                    this.match(SqlBaseParser.COMMA);
	                    this.state = 450;
	                    this.setExpr();
	                    this.state = 455;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 23:
	            localctx = new SetGlobalContext(this, localctx);
	            this.enterOuterAlt(localctx, 23);
	            this.state = 458;
	            this.match(SqlBaseParser.SET);
	            this.state = 459;
	            this.match(SqlBaseParser.GLOBAL);
	            this.state = 461;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===241 || _la===242) {
	                this.state = 460;
	                _la = this._input.LA(1);
	                if(!(_la===241 || _la===242)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 463;
	            this.setGlobalAssignment();
	            this.state = 468;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 464;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 465;
	                this.setGlobalAssignment();
	                this.state = 470;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 24:
	            localctx = new SetTimeZoneContext(this, localctx);
	            this.enterOuterAlt(localctx, 24);
	            this.state = 471;
	            this.match(SqlBaseParser.SET);
	            this.state = 472;
	            this.match(SqlBaseParser.TIME);
	            this.state = 473;
	            this.match(SqlBaseParser.ZONE);
	            this.state = 477;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 142:
	                this.state = 474;
	                this.match(SqlBaseParser.LOCAL);
	                break;
	            case 218:
	                this.state = 475;
	                this.match(SqlBaseParser.DEFAULT);
	                break;
	            case 317:
	            case 326:
	                this.state = 476;
	                this.stringLiteral();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 25:
	            localctx = new KillContext(this, localctx);
	            this.enterOuterAlt(localctx, 25);
	            this.state = 479;
	            this.match(SqlBaseParser.KILL);
	            this.state = 482;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 7:
	                this.state = 480;
	                this.match(SqlBaseParser.ALL);
	                break;
	            case 312:
	            case 313:
	            case 317:
	            case 326:
	                this.state = 481;
	                localctx.jobId = this.parameterOrString();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 26:
	            localctx = new InsertContext(this, localctx);
	            this.enterOuterAlt(localctx, 26);
	            this.state = 484;
	            this.match(SqlBaseParser.INSERT);
	            this.state = 485;
	            this.match(SqlBaseParser.INTO);
	            this.state = 486;
	            this.table();
	            this.state = 498;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	            if(la_===1) {
	                this.state = 487;
	                this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	                this.state = 488;
	                this.ident();
	                this.state = 493;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===303) {
	                    this.state = 489;
	                    this.match(SqlBaseParser.COMMA);
	                    this.state = 490;
	                    this.ident();
	                    this.state = 495;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 496;
	                this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);

	            }
	            this.state = 500;
	            this.insertSource();
	            this.state = 502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 501;
	                this.onConflict();
	            }

	            this.state = 505;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===229) {
	                this.state = 504;
	                this.returning();
	            }

	            break;

	        case 27:
	            localctx = new RestoreContext(this, localctx);
	            this.enterOuterAlt(localctx, 27);
	            this.state = 507;
	            this.match(SqlBaseParser.RESTORE);
	            this.state = 508;
	            this.match(SqlBaseParser.SNAPSHOT);
	            this.state = 509;
	            this.qname();
	            this.state = 515;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 510;
	                this.match(SqlBaseParser.ALL);
	                break;

	            case 2:
	                this.state = 511;
	                this.match(SqlBaseParser.METADATA);
	                break;

	            case 3:
	                this.state = 512;
	                this.match(SqlBaseParser.TABLE);
	                this.state = 513;
	                this.tableWithPartitions();
	                break;

	            case 4:
	                this.state = 514;
	                localctx.metatypes = this.idents();
	                break;

	            }
	            this.state = 518;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 517;
	                this.withProperties();
	            }

	            break;

	        case 28:
	            localctx = new CopyFromContext(this, localctx);
	            this.enterOuterAlt(localctx, 28);
	            this.state = 520;
	            this.match(SqlBaseParser.COPY);
	            this.state = 521;
	            this.tableWithPartition();
	            this.state = 533;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===305) {
	                this.state = 522;
	                this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	                this.state = 523;
	                this.ident();
	                this.state = 528;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===303) {
	                    this.state = 524;
	                    this.match(SqlBaseParser.COMMA);
	                    this.state = 525;
	                    this.ident();
	                    this.state = 530;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 531;
	                this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            }

	            this.state = 535;
	            this.match(SqlBaseParser.FROM);
	            this.state = 536;
	            localctx.path = this.expr();
	            this.state = 538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 537;
	                this.withProperties();
	            }

	            this.state = 542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===253) {
	                this.state = 540;
	                this.match(SqlBaseParser.RETURN);
	                this.state = 541;
	                this.match(SqlBaseParser.SUMMARY);
	            }

	            break;

	        case 29:
	            localctx = new CopyToContext(this, localctx);
	            this.enterOuterAlt(localctx, 29);
	            this.state = 544;
	            this.match(SqlBaseParser.COPY);
	            this.state = 545;
	            this.tableWithPartition();
	            this.state = 547;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===305) {
	                this.state = 546;
	                this.columns();
	            }

	            this.state = 550;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 549;
	                this.where();
	            }

	            this.state = 552;
	            this.match(SqlBaseParser.TO);
	            this.state = 554;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===11) {
	                this.state = 553;
	                this.match(SqlBaseParser.DIRECTORY);
	            }

	            this.state = 556;
	            localctx.path = this.expr();
	            this.state = 558;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 557;
	                this.withProperties();
	            }

	            break;

	        case 30:
	            localctx = new DropContext(this, localctx);
	            this.enterOuterAlt(localctx, 30);
	            this.state = 560;
	            this.dropStmt();
	            break;

	        case 31:
	            localctx = new GrantPrivilegeContext(this, localctx);
	            this.enterOuterAlt(localctx, 31);
	            this.state = 561;
	            this.match(SqlBaseParser.GRANT);
	            this.state = 567;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 4:
	            case 6:
	            case 10:
	            case 27:
	            case 32:
	            case 33:
	            case 35:
	            case 38:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 70:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 93:
	            case 96:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 107:
	            case 108:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 135:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 161:
	            case 163:
	            case 165:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 174:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 198:
	            case 202:
	            case 203:
	            case 204:
	            case 208:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 219:
	            case 220:
	            case 221:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 244:
	            case 245:
	            case 247:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	                this.state = 562;
	                localctx.priviliges = this.idents();
	                break;
	            case 7:
	                this.state = 563;
	                this.match(SqlBaseParser.ALL);
	                this.state = 565;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===251) {
	                    this.state = 564;
	                    this.match(SqlBaseParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 569;
	                this.match(SqlBaseParser.ON);
	                this.state = 570;
	                this.securable();
	                this.state = 571;
	                this.qnames();
	            }

	            this.state = 575;
	            this.match(SqlBaseParser.TO);
	            this.state = 576;
	            localctx.users = this.idents();
	            break;

	        case 32:
	            localctx = new DenyPrivilegeContext(this, localctx);
	            this.enterOuterAlt(localctx, 32);
	            this.state = 577;
	            this.match(SqlBaseParser.DENY);
	            this.state = 583;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 4:
	            case 6:
	            case 10:
	            case 27:
	            case 32:
	            case 33:
	            case 35:
	            case 38:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 70:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 93:
	            case 96:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 107:
	            case 108:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 135:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 161:
	            case 163:
	            case 165:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 174:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 198:
	            case 202:
	            case 203:
	            case 204:
	            case 208:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 219:
	            case 220:
	            case 221:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 244:
	            case 245:
	            case 247:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	                this.state = 578;
	                localctx.priviliges = this.idents();
	                break;
	            case 7:
	                this.state = 579;
	                this.match(SqlBaseParser.ALL);
	                this.state = 581;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===251) {
	                    this.state = 580;
	                    this.match(SqlBaseParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 585;
	                this.match(SqlBaseParser.ON);
	                this.state = 586;
	                this.securable();
	                this.state = 587;
	                this.qnames();
	            }

	            this.state = 591;
	            this.match(SqlBaseParser.TO);
	            this.state = 592;
	            localctx.users = this.idents();
	            break;

	        case 33:
	            localctx = new RevokePrivilegeContext(this, localctx);
	            this.enterOuterAlt(localctx, 33);
	            this.state = 593;
	            this.match(SqlBaseParser.REVOKE);
	            this.state = 599;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 4:
	            case 6:
	            case 10:
	            case 27:
	            case 32:
	            case 33:
	            case 35:
	            case 38:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 70:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 93:
	            case 96:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 107:
	            case 108:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 135:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 161:
	            case 163:
	            case 165:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 174:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 198:
	            case 202:
	            case 203:
	            case 204:
	            case 208:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 219:
	            case 220:
	            case 221:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 244:
	            case 245:
	            case 247:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	                this.state = 594;
	                localctx.privileges = this.idents();
	                break;
	            case 7:
	                this.state = 595;
	                this.match(SqlBaseParser.ALL);
	                this.state = 597;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===251) {
	                    this.state = 596;
	                    this.match(SqlBaseParser.PRIVILEGES);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 605;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 601;
	                this.match(SqlBaseParser.ON);
	                this.state = 602;
	                this.securable();
	                this.state = 603;
	                this.qnames();
	            }

	            this.state = 607;
	            this.match(SqlBaseParser.FROM);
	            this.state = 608;
	            localctx.users = this.idents();
	            break;

	        case 34:
	            localctx = new CreateContext(this, localctx);
	            this.enterOuterAlt(localctx, 34);
	            this.state = 609;
	            this.createStmt();
	            break;

	        case 35:
	            localctx = new DeallocateContext(this, localctx);
	            this.enterOuterAlt(localctx, 35);
	            this.state = 610;
	            this.match(SqlBaseParser.DEALLOCATE);
	            this.state = 612;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	            if(la_===1) {
	                this.state = 611;
	                this.match(SqlBaseParser.PREPARE);

	            }
	            this.state = 616;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 7:
	                this.state = 614;
	                this.match(SqlBaseParser.ALL);
	                break;
	            case 1:
	            case 4:
	            case 6:
	            case 10:
	            case 27:
	            case 32:
	            case 33:
	            case 35:
	            case 38:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 70:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 93:
	            case 96:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 107:
	            case 108:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 135:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 161:
	            case 163:
	            case 165:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 174:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 198:
	            case 202:
	            case 203:
	            case 204:
	            case 208:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 219:
	            case 220:
	            case 221:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 244:
	            case 245:
	            case 247:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 317:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	                this.state = 615;
	                localctx.prepStmt = this.stringLiteralOrIdentifierOrQname();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 36:
	            localctx = new AnalyzeContext(this, localctx);
	            this.enterOuterAlt(localctx, 36);
	            this.state = 618;
	            this.match(SqlBaseParser.ANALYZE);
	            break;

	        case 37:
	            localctx = new DiscardContext(this, localctx);
	            this.enterOuterAlt(localctx, 37);
	            this.state = 619;
	            this.match(SqlBaseParser.DISCARD);
	            this.state = 620;
	            _la = this._input.LA(1);
	            if(!(_la===7 || ((((_la - 169)) & ~0x1f) === 0 && ((1 << (_la - 169)) & 15) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 38:
	            localctx = new DeclareContext(this, localctx);
	            this.enterOuterAlt(localctx, 38);
	            this.state = 621;
	            this.match(SqlBaseParser.DECLARE);
	            this.state = 622;
	            this.ident();
	            this.state = 623;
	            this.declareCursorParams();
	            this.state = 624;
	            this.match(SqlBaseParser.CURSOR);
	            this.state = 627;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92 || _la===93) {
	                this.state = 625;
	                _la = this._input.LA(1);
	                if(!(_la===92 || _la===93)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 626;
	                this.match(SqlBaseParser.HOLD);
	            }

	            this.state = 629;
	            this.match(SqlBaseParser.FOR);
	            this.state = 630;
	            this.queryNoWith();
	            break;

	        case 39:
	            localctx = new FetchContext(this, localctx);
	            this.enterOuterAlt(localctx, 39);
	            this.state = 632;
	            this.match(SqlBaseParser.FETCH);
	            this.state = 634;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	            if(la_===1) {
	                this.state = 633;
	                this.direction();

	            }
	            this.state = 637;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===22) {
	                this.state = 636;
	                _la = this._input.LA(1);
	                if(!(_la===3 || _la===22)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 639;
	            this.ident();
	            break;

	        case 40:
	            localctx = new CloseContext(this, localctx);
	            this.enterOuterAlt(localctx, 40);
	            this.state = 640;
	            this.match(SqlBaseParser.CLOSE);
	            this.state = 643;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 4:
	            case 6:
	            case 10:
	            case 27:
	            case 32:
	            case 33:
	            case 35:
	            case 38:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 70:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 93:
	            case 96:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 107:
	            case 108:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 135:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 161:
	            case 163:
	            case 165:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 174:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 198:
	            case 202:
	            case 203:
	            case 204:
	            case 208:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 219:
	            case 220:
	            case 221:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 244:
	            case 245:
	            case 247:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	                this.state = 641;
	                this.ident();
	                break;
	            case 7:
	                this.state = 642;
	                this.match(SqlBaseParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropStmt() {
	    let localctx = new DropStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SqlBaseParser.RULE_dropStmt);
	    var _la = 0;
	    try {
	        this.state = 755;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DropBlobTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 647;
	            this.match(SqlBaseParser.DROP);
	            this.state = 648;
	            this.match(SqlBaseParser.BLOB);
	            this.state = 649;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 652;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 650;
	                this.match(SqlBaseParser.IF);
	                this.state = 651;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 654;
	            this.table();
	            break;

	        case 2:
	            localctx = new DropTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 655;
	            this.match(SqlBaseParser.DROP);
	            this.state = 656;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 659;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 657;
	                this.match(SqlBaseParser.IF);
	                this.state = 658;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 661;
	            this.table();
	            break;

	        case 3:
	            localctx = new DropAliasContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 662;
	            this.match(SqlBaseParser.DROP);
	            this.state = 663;
	            this.match(SqlBaseParser.ALIAS);
	            this.state = 664;
	            this.qname();
	            break;

	        case 4:
	            localctx = new DropRepositoryContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 665;
	            this.match(SqlBaseParser.DROP);
	            this.state = 666;
	            this.match(SqlBaseParser.REPOSITORY);
	            this.state = 667;
	            this.ident();
	            break;

	        case 5:
	            localctx = new DropSnapshotContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 668;
	            this.match(SqlBaseParser.DROP);
	            this.state = 669;
	            this.match(SqlBaseParser.SNAPSHOT);
	            this.state = 670;
	            this.qname();
	            break;

	        case 6:
	            localctx = new DropFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 671;
	            this.match(SqlBaseParser.DROP);
	            this.state = 672;
	            this.match(SqlBaseParser.FUNCTION);
	            this.state = 675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 673;
	                this.match(SqlBaseParser.IF);
	                this.state = 674;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 677;
	            localctx.name = this.qname();
	            this.state = 678;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 687;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 134218834) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 268401739) !== 0) || ((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 4106090497) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 4294966895) !== 0) || ((((_la - 134)) & ~0x1f) === 0 && ((1 << (_la - 134)) & 2852126719) !== 0) || ((((_la - 167)) & ~0x1f) === 0 && ((1 << (_la - 167)) & 3221028543) !== 0) || ((((_la - 202)) & ~0x1f) === 0 && ((1 << (_la - 202)) & 4260249159) !== 0) || ((((_la - 234)) & ~0x1f) === 0 && ((1 << (_la - 234)) & 4294847615) !== 0) || ((((_la - 266)) & ~0x1f) === 0 && ((1 << (_la - 266)) & 65535) !== 0) || ((((_la - 322)) & ~0x1f) === 0 && ((1 << (_la - 322)) & 15) !== 0)) {
	                this.state = 679;
	                this.functionArgument();
	                this.state = 684;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===303) {
	                    this.state = 680;
	                    this.match(SqlBaseParser.COMMA);
	                    this.state = 681;
	                    this.functionArgument();
	                    this.state = 686;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 689;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 7:
	            localctx = new DropRoleContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 691;
	            this.match(SqlBaseParser.DROP);
	            this.state = 692;
	            _la = this._input.LA(1);
	            if(!(_la===246 || _la===247)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 695;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 693;
	                this.match(SqlBaseParser.IF);
	                this.state = 694;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 697;
	            localctx.name = this.ident();
	            break;

	        case 8:
	            localctx = new DropViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 698;
	            this.match(SqlBaseParser.DROP);
	            this.state = 699;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 702;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 700;
	                this.match(SqlBaseParser.IF);
	                this.state = 701;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 704;
	            localctx.names = this.qnames();
	            break;

	        case 9:
	            localctx = new DropAnalyzerContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 705;
	            this.match(SqlBaseParser.DROP);
	            this.state = 706;
	            this.match(SqlBaseParser.ANALYZER);
	            this.state = 707;
	            localctx.name = this.ident();
	            break;

	        case 10:
	            localctx = new DropPublicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 708;
	            this.match(SqlBaseParser.DROP);
	            this.state = 709;
	            this.match(SqlBaseParser.PUBLICATION);
	            this.state = 712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 710;
	                this.match(SqlBaseParser.IF);
	                this.state = 711;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 714;
	            localctx.name = this.ident();
	            break;

	        case 11:
	            localctx = new DropSubscriptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 715;
	            this.match(SqlBaseParser.DROP);
	            this.state = 716;
	            this.match(SqlBaseParser.SUBSCRIPTION);
	            this.state = 719;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 717;
	                this.match(SqlBaseParser.IF);
	                this.state = 718;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 721;
	            localctx.name = this.ident();
	            break;

	        case 12:
	            localctx = new DropServerContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 722;
	            this.match(SqlBaseParser.DROP);
	            this.state = 723;
	            this.match(SqlBaseParser.SERVER);
	            this.state = 726;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 724;
	                this.match(SqlBaseParser.IF);
	                this.state = 725;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 728;
	            localctx.names = this.idents();
	            this.state = 730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===280 || _la===281) {
	                this.state = 729;
	                _la = this._input.LA(1);
	                if(!(_la===280 || _la===281)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 13:
	            localctx = new DropForeignTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 732;
	            this.match(SqlBaseParser.DROP);
	            this.state = 733;
	            this.match(SqlBaseParser.FOREIGN);
	            this.state = 734;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 737;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 735;
	                this.match(SqlBaseParser.IF);
	                this.state = 736;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 739;
	            localctx.names = this.qnames();
	            this.state = 741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===280 || _la===281) {
	                this.state = 740;
	                _la = this._input.LA(1);
	                if(!(_la===280 || _la===281)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 14:
	            localctx = new DropUserMappingContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 743;
	            this.match(SqlBaseParser.DROP);
	            this.state = 744;
	            this.match(SqlBaseParser.USER);
	            this.state = 745;
	            this.match(SqlBaseParser.MAPPING);
	            this.state = 748;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 746;
	                this.match(SqlBaseParser.IF);
	                this.state = 747;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 750;
	            this.match(SqlBaseParser.FOR);
	            this.state = 751;
	            this.mappedUser();
	            this.state = 752;
	            this.match(SqlBaseParser.SERVER);
	            this.state = 753;
	            localctx.server = this.ident();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStmt() {
	    let localctx = new AlterStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SqlBaseParser.RULE_alterStmt);
	    var _la = 0;
	    try {
	        this.state = 932;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AddColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 757;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 758;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 759;
	            this.alterTableDefinition();
	            this.state = 760;
	            this.addColumnDefinition();
	            this.state = 765;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 761;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 762;
	                this.addColumnDefinition();
	                this.state = 767;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new DropColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 768;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 769;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 770;
	            this.alterTableDefinition();
	            this.state = 771;
	            this.dropColumnDefinition();
	            this.state = 776;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 772;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 773;
	                this.dropColumnDefinition();
	                this.state = 778;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 3:
	            localctx = new DropCheckConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 779;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 780;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 781;
	            this.alterTableDefinition();
	            this.state = 782;
	            this.match(SqlBaseParser.DROP);
	            this.state = 783;
	            this.match(SqlBaseParser.CONSTRAINT);
	            this.state = 784;
	            this.ident();
	            break;

	        case 4:
	            localctx = new AlterTablePropertiesContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 786;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 787;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 788;
	            this.alterTableDefinition();
	            this.state = 808;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 216:
	                this.state = 789;
	                this.match(SqlBaseParser.SET);
	                this.state = 790;
	                this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	                this.state = 791;
	                this.genericProperties();
	                this.state = 792;
	                this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	                break;
	            case 217:
	                this.state = 794;
	                this.match(SqlBaseParser.RESET);
	                this.state = 806;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===305) {
	                    this.state = 795;
	                    this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	                    this.state = 796;
	                    this.ident();
	                    this.state = 801;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===303) {
	                        this.state = 797;
	                        this.match(SqlBaseParser.COMMA);
	                        this.state = 798;
	                        this.ident();
	                        this.state = 803;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 804;
	                    this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 5:
	            localctx = new AlterBlobTablePropertiesContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 810;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 811;
	            this.match(SqlBaseParser.BLOB);
	            this.state = 812;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 813;
	            this.alterTableDefinition();
	            this.state = 833;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 216:
	                this.state = 814;
	                this.match(SqlBaseParser.SET);
	                this.state = 815;
	                this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	                this.state = 816;
	                this.genericProperties();
	                this.state = 817;
	                this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	                break;
	            case 217:
	                this.state = 819;
	                this.match(SqlBaseParser.RESET);
	                this.state = 831;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===305) {
	                    this.state = 820;
	                    this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	                    this.state = 821;
	                    this.ident();
	                    this.state = 826;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===303) {
	                        this.state = 822;
	                        this.match(SqlBaseParser.COMMA);
	                        this.state = 823;
	                        this.ident();
	                        this.state = 828;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 829;
	                    this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 6:
	            localctx = new AlterTableOpenCloseContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 835;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 837;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===96) {
	                this.state = 836;
	                this.match(SqlBaseParser.BLOB);
	            }

	            this.state = 839;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 840;
	            this.alterTableDefinition();
	            this.state = 841;
	            _la = this._input.LA(1);
	            if(!(_la===111 || _la===112)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 7:
	            localctx = new AlterTableRenameTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 843;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 845;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===96) {
	                this.state = 844;
	                this.match(SqlBaseParser.BLOB);
	            }

	            this.state = 847;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 848;
	            this.alterTableDefinition();
	            this.state = 849;
	            this.match(SqlBaseParser.RENAME);
	            this.state = 850;
	            this.match(SqlBaseParser.TO);
	            this.state = 851;
	            this.qname();
	            break;

	        case 8:
	            localctx = new AlterTableRenameColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 853;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 855;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===96) {
	                this.state = 854;
	                this.match(SqlBaseParser.BLOB);
	            }

	            this.state = 857;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 858;
	            this.alterTableDefinition();
	            this.state = 859;
	            this.match(SqlBaseParser.RENAME);
	            this.state = 861;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===110) {
	                this.state = 860;
	                this.match(SqlBaseParser.COLUMN);
	            }

	            this.state = 863;
	            localctx.source = this.subscriptSafe(0);
	            this.state = 864;
	            this.match(SqlBaseParser.TO);
	            this.state = 865;
	            localctx.target = this.subscriptSafe(0);
	            break;

	        case 9:
	            localctx = new AlterTableRerouteContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 867;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 869;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===96) {
	                this.state = 868;
	                this.match(SqlBaseParser.BLOB);
	            }

	            this.state = 871;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 872;
	            this.alterTableDefinition();
	            this.state = 873;
	            this.match(SqlBaseParser.REROUTE);
	            this.state = 874;
	            this.rerouteOption();
	            break;

	        case 10:
	            localctx = new AlterClusterRerouteRetryFailedContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 876;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 877;
	            this.match(SqlBaseParser.CLUSTER);
	            this.state = 878;
	            this.match(SqlBaseParser.REROUTE);
	            this.state = 879;
	            this.match(SqlBaseParser.RETRY);
	            this.state = 880;
	            this.match(SqlBaseParser.FAILED);
	            break;

	        case 11:
	            localctx = new AlterClusterSwapTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 881;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 882;
	            this.match(SqlBaseParser.CLUSTER);
	            this.state = 883;
	            this.match(SqlBaseParser.SWAP);
	            this.state = 884;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 885;
	            localctx.source = this.qname();
	            this.state = 886;
	            this.match(SqlBaseParser.TO);
	            this.state = 887;
	            localctx.target = this.qname();
	            this.state = 889;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 888;
	                this.withProperties();
	            }

	            break;

	        case 12:
	            localctx = new AlterClusterDecommissionNodeContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 891;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 892;
	            this.match(SqlBaseParser.CLUSTER);
	            this.state = 893;
	            this.match(SqlBaseParser.DECOMMISSION);
	            this.state = 894;
	            localctx.node = this.expr();
	            break;

	        case 13:
	            localctx = new AlterClusterGCDanglingArtifactsContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 895;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 896;
	            this.match(SqlBaseParser.CLUSTER);
	            this.state = 897;
	            this.match(SqlBaseParser.GC);
	            this.state = 898;
	            this.match(SqlBaseParser.DANGLING);
	            this.state = 899;
	            this.match(SqlBaseParser.ARTIFACTS);
	            break;

	        case 14:
	            localctx = new AlterRoleContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 900;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 901;
	            _la = this._input.LA(1);
	            if(!(_la===246 || _la===247)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 902;
	            localctx.name = this.ident();
	            this.state = 903;
	            this.match(SqlBaseParser.SET);
	            this.state = 904;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 905;
	            this.genericProperties();
	            this.state = 906;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 15:
	            localctx = new AlterPublicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 908;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 909;
	            this.match(SqlBaseParser.PUBLICATION);
	            this.state = 910;
	            localctx.name = this.ident();

	            this.state = 911;
	            _la = this._input.LA(1);
	            if(!(_la===109 || _la===197 || _la===216)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 912;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 913;
	            this.qname();
	            this.state = 915;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===295) {
	                this.state = 914;
	                this.match(SqlBaseParser.ASTERISK);
	            }

	            this.state = 924;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 917;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 918;
	                this.qname();
	                this.state = 920;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===295) {
	                    this.state = 919;
	                    this.match(SqlBaseParser.ASTERISK);
	                }

	                this.state = 926;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 16:
	            localctx = new AlterSubscriptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 927;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 928;
	            this.match(SqlBaseParser.SUBSCRIPTION);
	            this.state = 929;
	            localctx.name = this.ident();
	            this.state = 930;
	            this.alterSubscriptionMode();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryOptParens() {
	    let localctx = new QueryOptParensContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SqlBaseParser.RULE_queryOptParens);
	    try {
	        this.state = 943;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 934;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 935;
	            this.query();
	            this.state = 936;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 938;
	            this.query();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 939;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 940;
	            this.queryOptParens();
	            this.state = 941;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query() {
	    let localctx = new QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SqlBaseParser.RULE_query);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 946;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===92) {
	            this.state = 945;
	            this.with_();
	        }

	        this.state = 948;
	        this.queryNoWith();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryNoWith() {
	    let localctx = new QueryNoWithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SqlBaseParser.RULE_queryNoWith);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 950;
	        this.queryTerm(0);
	        this.state = 961;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===16) {
	            this.state = 951;
	            this.match(SqlBaseParser.ORDER);
	            this.state = 952;
	            this.match(SqlBaseParser.BY);
	            this.state = 953;
	            this.sortItem();
	            this.state = 958;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 954;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 955;
	                this.sortItem();
	                this.state = 960;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 975;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 964;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18 || _la===35) {
	                this.state = 963;
	                this.limitClause();
	            }

	            this.state = 967;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 966;
	                this.offsetClause();
	            }

	            break;

	        case 2:
	            this.state = 970;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 969;
	                this.offsetClause();
	            }

	            this.state = 973;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18 || _la===35) {
	                this.state = 972;
	                this.limitClause();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SqlBaseParser.RULE_limitClause);
	    var _la = 0;
	    try {
	        this.state = 988;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 977;
	            this.match(SqlBaseParser.LIMIT);
	            this.state = 980;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 29:
	            case 30:
	            case 31:
	            case 70:
	            case 183:
	            case 184:
	            case 233:
	            case 307:
	            case 309:
	            case 312:
	            case 313:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 321:
	            case 326:
	                this.state = 978;
	                localctx.limit = this.parameterOrInteger();
	                break;
	            case 7:
	                this.state = 979;
	                this.match(SqlBaseParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 982;
	            this.match(SqlBaseParser.FETCH);
	            this.state = 983;
	            _la = this._input.LA(1);
	            if(!(_la===36 || _la===38)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	            this.state = 984;
	            localctx.limit = this.parameterOrInteger();
	            this.state = 985;
	            _la = this._input.LA(1);
	            if(!(_la===86 || _la===91)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 986;
	            this.match(SqlBaseParser.ONLY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetClause() {
	    let localctx = new OffsetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SqlBaseParser.RULE_offsetClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 990;
	        this.match(SqlBaseParser.OFFSET);
	        this.state = 991;
	        localctx.offset = this.parameterOrInteger();
	        this.state = 993;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===86 || _la===91) {
	            this.state = 992;
	            _la = this._input.LA(1);
	            if(!(_la===86 || _la===91)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	queryTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new QueryTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 22;
	    this.enterRecursionRule(localctx, 22, SqlBaseParser.RULE_queryTerm, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1001;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new QueryTermDefaultContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 996;
	            this.querySpec();
	            break;

	        case 2:
	            localctx = new SetOperationContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 997;
	            localctx.first = this.querySpec();
	            this.state = 998;
	            localctx.operator = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===200 || _la===201)) {
	                localctx.operator = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 999;
	            localctx.second = this.querySpec();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1011;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,115,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
	                localctx.left = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
	                this.state = 1003;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1004;
	                localctx.operator = this.match(SqlBaseParser.UNION);
	                this.state = 1006;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===7 || _la===12) {
	                    this.state = 1005;
	                    this.setQuant();
	                }

	                this.state = 1008;
	                localctx.right = this.queryTerm(2); 
	            }
	            this.state = 1013;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,115,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	setQuant() {
	    let localctx = new SetQuantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SqlBaseParser.RULE_setQuant);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1014;
	        _la = this._input.LA(1);
	        if(!(_la===7 || _la===12)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortItem() {
	    let localctx = new SortItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SqlBaseParser.RULE_sortItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1016;
	        this.expr();
	        this.state = 1018;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===40 || _la===41) {
	            this.state = 1017;
	            localctx.ordering = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===40 || _la===41)) {
	                localctx.ordering = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1022;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 1020;
	            this.match(SqlBaseParser.NULLS);
	            this.state = 1021;
	            localctx.nullOrdering = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===36 || _la===37)) {
	                localctx.nullOrdering = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpec() {
	    let localctx = new QuerySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SqlBaseParser.RULE_querySpec);
	    var _la = 0;
	    try {
	        this.state = 1086;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            localctx = new DefaultQuerySpecContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1024;
	            this.match(SqlBaseParser.SELECT);
	            this.state = 1026;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7 || _la===12) {
	                this.state = 1025;
	                this.setQuant();
	            }

	            this.state = 1028;
	            this.selectItem();
	            this.state = 1033;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1029;
	                    this.match(SqlBaseParser.COMMA);
	                    this.state = 1030;
	                    this.selectItem(); 
	                }
	                this.state = 1035;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
	            }

	            this.state = 1045;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	            if(la_===1) {
	                this.state = 1036;
	                this.match(SqlBaseParser.FROM);
	                this.state = 1037;
	                this.relation(0);
	                this.state = 1042;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,120,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1038;
	                        this.match(SqlBaseParser.COMMA);
	                        this.state = 1039;
	                        this.relation(0); 
	                    }
	                    this.state = 1044;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,120,this._ctx);
	                }


	            }
	            this.state = 1048;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	            if(la_===1) {
	                this.state = 1047;
	                this.where();

	            }
	            this.state = 1060;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	            if(la_===1) {
	                this.state = 1050;
	                this.match(SqlBaseParser.GROUP);
	                this.state = 1051;
	                this.match(SqlBaseParser.BY);
	                this.state = 1052;
	                this.expr();
	                this.state = 1057;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,123,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1053;
	                        this.match(SqlBaseParser.COMMA);
	                        this.state = 1054;
	                        this.expr(); 
	                    }
	                    this.state = 1059;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,123,this._ctx);
	                }


	            }
	            this.state = 1064;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	            if(la_===1) {
	                this.state = 1062;
	                this.match(SqlBaseParser.HAVING);
	                this.state = 1063;
	                localctx.having = this.booleanExpression(0);

	            }
	            this.state = 1075;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	            if(la_===1) {
	                this.state = 1066;
	                this.match(SqlBaseParser.WINDOW);
	                this.state = 1067;
	                localctx._namedWindow = this.namedWindow();
	                localctx.windows.push(localctx._namedWindow);
	                this.state = 1072;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,126,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1068;
	                        this.match(SqlBaseParser.COMMA);
	                        this.state = 1069;
	                        localctx._namedWindow = this.namedWindow();
	                        localctx.windows.push(localctx._namedWindow); 
	                    }
	                    this.state = 1074;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,126,this._ctx);
	                }


	            }
	            break;
	        case 208:
	            localctx = new ValuesRelationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1077;
	            this.match(SqlBaseParser.VALUES);
	            this.state = 1078;
	            this.values();
	            this.state = 1083;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1079;
	                    this.match(SqlBaseParser.COMMA);
	                    this.state = 1080;
	                    this.values(); 
	                }
	                this.state = 1085;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItem() {
	    let localctx = new SelectItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SqlBaseParser.RULE_selectItem);
	    var _la = 0;
	    try {
	        this.state = 1100;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SelectSingleContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1088;
	            this.expr();
	            this.state = 1093;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	            if(la_===1) {
	                this.state = 1090;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 1089;
	                    this.match(SqlBaseParser.AS);
	                }

	                this.state = 1092;
	                this.ident();

	            }
	            break;

	        case 2:
	            localctx = new SelectAllContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1095;
	            this.qname();
	            this.state = 1096;
	            this.match(SqlBaseParser.DOT);
	            this.state = 1097;
	            this.match(SqlBaseParser.ASTERISK);
	            break;

	        case 3:
	            localctx = new SelectAllContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1099;
	            this.match(SqlBaseParser.ASTERISK);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	where() {
	    let localctx = new WhereContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SqlBaseParser.RULE_where);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1102;
	        this.match(SqlBaseParser.WHERE);
	        this.state = 1103;
	        localctx.condition = this.booleanExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returning() {
	    let localctx = new ReturningContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SqlBaseParser.RULE_returning);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1105;
	        this.match(SqlBaseParser.RETURNING);
	        this.state = 1106;
	        this.selectItem();
	        this.state = 1111;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===303) {
	            this.state = 1107;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 1108;
	            this.selectItem();
	            this.state = 1113;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filter() {
	    let localctx = new FilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SqlBaseParser.RULE_filter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1114;
	        this.match(SqlBaseParser.FILTER);
	        this.state = 1115;
	        this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	        this.state = 1116;
	        this.where();
	        this.state = 1117;
	        this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	relation(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new RelationContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 38;
	    this.enterRecursionRule(localctx, 38, SqlBaseParser.RULE_relation, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new RelationDefaultContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1120;
	        this.aliasedRelation();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1140;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,135,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JoinRelationContext(this, new RelationContext(this, _parentctx, _parentState));
	                localctx.left = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_relation);
	                this.state = 1122;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1136;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 72:
	                    this.state = 1123;
	                    this.match(SqlBaseParser.CROSS);
	                    this.state = 1124;
	                    this.match(SqlBaseParser.JOIN);
	                    this.state = 1125;
	                    localctx.right = this.aliasedRelation();
	                    break;
	                case 71:
	                case 74:
	                case 75:
	                case 76:
	                case 77:
	                    this.state = 1126;
	                    this.joinType();
	                    this.state = 1127;
	                    this.match(SqlBaseParser.JOIN);
	                    this.state = 1128;
	                    localctx.rightRelation = this.relation(0);
	                    this.state = 1129;
	                    this.joinCriteria();
	                    break;
	                case 78:
	                    this.state = 1131;
	                    this.match(SqlBaseParser.NATURAL);
	                    this.state = 1132;
	                    this.joinType();
	                    this.state = 1133;
	                    this.match(SqlBaseParser.JOIN);
	                    this.state = 1134;
	                    localctx.right = this.aliasedRelation();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1142;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,135,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	joinType() {
	    let localctx = new JoinTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SqlBaseParser.RULE_joinType);
	    var _la = 0;
	    try {
	        this.state = 1158;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 71:
	        case 74:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1144;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===74) {
	                this.state = 1143;
	                this.match(SqlBaseParser.INNER);
	            }

	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1146;
	            this.match(SqlBaseParser.LEFT);
	            this.state = 1148;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===73) {
	                this.state = 1147;
	                this.match(SqlBaseParser.OUTER);
	            }

	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1150;
	            this.match(SqlBaseParser.RIGHT);
	            this.state = 1152;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===73) {
	                this.state = 1151;
	                this.match(SqlBaseParser.OUTER);
	            }

	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1154;
	            this.match(SqlBaseParser.FULL);
	            this.state = 1156;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===73) {
	                this.state = 1155;
	                this.match(SqlBaseParser.OUTER);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinCriteria() {
	    let localctx = new JoinCriteriaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SqlBaseParser.RULE_joinCriteria);
	    var _la = 0;
	    try {
	        this.state = 1174;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 80:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1160;
	            this.match(SqlBaseParser.ON);
	            this.state = 1161;
	            this.booleanExpression(0);
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1162;
	            this.match(SqlBaseParser.USING);
	            this.state = 1163;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1164;
	            this.ident();
	            this.state = 1169;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 1165;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 1166;
	                this.ident();
	                this.state = 1171;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1172;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasedRelation() {
	    let localctx = new AliasedRelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SqlBaseParser.RULE_aliasedRelation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1176;
	        this.relationPrimary();
	        this.state = 1184;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	        if(la_===1) {
	            this.state = 1178;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1177;
	                this.match(SqlBaseParser.AS);
	            }

	            this.state = 1180;
	            this.ident();
	            this.state = 1182;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	            if(la_===1) {
	                this.state = 1181;
	                this.aliasedColumns();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationPrimary() {
	    let localctx = new RelationPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SqlBaseParser.RULE_relationPrimary);
	    try {
	        this.state = 1195;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableRelationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1186;
	            this.table();
	            break;

	        case 2:
	            localctx = new SubqueryRelationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1187;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1188;
	            this.query();
	            this.state = 1189;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 3:
	            localctx = new ParenthesizedRelationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1191;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1192;
	            this.relation(0);
	            this.state = 1193;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableWithPartition() {
	    let localctx = new TableWithPartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SqlBaseParser.RULE_tableWithPartition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1197;
	        this.qname();
	        this.state = 1210;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===83) {
	            this.state = 1198;
	            this.match(SqlBaseParser.PARTITION);
	            this.state = 1199;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1200;
	            this.assignment();
	            this.state = 1205;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 1201;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 1202;
	                this.assignment();
	                this.state = 1207;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1208;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table() {
	    let localctx = new TableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SqlBaseParser.RULE_table);
	    var _la = 0;
	    try {
	        this.state = 1227;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableNameContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1212;
	            this.qname();
	            break;

	        case 2:
	            localctx = new TableFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1213;
	            this.qname();
	            this.state = 1214;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1216;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3909092434) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294933579) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 796792929) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 4294941693) !== 0) || ((((_la - 128)) & ~0x1f) === 0 && ((1 << (_la - 128)) & 2147483647) !== 0) || ((((_la - 161)) & ~0x1f) === 0 && ((1 << (_la - 161)) & 4294946773) !== 0) || ((((_la - 193)) & ~0x1f) === 0 && ((1 << (_la - 193)) & 3699150383) !== 0) || ((((_la - 225)) & ~0x1f) === 0 && ((1 << (_la - 225)) & 4235788283) !== 0) || ((((_la - 257)) & ~0x1f) === 0 && ((1 << (_la - 257)) & 33554431) !== 0) || ((((_la - 293)) & ~0x1f) === 0 && ((1 << (_la - 293)) & 4280111107) !== 0) || _la===325 || _la===326) {
	                this.state = 1215;
	                this.valueExpression(0);
	            }

	            this.state = 1222;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 1218;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 1219;
	                this.valueExpression(0);
	                this.state = 1224;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1225;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasedColumns() {
	    let localctx = new AliasedColumnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SqlBaseParser.RULE_aliasedColumns);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1229;
	        this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	        this.state = 1230;
	        this.ident();
	        this.state = 1235;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===303) {
	            this.state = 1231;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 1232;
	            this.ident();
	            this.state = 1237;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1238;
	        this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_() {
	    let localctx = new WithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SqlBaseParser.RULE_with);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1240;
	        this.match(SqlBaseParser.WITH);
	        this.state = 1241;
	        this.namedQuery();
	        this.state = 1246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===303) {
	            this.state = 1242;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 1243;
	            this.namedQuery();
	            this.state = 1248;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedQuery() {
	    let localctx = new NamedQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SqlBaseParser.RULE_namedQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1249;
	        localctx.name = this.ident();
	        this.state = 1251;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===305) {
	            this.state = 1250;
	            this.aliasedColumns();
	        }

	        this.state = 1253;
	        this.match(SqlBaseParser.AS);
	        this.state = 1254;
	        this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	        this.state = 1255;
	        this.query();
	        this.state = 1256;
	        this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SqlBaseParser.RULE_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1258;
	        this.booleanExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	booleanExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 60;
	    this.enterRecursionRule(localctx, 60, SqlBaseParser.RULE_booleanExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1277;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	        case 6:
	        case 10:
	        case 24:
	        case 27:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 35:
	        case 38:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 69:
	        case 70:
	        case 75:
	        case 76:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 93:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 161:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 198:
	        case 202:
	        case 203:
	        case 204:
	        case 208:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 219:
	        case 220:
	        case 221:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 293:
	        case 294:
	        case 305:
	        case 307:
	        case 309:
	        case 311:
	        case 312:
	        case 313:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	            localctx = new BooleanDefaultContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1261;
	            this.predicated();
	            break;
	        case 23:
	            localctx = new LogicalNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1262;
	            this.match(SqlBaseParser.NOT);
	            this.state = 1263;
	            this.booleanExpression(4);
	            break;
	        case 243:
	            localctx = new MatchContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1264;
	            this.match(SqlBaseParser.MATCH);
	            this.state = 1265;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1266;
	            this.matchPredicateIdents();
	            this.state = 1267;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 1268;
	            localctx.term = this.primaryExpression(0);
	            this.state = 1269;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            this.state = 1275;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	            if(la_===1) {
	                this.state = 1270;
	                this.match(SqlBaseParser.USING);
	                this.state = 1271;
	                localctx.matchType = this.ident();
	                this.state = 1273;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	                if(la_===1) {
	                    this.state = 1272;
	                    this.withProperties();

	                }

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1287;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,159,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1285;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
	                    this.state = 1279;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1280;
	                    localctx.operator = this.match(SqlBaseParser.AND);
	                    this.state = 1281;
	                    localctx.right = this.booleanExpression(4);
	                    break;

	                case 2:
	                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
	                    this.state = 1282;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1283;
	                    localctx.operator = this.match(SqlBaseParser.OR);
	                    this.state = 1284;
	                    localctx.right = this.booleanExpression(3);
	                    break;

	                } 
	            }
	            this.state = 1289;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,159,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	predicated() {
	    let localctx = new PredicatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SqlBaseParser.RULE_predicated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1290;
	        localctx._valueExpression = this.valueExpression(0);
	        this.state = 1292;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        if(la_===1) {
	            this.state = 1291;
	            this.predicate(localctx._valueExpression);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicate(value) {
	    let localctx = new PredicateContext(this, this._ctx, this.state, value);
	    this.enterRule(localctx, 64, SqlBaseParser.RULE_predicate);
	    var _la = 0;
	    try {
	        this.state = 1362;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ComparisonContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1294;
	            this.cmpOp();
	            this.state = 1295;
	            localctx.right = this.valueExpression(0);
	            break;

	        case 2:
	            localctx = new QuantifiedComparisonContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1297;
	            this.cmpOp();
	            this.state = 1298;
	            this.setCmpQuantifier();
	            this.state = 1299;
	            this.primaryExpression(0);
	            break;

	        case 3:
	            localctx = new BetweenContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1302;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23) {
	                this.state = 1301;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1304;
	            this.match(SqlBaseParser.BETWEEN);
	            this.state = 1305;
	            localctx.lower = this.valueExpression(0);
	            this.state = 1306;
	            this.match(SqlBaseParser.AND);
	            this.state = 1307;
	            localctx.upper = this.valueExpression(0);
	            break;

	        case 4:
	            localctx = new InListContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1310;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23) {
	                this.state = 1309;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1312;
	            this.match(SqlBaseParser.IN);
	            this.state = 1313;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1314;
	            this.expr();
	            this.state = 1319;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 1315;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 1316;
	                this.expr();
	                this.state = 1321;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1322;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 5:
	            localctx = new InSubqueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1325;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23) {
	                this.state = 1324;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1327;
	            this.match(SqlBaseParser.IN);
	            this.state = 1328;
	            this.subqueryExpression();
	            break;

	        case 6:
	            localctx = new LikeContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1330;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23) {
	                this.state = 1329;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1332;
	            _la = this._input.LA(1);
	            if(!(_la===26 || _la===27)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1333;
	            localctx.pattern = this.valueExpression(0);
	            this.state = 1336;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	            if(la_===1) {
	                this.state = 1334;
	                this.match(SqlBaseParser.ESCAPE);
	                this.state = 1335;
	                localctx.escape = this.parameterOrLiteral();

	            }
	            break;

	        case 7:
	            localctx = new ArrayLikeContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1339;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23) {
	                this.state = 1338;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1341;
	            _la = this._input.LA(1);
	            if(!(_la===26 || _la===27)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1342;
	            localctx.quant = this.setCmpQuantifier();
	            this.state = 1343;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1344;
	            localctx.v = this.valueExpression(0);
	            this.state = 1345;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            this.state = 1348;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	            if(la_===1) {
	                this.state = 1346;
	                this.match(SqlBaseParser.ESCAPE);
	                this.state = 1347;
	                localctx.escape = this.valueExpression(0);

	            }
	            break;

	        case 8:
	            localctx = new NullPredicateContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1350;
	            this.match(SqlBaseParser.IS);
	            this.state = 1352;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23) {
	                this.state = 1351;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1354;
	            this.match(SqlBaseParser.NULL);
	            break;

	        case 9:
	            localctx = new DistinctFromContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1355;
	            this.match(SqlBaseParser.IS);
	            this.state = 1357;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23) {
	                this.state = 1356;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1359;
	            this.match(SqlBaseParser.DISTINCT);
	            this.state = 1360;
	            this.match(SqlBaseParser.FROM);
	            this.state = 1361;
	            localctx.right = this.valueExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	valueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 66;
	    this.enterRecursionRule(localctx, 66, SqlBaseParser.RULE_valueExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1371;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ValueExpressionDefaultContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1365;
	            this.primaryExpression(0);
	            break;

	        case 2:
	            localctx = new ArithmeticUnaryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1366;
	            localctx.operator = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===293 || _la===294)) {
	                localctx.operator = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1367;
	            this.valueExpression(7);
	            break;

	        case 3:
	            localctx = new FromStringLiteralCastContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1368;
	            this.dataType(0);
	            this.state = 1369;
	            this.stringLiteral();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1390;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,174,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1388;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 1373;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1374;
	                    localctx.operator = this.match(SqlBaseParser.CARET);
	                    this.state = 1375;
	                    localctx.right = this.valueExpression(7);
	                    break;

	                case 2:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 1376;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1377;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 295)) & ~0x1f) === 0 && ((1 << (_la - 295)) & 13) !== 0))) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1378;
	                    localctx.right = this.valueExpression(6);
	                    break;

	                case 3:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 1379;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 1380;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===293 || _la===294)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1381;
	                    localctx.right = this.valueExpression(5);
	                    break;

	                case 4:
	                    localctx = new BitwiseBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 1382;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1383;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 314)) & ~0x1f) === 0 && ((1 << (_la - 314)) & 7) !== 0))) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1384;
	                    localctx.right = this.valueExpression(4);
	                    break;

	                case 5:
	                    localctx = new ConcatenationContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 1385;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1386;
	                    this.match(SqlBaseParser.CONCAT);
	                    this.state = 1387;
	                    localctx.right = this.valueExpression(3);
	                    break;

	                } 
	            }
	            this.state = 1392;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,174,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	primaryExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 68;
	    this.enterRecursionRule(localctx, 68, SqlBaseParser.RULE_primaryExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1461;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DefaultParamOrLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1394;
	            this.parameterOrLiteral();
	            break;

	        case 2:
	            localctx = new ExplicitFunctionDefaultContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1395;
	            this.explicitFunction();
	            break;

	        case 3:
	            localctx = new FunctionCallContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1396;
	            this.qname();
	            this.state = 1397;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1398;
	            this.match(SqlBaseParser.ASTERISK);
	            this.state = 1399;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            this.state = 1401;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
	            if(la_===1) {
	                this.state = 1400;
	                this.filter();

	            }
	            this.state = 1404;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
	            if(la_===1) {
	                this.state = 1403;
	                this.over();

	            }
	            break;

	        case 4:
	            localctx = new ColumnReferenceContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1406;
	            this.ident();
	            break;

	        case 5:
	            localctx = new FunctionCallContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1407;
	            this.qname();
	            this.state = 1408;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1420;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3917485266) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294933579) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 796792929) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 4294941693) !== 0) || ((((_la - 128)) & ~0x1f) === 0 && ((1 << (_la - 128)) & 2147483647) !== 0) || ((((_la - 161)) & ~0x1f) === 0 && ((1 << (_la - 161)) & 4294946773) !== 0) || ((((_la - 193)) & ~0x1f) === 0 && ((1 << (_la - 193)) & 3699150383) !== 0) || ((((_la - 225)) & ~0x1f) === 0 && ((1 << (_la - 225)) & 4236050427) !== 0) || ((((_la - 257)) & ~0x1f) === 0 && ((1 << (_la - 257)) & 33554431) !== 0) || ((((_la - 293)) & ~0x1f) === 0 && ((1 << (_la - 293)) & 4280111107) !== 0) || _la===325 || _la===326) {
	                this.state = 1410;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===7 || _la===12) {
	                    this.state = 1409;
	                    this.setQuant();
	                }

	                this.state = 1412;
	                this.expr();
	                this.state = 1417;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===303) {
	                    this.state = 1413;
	                    this.match(SqlBaseParser.COMMA);
	                    this.state = 1414;
	                    this.expr();
	                    this.state = 1419;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1422;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            this.state = 1424;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	            if(la_===1) {
	                this.state = 1423;
	                this.filter();

	            }
	            this.state = 1428;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	            if(la_===1) {
	                this.state = 1426;
	                _la = this._input.LA(1);
	                if(!(_la===32 || _la===33)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1427;
	                this.match(SqlBaseParser.NULLS);

	            }
	            this.state = 1431;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	            if(la_===1) {
	                this.state = 1430;
	                this.over();

	            }
	            break;

	        case 6:
	            localctx = new SubqueryExpressionDefaultContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1433;
	            this.subqueryExpression();
	            break;

	        case 7:
	            localctx = new RecordSubscriptContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1434;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1435;
	            localctx.base = this.primaryExpression(0);
	            this.state = 1436;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            this.state = 1437;
	            this.match(SqlBaseParser.DOT);
	            this.state = 1438;
	            localctx.fieldName = this.ident();
	            break;

	        case 8:
	            localctx = new NestedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1440;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1441;
	            this.expr();
	            this.state = 1442;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 9:
	            localctx = new ExistsContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1444;
	            this.match(SqlBaseParser.EXISTS);
	            this.state = 1445;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1446;
	            this.query();
	            this.state = 1447;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 10:
	            localctx = new DereferenceContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1449;
	            this.ident();
	            this.state = 1454;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,183,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1450;
	                    this.match(SqlBaseParser.DOT);
	                    this.state = 1451;
	                    this.ident(); 
	                }
	                this.state = 1456;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,183,this._ctx);
	            }

	            break;

	        case 11:
	            localctx = new EmptyArrayContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1458;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===233) {
	                this.state = 1457;
	                this.match(SqlBaseParser.ARRAY);
	            }

	            this.state = 1460;
	            this.match(SqlBaseParser.EMPTY_SQUARE_BRACKET);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1488;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,189,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1486;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new AtTimezoneContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    localctx.timestamp = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
	                    this.state = 1463;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1464;
	                    this.match(SqlBaseParser.AT);
	                    this.state = 1465;
	                    this.match(SqlBaseParser.TIME);
	                    this.state = 1466;
	                    this.match(SqlBaseParser.ZONE);
	                    this.state = 1467;
	                    localctx.zone = this.primaryExpression(3);
	                    break;

	                case 2:
	                    localctx = new SubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    localctx.value = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
	                    this.state = 1468;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1469;
	                    this.match(SqlBaseParser.OPEN_SQUARE_BRACKET);
	                    this.state = 1470;
	                    localctx.index = this.valueExpression(0);
	                    this.state = 1471;
	                    this.match(SqlBaseParser.CLOSE_SQUARE_BRACKET);
	                    break;

	                case 3:
	                    localctx = new ArraySliceContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    localctx.base = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
	                    this.state = 1473;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1474;
	                    this.match(SqlBaseParser.OPEN_SQUARE_BRACKET);
	                    this.state = 1476;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3909092434) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294933579) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 796792929) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 4294941693) !== 0) || ((((_la - 128)) & ~0x1f) === 0 && ((1 << (_la - 128)) & 2147483647) !== 0) || ((((_la - 161)) & ~0x1f) === 0 && ((1 << (_la - 161)) & 4294946773) !== 0) || ((((_la - 193)) & ~0x1f) === 0 && ((1 << (_la - 193)) & 3699150383) !== 0) || ((((_la - 225)) & ~0x1f) === 0 && ((1 << (_la - 225)) & 4235788283) !== 0) || ((((_la - 257)) & ~0x1f) === 0 && ((1 << (_la - 257)) & 33554431) !== 0) || ((((_la - 293)) & ~0x1f) === 0 && ((1 << (_la - 293)) & 4280111107) !== 0) || _la===325 || _la===326) {
	                        this.state = 1475;
	                        localctx.from = this.valueExpression(0);
	                    }

	                    this.state = 1478;
	                    this.match(SqlBaseParser.COLON);
	                    this.state = 1480;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3909092434) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294933579) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 796792929) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 4294941693) !== 0) || ((((_la - 128)) & ~0x1f) === 0 && ((1 << (_la - 128)) & 2147483647) !== 0) || ((((_la - 161)) & ~0x1f) === 0 && ((1 << (_la - 161)) & 4294946773) !== 0) || ((((_la - 193)) & ~0x1f) === 0 && ((1 << (_la - 193)) & 3699150383) !== 0) || ((((_la - 225)) & ~0x1f) === 0 && ((1 << (_la - 225)) & 4235788283) !== 0) || ((((_la - 257)) & ~0x1f) === 0 && ((1 << (_la - 257)) & 33554431) !== 0) || ((((_la - 293)) & ~0x1f) === 0 && ((1 << (_la - 293)) & 4280111107) !== 0) || _la===325 || _la===326) {
	                        this.state = 1479;
	                        localctx.to = this.valueExpression(0);
	                    }

	                    this.state = 1482;
	                    this.match(SqlBaseParser.CLOSE_SQUARE_BRACKET);
	                    break;

	                case 4:
	                    localctx = new DoubleColonCastContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
	                    this.state = 1483;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1484;
	                    this.match(SqlBaseParser.CAST_OPERATOR);
	                    this.state = 1485;
	                    this.dataType(0);
	                    break;

	                } 
	            }
	            this.state = 1490;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,189,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	explicitFunction() {
	    let localctx = new ExplicitFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SqlBaseParser.RULE_explicitFunction);
	    var _la = 0;
	    try {
	        this.state = 1607;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SpecialDateTimeFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1491;
	            localctx.name = this.match(SqlBaseParser.CURRENT_DATE);
	            break;

	        case 2:
	            localctx = new SpecialDateTimeFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1492;
	            localctx.name = this.match(SqlBaseParser.CURRENT_TIME);
	            this.state = 1497;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	            if(la_===1) {
	                this.state = 1493;
	                this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	                this.state = 1494;
	                localctx.precision = this.integerLiteral();
	                this.state = 1495;
	                this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);

	            }
	            break;

	        case 3:
	            localctx = new SpecialDateTimeFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1499;
	            localctx.name = this.match(SqlBaseParser.CURRENT_TIMESTAMP);
	            this.state = 1504;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
	            if(la_===1) {
	                this.state = 1500;
	                this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	                this.state = 1501;
	                localctx.precision = this.integerLiteral();
	                this.state = 1502;
	                this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);

	            }
	            break;

	        case 4:
	            localctx = new CurrentSchemaContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1506;
	            this.match(SqlBaseParser.CURRENT_SCHEMA);
	            break;

	        case 5:
	            localctx = new CurrentUserContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1507;
	            _la = this._input.LA(1);
	            if(!(_la===60 || _la===61 || _la===246)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 6:
	            localctx = new SessionUserContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1508;
	            this.match(SqlBaseParser.SESSION_USER);
	            break;

	        case 7:
	            localctx = new LeftContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1509;
	            this.match(SqlBaseParser.LEFT);
	            this.state = 1510;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1511;
	            localctx.strOrColName = this.expr();
	            this.state = 1512;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 1513;
	            localctx.len = this.expr();
	            this.state = 1514;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 8:
	            localctx = new RightContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1516;
	            this.match(SqlBaseParser.RIGHT);
	            this.state = 1517;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1518;
	            localctx.strOrColName = this.expr();
	            this.state = 1519;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 1520;
	            localctx.len = this.expr();
	            this.state = 1521;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 9:
	            localctx = new SubstringContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1523;
	            this.match(SqlBaseParser.SUBSTRING);
	            this.state = 1524;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1525;
	            this.expr();
	            this.state = 1526;
	            this.match(SqlBaseParser.FROM);
	            this.state = 1527;
	            this.expr();
	            this.state = 1530;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===47) {
	                this.state = 1528;
	                this.match(SqlBaseParser.FOR);
	                this.state = 1529;
	                this.expr();
	            }

	            this.state = 1532;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 10:
	            localctx = new TrimContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1534;
	            this.match(SqlBaseParser.TRIM);
	            this.state = 1535;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1543;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	            if(la_===1) {
	                this.state = 1537;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	                if(la_===1) {
	                    this.state = 1536;
	                    localctx.trimMode = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 7) !== 0))) {
	                        localctx.trimMode = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }

	                }
	                this.state = 1540;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3917481042) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294933579) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 796792929) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 4294941693) !== 0) || ((((_la - 128)) & ~0x1f) === 0 && ((1 << (_la - 128)) & 2147483647) !== 0) || ((((_la - 161)) & ~0x1f) === 0 && ((1 << (_la - 161)) & 4294946773) !== 0) || ((((_la - 193)) & ~0x1f) === 0 && ((1 << (_la - 193)) & 3699150383) !== 0) || ((((_la - 225)) & ~0x1f) === 0 && ((1 << (_la - 225)) & 4236050427) !== 0) || ((((_la - 257)) & ~0x1f) === 0 && ((1 << (_la - 257)) & 33554431) !== 0) || ((((_la - 293)) & ~0x1f) === 0 && ((1 << (_la - 293)) & 4280111107) !== 0) || _la===325 || _la===326) {
	                    this.state = 1539;
	                    localctx.charsToTrim = this.expr();
	                }

	                this.state = 1542;
	                this.match(SqlBaseParser.FROM);

	            }
	            this.state = 1545;
	            localctx.target = this.expr();
	            this.state = 1546;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 11:
	            localctx = new ExtractContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1548;
	            this.match(SqlBaseParser.EXTRACT);
	            this.state = 1549;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1550;
	            this.stringLiteralOrIdentifier();
	            this.state = 1551;
	            this.match(SqlBaseParser.FROM);
	            this.state = 1552;
	            this.expr();
	            this.state = 1553;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 12:
	            localctx = new CastContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1555;
	            this.match(SqlBaseParser.CAST);
	            this.state = 1556;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1557;
	            this.expr();
	            this.state = 1558;
	            this.match(SqlBaseParser.AS);
	            this.state = 1559;
	            this.dataType(0);
	            this.state = 1560;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 13:
	            localctx = new CastContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1562;
	            this.match(SqlBaseParser.TRY_CAST);
	            this.state = 1563;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1564;
	            this.expr();
	            this.state = 1565;
	            this.match(SqlBaseParser.AS);
	            this.state = 1566;
	            this.dataType(0);
	            this.state = 1567;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 14:
	            localctx = new SimpleCaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1569;
	            this.match(SqlBaseParser.CASE);
	            this.state = 1570;
	            localctx.operand = this.expr();
	            this.state = 1572; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1571;
	                this.whenClause();
	                this.state = 1574; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===65);
	            this.state = 1578;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===67) {
	                this.state = 1576;
	                this.match(SqlBaseParser.ELSE);
	                this.state = 1577;
	                localctx.elseExpr = this.expr();
	            }

	            this.state = 1580;
	            this.match(SqlBaseParser.END);
	            break;

	        case 15:
	            localctx = new SearchedCaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1582;
	            this.match(SqlBaseParser.CASE);
	            this.state = 1584; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1583;
	                this.whenClause();
	                this.state = 1586; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===65);
	            this.state = 1590;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===67) {
	                this.state = 1588;
	                this.match(SqlBaseParser.ELSE);
	                this.state = 1589;
	                localctx.elseExpr = this.expr();
	            }

	            this.state = 1592;
	            this.match(SqlBaseParser.END);
	            break;

	        case 16:
	            localctx = new IfCaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1594;
	            this.match(SqlBaseParser.IF);
	            this.state = 1595;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1596;
	            localctx.condition = this.expr();
	            this.state = 1597;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 1598;
	            localctx.trueValue = this.expr();
	            this.state = 1601;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===303) {
	                this.state = 1599;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 1600;
	                localctx.falseValue = this.expr();
	            }

	            this.state = 1603;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 17:
	            localctx = new ArraySubqueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1605;
	            this.match(SqlBaseParser.ARRAY);
	            this.state = 1606;
	            this.subqueryExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subqueryExpression() {
	    let localctx = new SubqueryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SqlBaseParser.RULE_subqueryExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1609;
	        this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	        this.state = 1610;
	        this.query();
	        this.state = 1611;
	        this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterOrLiteral() {
	    let localctx = new ParameterOrLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SqlBaseParser.RULE_parameterOrLiteral);
	    var _la = 0;
	    try {
	        this.state = 1641;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 29:
	        case 30:
	        case 31:
	        case 70:
	        case 312:
	        case 313:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 326:
	            localctx = new SimpleLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1613;
	            this.parameterOrSimpleLiteral();
	            break;
	        case 233:
	        case 309:
	            localctx = new ArrayLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1615;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===233) {
	                this.state = 1614;
	                this.match(SqlBaseParser.ARRAY);
	            }

	            this.state = 1617;
	            this.match(SqlBaseParser.OPEN_SQUARE_BRACKET);
	            this.state = 1626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3917481042) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294933579) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 796792929) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 4294941693) !== 0) || ((((_la - 128)) & ~0x1f) === 0 && ((1 << (_la - 128)) & 2147483647) !== 0) || ((((_la - 161)) & ~0x1f) === 0 && ((1 << (_la - 161)) & 4294946773) !== 0) || ((((_la - 193)) & ~0x1f) === 0 && ((1 << (_la - 193)) & 3699150383) !== 0) || ((((_la - 225)) & ~0x1f) === 0 && ((1 << (_la - 225)) & 4236050427) !== 0) || ((((_la - 257)) & ~0x1f) === 0 && ((1 << (_la - 257)) & 33554431) !== 0) || ((((_la - 293)) & ~0x1f) === 0 && ((1 << (_la - 293)) & 4280111107) !== 0) || _la===325 || _la===326) {
	                this.state = 1618;
	                this.expr();
	                this.state = 1623;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===303) {
	                    this.state = 1619;
	                    this.match(SqlBaseParser.COMMA);
	                    this.state = 1620;
	                    this.expr();
	                    this.state = 1625;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1628;
	            this.match(SqlBaseParser.CLOSE_SQUARE_BRACKET);
	            break;
	        case 307:
	            localctx = new ObjectLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1629;
	            this.match(SqlBaseParser.OPEN_CURLY_BRACKET);
	            this.state = 1638;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 134218834) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 268401739) !== 0) || ((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 4106090497) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 4294966895) !== 0) || ((((_la - 135)) & ~0x1f) === 0 && ((1 << (_la - 135)) & 1426063357) !== 0) || ((((_la - 167)) & ~0x1f) === 0 && ((1 << (_la - 167)) & 3221028543) !== 0) || ((((_la - 202)) & ~0x1f) === 0 && ((1 << (_la - 202)) & 2112765511) !== 0) || ((((_la - 234)) & ~0x1f) === 0 && ((1 << (_la - 234)) & 4294847615) !== 0) || ((((_la - 266)) & ~0x1f) === 0 && ((1 << (_la - 266)) & 65535) !== 0) || ((((_la - 322)) & ~0x1f) === 0 && ((1 << (_la - 322)) & 15) !== 0)) {
	                this.state = 1630;
	                this.objectKeyValue();
	                this.state = 1635;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===303) {
	                    this.state = 1631;
	                    this.match(SqlBaseParser.COMMA);
	                    this.state = 1632;
	                    this.objectKeyValue();
	                    this.state = 1637;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1640;
	            this.match(SqlBaseParser.CLOSE_CURLY_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterOrSimpleLiteral() {
	    let localctx = new ParameterOrSimpleLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SqlBaseParser.RULE_parameterOrSimpleLiteral);
	    try {
	        this.state = 1651;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 29:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1643;
	            this.nullLiteral();
	            break;
	        case 70:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1644;
	            this.intervalLiteral();
	            break;
	        case 318:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1645;
	            this.escapedCharsStringLiteral();
	            break;
	        case 317:
	        case 326:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1646;
	            this.stringLiteral();
	            break;
	        case 320:
	        case 321:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1647;
	            this.numericLiteral();
	            break;
	        case 30:
	        case 31:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1648;
	            this.booleanLiteral();
	            break;
	        case 319:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1649;
	            this.bitString();
	            break;
	        case 312:
	        case 313:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1650;
	            this.parameterExpr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterOrInteger() {
	    let localctx = new ParameterOrIntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SqlBaseParser.RULE_parameterOrInteger);
	    try {
	        this.state = 1674;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ParameterExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1653;
	            this.parameterExpr();
	            break;

	        case 2:
	            localctx = new IntAsLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1654;
	            this.integerLiteral();
	            break;

	        case 3:
	            localctx = new NullAsLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1655;
	            this.nullLiteral();
	            break;

	        case 4:
	            localctx = new IntegerParamOrLiteralDoubleColonCastContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1656;
	            this.parameterOrLiteral();
	            this.state = 1657;
	            this.match(SqlBaseParser.CAST_OPERATOR);
	            this.state = 1658;
	            this.dataType(0);
	            break;

	        case 5:
	            localctx = new IntegerParamOrLiteralCastContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1660;
	            this.match(SqlBaseParser.CAST);
	            this.state = 1661;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1662;
	            this.expr();
	            this.state = 1663;
	            this.match(SqlBaseParser.AS);
	            this.state = 1664;
	            this.dataType(0);
	            this.state = 1665;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 6:
	            localctx = new IntegerParamOrLiteralCastContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1667;
	            this.match(SqlBaseParser.TRY_CAST);
	            this.state = 1668;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1669;
	            this.expr();
	            this.state = 1670;
	            this.match(SqlBaseParser.AS);
	            this.state = 1671;
	            this.dataType(0);
	            this.state = 1672;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterOrIdent() {
	    let localctx = new ParameterOrIdentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SqlBaseParser.RULE_parameterOrIdent);
	    try {
	        this.state = 1678;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 312:
	        case 313:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1676;
	            this.parameterExpr();
	            break;
	        case 1:
	        case 4:
	        case 6:
	        case 10:
	        case 27:
	        case 32:
	        case 33:
	        case 35:
	        case 38:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 70:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 93:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 135:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 161:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 198:
	        case 202:
	        case 203:
	        case 204:
	        case 208:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 219:
	        case 220:
	        case 221:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 244:
	        case 245:
	        case 247:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1677;
	            this.ident();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterOrString() {
	    let localctx = new ParameterOrStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SqlBaseParser.RULE_parameterOrString);
	    try {
	        this.state = 1682;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 312:
	        case 313:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1680;
	            this.parameterExpr();
	            break;
	        case 317:
	        case 326:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1681;
	            this.stringLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterExpr() {
	    let localctx = new ParameterExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SqlBaseParser.RULE_parameterExpr);
	    try {
	        this.state = 1687;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 313:
	            localctx = new PositionalParameterContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1684;
	            this.match(SqlBaseParser.DOLLAR);
	            this.state = 1685;
	            this.integerLiteral();
	            break;
	        case 312:
	            localctx = new ParameterPlaceholderContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1686;
	            this.match(SqlBaseParser.QUESTION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullLiteral() {
	    let localctx = new NullLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SqlBaseParser.RULE_nullLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1689;
	        this.match(SqlBaseParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	escapedCharsStringLiteral() {
	    let localctx = new EscapedCharsStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, SqlBaseParser.RULE_escapedCharsStringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1691;
	        this.match(SqlBaseParser.ESCAPED_STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dollarQuotedStringLiteral() {
	    let localctx = new DollarQuotedStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SqlBaseParser.RULE_dollarQuotedStringLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1693;
	        this.match(SqlBaseParser.BEGIN_DOLLAR_QUOTED_STRING);
	        this.state = 1697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===330) {
	            this.state = 1694;
	            this.match(SqlBaseParser.DOLLAR_QUOTED_STRING_BODY);
	            this.state = 1699;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1700;
	        this.match(SqlBaseParser.END_DOLLAR_QUOTED_STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SqlBaseParser.RULE_stringLiteral);
	    try {
	        this.state = 1704;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 317:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1702;
	            this.match(SqlBaseParser.STRING);
	            break;
	        case 326:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1703;
	            this.dollarQuotedStringLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitString() {
	    let localctx = new BitStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SqlBaseParser.RULE_bitString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1706;
	        this.match(SqlBaseParser.BIT_STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	subscriptSafe(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SubscriptSafeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 96;
	    this.enterRecursionRule(localctx, 96, SqlBaseParser.RULE_subscriptSafe, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1709;
	        this.qname();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1718;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,215,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new SubscriptSafeContext(this, _parentctx, _parentState);
	                localctx.value = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_subscriptSafe);
	                this.state = 1711;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1712;
	                this.match(SqlBaseParser.OPEN_SQUARE_BRACKET);
	                this.state = 1713;
	                localctx.index = this.valueExpression(0);
	                this.state = 1714;
	                this.match(SqlBaseParser.CLOSE_SQUARE_BRACKET); 
	            }
	            this.state = 1720;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,215,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	cmpOp() {
	    let localctx = new CmpOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SqlBaseParser.RULE_cmpOp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1721;
	        _la = this._input.LA(1);
	        if(!(((((_la - 282)) & ~0x1f) === 0 && ((1 << (_la - 282)) & 2047) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setCmpQuantifier() {
	    let localctx = new SetCmpQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SqlBaseParser.RULE_setCmpQuantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1723;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 896) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenClause() {
	    let localctx = new WhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SqlBaseParser.RULE_whenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1725;
	        this.match(SqlBaseParser.WHEN);
	        this.state = 1726;
	        localctx.condition = this.expr();
	        this.state = 1727;
	        this.match(SqlBaseParser.THEN);
	        this.state = 1728;
	        localctx.result = this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedWindow() {
	    let localctx = new NamedWindowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SqlBaseParser.RULE_namedWindow);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1730;
	        localctx.name = this.ident();
	        this.state = 1731;
	        this.match(SqlBaseParser.AS);
	        this.state = 1732;
	        this.windowDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	over() {
	    let localctx = new OverContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SqlBaseParser.RULE_over);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1734;
	        this.match(SqlBaseParser.OVER);
	        this.state = 1735;
	        this.windowDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowDefinition() {
	    let localctx = new WindowDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SqlBaseParser.RULE_windowDefinition);
	    var _la = 0;
	    try {
	        this.state = 1770;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	        case 6:
	        case 10:
	        case 27:
	        case 32:
	        case 33:
	        case 35:
	        case 38:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 70:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 93:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 135:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 161:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 198:
	        case 202:
	        case 203:
	        case 204:
	        case 208:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 219:
	        case 220:
	        case 221:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 244:
	        case 245:
	        case 247:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1737;
	            localctx.windowRef = this.ident();
	            break;
	        case 305:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1738;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1740;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
	            if(la_===1) {
	                this.state = 1739;
	                localctx.windowRef = this.ident();

	            }
	            this.state = 1752;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===83) {
	                this.state = 1742;
	                this.match(SqlBaseParser.PARTITION);
	                this.state = 1743;
	                this.match(SqlBaseParser.BY);
	                this.state = 1744;
	                localctx._expr = this.expr();
	                localctx.partition.push(localctx._expr);
	                this.state = 1749;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===303) {
	                    this.state = 1745;
	                    this.match(SqlBaseParser.COMMA);
	                    this.state = 1746;
	                    localctx._expr = this.expr();
	                    localctx.partition.push(localctx._expr);
	                    this.state = 1751;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1764;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 1754;
	                this.match(SqlBaseParser.ORDER);
	                this.state = 1755;
	                this.match(SqlBaseParser.BY);
	                this.state = 1756;
	                this.sortItem();
	                this.state = 1761;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===303) {
	                    this.state = 1757;
	                    this.match(SqlBaseParser.COMMA);
	                    this.state = 1758;
	                    this.sortItem();
	                    this.state = 1763;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1767;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===85 || _la===86) {
	                this.state = 1766;
	                this.windowFrame();
	            }

	            this.state = 1769;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrame() {
	    let localctx = new WindowFrameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SqlBaseParser.RULE_windowFrame);
	    try {
	        this.state = 1788;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1772;
	            localctx.frameType = this.match(SqlBaseParser.RANGE);
	            this.state = 1773;
	            localctx.start = this.frameBound();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1774;
	            localctx.frameType = this.match(SqlBaseParser.ROWS);
	            this.state = 1775;
	            localctx.start = this.frameBound();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1776;
	            localctx.frameType = this.match(SqlBaseParser.RANGE);
	            this.state = 1777;
	            this.match(SqlBaseParser.BETWEEN);
	            this.state = 1778;
	            localctx.start = this.frameBound();
	            this.state = 1779;
	            this.match(SqlBaseParser.AND);
	            this.state = 1780;
	            localctx.end = this.frameBound();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1782;
	            localctx.frameType = this.match(SqlBaseParser.ROWS);
	            this.state = 1783;
	            this.match(SqlBaseParser.BETWEEN);
	            this.state = 1784;
	            localctx.start = this.frameBound();
	            this.state = 1785;
	            this.match(SqlBaseParser.AND);
	            this.state = 1786;
	            localctx.end = this.frameBound();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frameBound() {
	    let localctx = new FrameBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SqlBaseParser.RULE_frameBound);
	    var _la = 0;
	    try {
	        this.state = 1799;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UnboundedFrameContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1790;
	            this.match(SqlBaseParser.UNBOUNDED);
	            this.state = 1791;
	            localctx.boundType = this.match(SqlBaseParser.PRECEDING);
	            break;

	        case 2:
	            localctx = new UnboundedFrameContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1792;
	            this.match(SqlBaseParser.UNBOUNDED);
	            this.state = 1793;
	            localctx.boundType = this.match(SqlBaseParser.FOLLOWING);
	            break;

	        case 3:
	            localctx = new CurrentRowBoundContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1794;
	            this.match(SqlBaseParser.CURRENT);
	            this.state = 1795;
	            this.match(SqlBaseParser.ROW);
	            break;

	        case 4:
	            localctx = new BoundedFrameContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1796;
	            this.expr();
	            this.state = 1797;
	            localctx.boundType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===88 || _la===89)) {
	                localctx.boundType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qnames() {
	    let localctx = new QnamesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SqlBaseParser.RULE_qnames);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1801;
	        this.qname();
	        this.state = 1806;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===303) {
	            this.state = 1802;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 1803;
	            this.qname();
	            this.state = 1808;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qname() {
	    let localctx = new QnameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SqlBaseParser.RULE_qname);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1809;
	        this.ident();
	        this.state = 1814;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,226,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1810;
	                this.match(SqlBaseParser.DOT);
	                this.state = 1811;
	                this.ident(); 
	            }
	            this.state = 1816;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,226,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	spaceSeparatedIdents() {
	    let localctx = new SpaceSeparatedIdentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SqlBaseParser.RULE_spaceSeparatedIdents);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1817;
	        this.identWithOrWithoutValue();
	        this.state = 1821;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 134218834) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 268401739) !== 0) || ((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 4106090497) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 4294966895) !== 0) || ((((_la - 135)) & ~0x1f) === 0 && ((1 << (_la - 135)) & 1426063357) !== 0) || ((((_la - 167)) & ~0x1f) === 0 && ((1 << (_la - 167)) & 3221028543) !== 0) || ((((_la - 202)) & ~0x1f) === 0 && ((1 << (_la - 202)) & 2112765511) !== 0) || ((((_la - 234)) & ~0x1f) === 0 && ((1 << (_la - 234)) & 4294847615) !== 0) || ((((_la - 266)) & ~0x1f) === 0 && ((1 << (_la - 266)) & 65535) !== 0) || ((((_la - 322)) & ~0x1f) === 0 && ((1 << (_la - 322)) & 15) !== 0)) {
	            this.state = 1818;
	            this.identWithOrWithoutValue();
	            this.state = 1823;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identWithOrWithoutValue() {
	    let localctx = new IdentWithOrWithoutValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SqlBaseParser.RULE_identWithOrWithoutValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1824;
	        this.ident();
	        this.state = 1826;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
	        if(la_===1) {
	            this.state = 1825;
	            this.parameterOrSimpleLiteral();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	idents() {
	    let localctx = new IdentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SqlBaseParser.RULE_idents);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1828;
	        this.ident();
	        this.state = 1833;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===303) {
	            this.state = 1829;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 1830;
	            this.ident();
	            this.state = 1835;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ident() {
	    let localctx = new IdentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SqlBaseParser.RULE_ident);
	    try {
	        this.state = 1838;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	        case 6:
	        case 10:
	        case 27:
	        case 32:
	        case 33:
	        case 35:
	        case 38:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 70:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 93:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 135:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 161:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 198:
	        case 202:
	        case 203:
	        case 204:
	        case 208:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 219:
	        case 220:
	        case 221:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 244:
	        case 245:
	        case 247:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 322:
	        case 323:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1836;
	            this.unquotedIdent();
	            break;
	        case 324:
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1837;
	            this.quotedIdent();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unquotedIdent() {
	    let localctx = new UnquotedIdentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SqlBaseParser.RULE_unquotedIdent);
	    try {
	        this.state = 1843;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 322:
	            localctx = new UnquotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1840;
	            this.match(SqlBaseParser.IDENTIFIER);
	            break;
	        case 1:
	        case 4:
	        case 6:
	        case 10:
	        case 27:
	        case 32:
	        case 33:
	        case 35:
	        case 38:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 70:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 93:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 135:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 161:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 198:
	        case 202:
	        case 203:
	        case 204:
	        case 208:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 219:
	        case 220:
	        case 221:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 244:
	        case 245:
	        case 247:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	            localctx = new UnquotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1841;
	            this.nonReserved();
	            break;
	        case 323:
	            localctx = new DigitIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1842;
	            this.match(SqlBaseParser.DIGIT_IDENTIFIER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quotedIdent() {
	    let localctx = new QuotedIdentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SqlBaseParser.RULE_quotedIdent);
	    try {
	        this.state = 1847;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 324:
	            localctx = new QuotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1845;
	            this.match(SqlBaseParser.QUOTED_IDENTIFIER);
	            break;
	        case 325:
	            localctx = new BackQuotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1846;
	            this.match(SqlBaseParser.BACKQUOTED_IDENTIFIER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteralOrIdentifier() {
	    let localctx = new StringLiteralOrIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SqlBaseParser.RULE_stringLiteralOrIdentifier);
	    try {
	        this.state = 1851;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	        case 6:
	        case 10:
	        case 27:
	        case 32:
	        case 33:
	        case 35:
	        case 38:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 70:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 93:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 135:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 161:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 198:
	        case 202:
	        case 203:
	        case 204:
	        case 208:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 219:
	        case 220:
	        case 221:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 244:
	        case 245:
	        case 247:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1849;
	            this.ident();
	            break;
	        case 317:
	        case 326:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1850;
	            this.stringLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteralOrIdentifierOrQname() {
	    let localctx = new StringLiteralOrIdentifierOrQnameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SqlBaseParser.RULE_stringLiteralOrIdentifierOrQname);
	    try {
	        this.state = 1856;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1853;
	            this.ident();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1854;
	            this.qname();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1855;
	            this.stringLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SqlBaseParser.RULE_numericLiteral);
	    try {
	        this.state = 1860;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 321:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1858;
	            this.decimalLiteral();
	            break;
	        case 320:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1859;
	            this.integerLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalLiteral() {
	    let localctx = new IntervalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SqlBaseParser.RULE_intervalLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1862;
	        this.match(SqlBaseParser.INTERVAL);
	        this.state = 1864;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===293 || _la===294) {
	            this.state = 1863;
	            localctx.sign = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===293 || _la===294)) {
	                localctx.sign = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1866;
	        this.stringLiteral();
	        this.state = 1867;
	        localctx.from = this.intervalField();
	        this.state = 1870;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
	        if(la_===1) {
	            this.state = 1868;
	            this.match(SqlBaseParser.TO);
	            this.state = 1869;
	            localctx.to = this.intervalField();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalField() {
	    let localctx = new IntervalFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SqlBaseParser.RULE_intervalField);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1872;
	        _la = this._input.LA(1);
	        if(!(((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 63) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, SqlBaseParser.RULE_booleanLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1874;
	        _la = this._input.LA(1);
	        if(!(_la===30 || _la===31)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalLiteral() {
	    let localctx = new DecimalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, SqlBaseParser.RULE_decimalLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1876;
	        this.match(SqlBaseParser.DECIMAL_VALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerLiteral() {
	    let localctx = new IntegerLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, SqlBaseParser.RULE_integerLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1878;
	        this.match(SqlBaseParser.INTEGER_VALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectKeyValue() {
	    let localctx = new ObjectKeyValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, SqlBaseParser.RULE_objectKeyValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1880;
	        localctx.key = this.ident();
	        this.state = 1881;
	        this.match(SqlBaseParser.EQ);
	        this.state = 1882;
	        localctx.value = this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertSource() {
	    let localctx = new InsertSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, SqlBaseParser.RULE_insertSource);
	    try {
	        this.state = 1889;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 92:
	        case 208:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1884;
	            this.query();
	            break;
	        case 305:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1885;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1886;
	            this.query();
	            this.state = 1887;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onConflict() {
	    let localctx = new OnConflictContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, SqlBaseParser.RULE_onConflict);
	    var _la = 0;
	    try {
	        this.state = 1912;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1891;
	            this.match(SqlBaseParser.ON);
	            this.state = 1892;
	            this.match(SqlBaseParser.CONFLICT);
	            this.state = 1894;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===305) {
	                this.state = 1893;
	                this.conflictTarget();
	            }

	            this.state = 1896;
	            this.match(SqlBaseParser.DO);
	            this.state = 1897;
	            this.match(SqlBaseParser.NOTHING);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1898;
	            this.match(SqlBaseParser.ON);
	            this.state = 1899;
	            this.match(SqlBaseParser.CONFLICT);
	            this.state = 1900;
	            this.conflictTarget();
	            this.state = 1901;
	            this.match(SqlBaseParser.DO);
	            this.state = 1902;
	            this.match(SqlBaseParser.UPDATE);
	            this.state = 1903;
	            this.match(SqlBaseParser.SET);
	            this.state = 1904;
	            this.assignment();
	            this.state = 1909;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 1905;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 1906;
	                this.assignment();
	                this.state = 1911;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conflictTarget() {
	    let localctx = new ConflictTargetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, SqlBaseParser.RULE_conflictTarget);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1914;
	        this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	        this.state = 1915;
	        this.subscriptSafe(0);
	        this.state = 1920;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===303) {
	            this.state = 1916;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 1917;
	            this.subscriptSafe(0);
	            this.state = 1922;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1923;
	        this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values() {
	    let localctx = new ValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, SqlBaseParser.RULE_values);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1925;
	        this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	        this.state = 1926;
	        this.expr();
	        this.state = 1931;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===303) {
	            this.state = 1927;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 1928;
	            this.expr();
	            this.state = 1933;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1934;
	        this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columns() {
	    let localctx = new ColumnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, SqlBaseParser.RULE_columns);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1936;
	        this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	        this.state = 1937;
	        this.primaryExpression(0);
	        this.state = 1942;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===303) {
	            this.state = 1938;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 1939;
	            this.primaryExpression(0);
	            this.state = 1944;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1945;
	        this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, SqlBaseParser.RULE_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1947;
	        this.primaryExpression(0);
	        this.state = 1948;
	        this.match(SqlBaseParser.EQ);
	        this.state = 1949;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createStmt() {
	    let localctx = new CreateStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, SqlBaseParser.RULE_createStmt);
	    var _la = 0;
	    try {
	        this.state = 2171;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1951;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 1952;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 1956;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 1953;
	                this.match(SqlBaseParser.IF);
	                this.state = 1954;
	                this.match(SqlBaseParser.NOT);
	                this.state = 1955;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 1958;
	            this.table();
	            this.state = 1959;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1960;
	            this.tableElement();
	            this.state = 1965;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 1961;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 1962;
	                this.tableElement();
	                this.state = 1967;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1968;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            this.state = 1969;
	            this.partitionedByOrClusteredInto();
	            this.state = 1971;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 1970;
	                this.withProperties();
	            }

	            break;

	        case 2:
	            localctx = new CreateTableAsContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1973;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 1974;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 1975;
	            this.table();
	            this.state = 1976;
	            this.match(SqlBaseParser.AS);
	            this.state = 1977;
	            this.insertSource();
	            break;

	        case 3:
	            localctx = new CreateForeignTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1979;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 1980;
	            this.match(SqlBaseParser.FOREIGN);
	            this.state = 1981;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 1985;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 1982;
	                this.match(SqlBaseParser.IF);
	                this.state = 1983;
	                this.match(SqlBaseParser.NOT);
	                this.state = 1984;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 1987;
	            localctx.tableName = this.qname();
	            this.state = 1988;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 1989;
	            this.tableElement();
	            this.state = 1994;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 1990;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 1991;
	                this.tableElement();
	                this.state = 1996;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1997;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            this.state = 1998;
	            this.match(SqlBaseParser.SERVER);
	            this.state = 1999;
	            localctx.server = this.ident();
	            this.state = 2001;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===278) {
	                this.state = 2000;
	                this.kvOptions();
	            }

	            break;

	        case 4:
	            localctx = new CreateBlobTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2003;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 2004;
	            this.match(SqlBaseParser.BLOB);
	            this.state = 2005;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 2006;
	            this.table();
	            this.state = 2008;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===220) {
	                this.state = 2007;
	                localctx.numShards = this.blobClusteredInto();
	            }

	            this.state = 2011;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 2010;
	                this.withProperties();
	            }

	            break;

	        case 5:
	            localctx = new CreateRepositoryContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2013;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 2014;
	            this.match(SqlBaseParser.REPOSITORY);
	            this.state = 2015;
	            localctx.name = this.ident();
	            this.state = 2016;
	            this.match(SqlBaseParser.TYPE);
	            this.state = 2017;
	            localctx.type = this.ident();
	            this.state = 2019;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 2018;
	                this.withProperties();
	            }

	            break;

	        case 6:
	            localctx = new CreateSnapshotContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2021;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 2022;
	            this.match(SqlBaseParser.SNAPSHOT);
	            this.state = 2023;
	            this.qname();
	            this.state = 2027;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 7:
	                this.state = 2024;
	                this.match(SqlBaseParser.ALL);
	                break;
	            case 97:
	                this.state = 2025;
	                this.match(SqlBaseParser.TABLE);
	                this.state = 2026;
	                this.tableWithPartitions();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2030;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 2029;
	                this.withProperties();
	            }

	            break;

	        case 7:
	            localctx = new CreateAnalyzerContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2032;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 2033;
	            this.match(SqlBaseParser.ANALYZER);
	            this.state = 2034;
	            localctx.name = this.ident();
	            this.state = 2037;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===235) {
	                this.state = 2035;
	                this.match(SqlBaseParser.EXTENDS);
	                this.state = 2036;
	                localctx.extendedName = this.ident();
	            }

	            this.state = 2040;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 2039;
	                this.match(SqlBaseParser.WITH);
	            }

	            this.state = 2042;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 2043;
	            this.analyzerElement();
	            this.state = 2048;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 2044;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 2045;
	                this.analyzerElement();
	                this.state = 2050;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2051;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;

	        case 8:
	            localctx = new CreateFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2053;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 2056;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 2054;
	                this.match(SqlBaseParser.OR);
	                this.state = 2055;
	                this.match(SqlBaseParser.REPLACE);
	            }

	            this.state = 2058;
	            this.match(SqlBaseParser.FUNCTION);
	            this.state = 2059;
	            localctx.name = this.qname();
	            this.state = 2060;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 2069;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 134218834) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 268401739) !== 0) || ((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 4106090497) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 4294966895) !== 0) || ((((_la - 134)) & ~0x1f) === 0 && ((1 << (_la - 134)) & 2852126719) !== 0) || ((((_la - 167)) & ~0x1f) === 0 && ((1 << (_la - 167)) & 3221028543) !== 0) || ((((_la - 202)) & ~0x1f) === 0 && ((1 << (_la - 202)) & 4260249159) !== 0) || ((((_la - 234)) & ~0x1f) === 0 && ((1 << (_la - 234)) & 4294847615) !== 0) || ((((_la - 266)) & ~0x1f) === 0 && ((1 << (_la - 266)) & 65535) !== 0) || ((((_la - 322)) & ~0x1f) === 0 && ((1 << (_la - 322)) & 15) !== 0)) {
	                this.state = 2061;
	                this.functionArgument();
	                this.state = 2066;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===303) {
	                    this.state = 2062;
	                    this.match(SqlBaseParser.COMMA);
	                    this.state = 2063;
	                    this.functionArgument();
	                    this.state = 2068;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 2071;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            this.state = 2072;
	            this.match(SqlBaseParser.RETURNS);
	            this.state = 2073;
	            localctx.returnType = this.dataType(0);
	            this.state = 2074;
	            this.match(SqlBaseParser.LANGUAGE);
	            this.state = 2075;
	            localctx.language = this.parameterOrIdent();
	            this.state = 2076;
	            this.match(SqlBaseParser.AS);
	            this.state = 2077;
	            localctx.body = this.parameterOrString();
	            break;

	        case 9:
	            localctx = new CreateUserMappingContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2079;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 2080;
	            this.match(SqlBaseParser.USER);
	            this.state = 2081;
	            this.match(SqlBaseParser.MAPPING);
	            this.state = 2085;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 2082;
	                this.match(SqlBaseParser.IF);
	                this.state = 2083;
	                this.match(SqlBaseParser.NOT);
	                this.state = 2084;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 2087;
	            this.match(SqlBaseParser.FOR);
	            this.state = 2088;
	            this.mappedUser();
	            this.state = 2089;
	            this.match(SqlBaseParser.SERVER);
	            this.state = 2090;
	            localctx.server = this.ident();
	            this.state = 2092;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===278) {
	                this.state = 2091;
	                this.kvOptions();
	            }

	            break;

	        case 10:
	            localctx = new CreateRoleContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2094;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 2095;
	            _la = this._input.LA(1);
	            if(!(_la===246 || _la===247)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2096;
	            localctx.name = this.ident();
	            this.state = 2110;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 134218834) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 268401739) !== 0) || ((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 4110284801) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 4294966895) !== 0) || ((((_la - 135)) & ~0x1f) === 0 && ((1 << (_la - 135)) & 1426063357) !== 0) || ((((_la - 167)) & ~0x1f) === 0 && ((1 << (_la - 167)) & 3221028543) !== 0) || ((((_la - 202)) & ~0x1f) === 0 && ((1 << (_la - 202)) & 2112765511) !== 0) || ((((_la - 234)) & ~0x1f) === 0 && ((1 << (_la - 234)) & 4294847615) !== 0) || ((((_la - 266)) & ~0x1f) === 0 && ((1 << (_la - 266)) & 65535) !== 0) || ((((_la - 305)) & ~0x1f) === 0 && ((1 << (_la - 305)) & 1966081) !== 0)) {
	                this.state = 2108;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,267,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 2097;
	                    this.withProperties();
	                    break;

	                case 2:
	                    this.state = 2099;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===92) {
	                        this.state = 2098;
	                        this.match(SqlBaseParser.WITH);
	                    }

	                    this.state = 2102;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===305) {
	                        this.state = 2101;
	                        this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	                    }

	                    this.state = 2104;
	                    localctx.options = this.spaceSeparatedIdents();
	                    this.state = 2106;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===306) {
	                        this.state = 2105;
	                        this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	                    }

	                    break;

	                }
	            }

	            break;

	        case 11:
	            localctx = new CreateViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2112;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 2115;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 2113;
	                this.match(SqlBaseParser.OR);
	                this.state = 2114;
	                this.match(SqlBaseParser.REPLACE);
	            }

	            this.state = 2117;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 2118;
	            localctx.name = this.qname();
	            this.state = 2119;
	            this.match(SqlBaseParser.AS);
	            this.state = 2120;
	            this.queryOptParens();
	            break;

	        case 12:
	            localctx = new CreatePublicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2122;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 2123;
	            this.match(SqlBaseParser.PUBLICATION);
	            this.state = 2124;
	            localctx.name = this.ident();
	            this.state = 2144;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
	            if(la_===1) {
	                this.state = 2125;
	                this.match(SqlBaseParser.FOR);
	                this.state = 2126;
	                this.match(SqlBaseParser.ALL);
	                this.state = 2127;
	                this.match(SqlBaseParser.TABLES);

	            } else if(la_===2) {
	                this.state = 2128;
	                this.match(SqlBaseParser.FOR);
	                this.state = 2129;
	                this.match(SqlBaseParser.TABLE);
	                this.state = 2130;
	                this.qname();
	                this.state = 2132;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===295) {
	                    this.state = 2131;
	                    this.match(SqlBaseParser.ASTERISK);
	                }

	                this.state = 2141;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===303) {
	                    this.state = 2134;
	                    this.match(SqlBaseParser.COMMA);
	                    this.state = 2135;
	                    this.qname();
	                    this.state = 2137;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===295) {
	                        this.state = 2136;
	                        this.match(SqlBaseParser.ASTERISK);
	                    }

	                    this.state = 2143;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }

	            }
	            break;

	        case 13:
	            localctx = new CreateSubscriptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2146;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 2147;
	            this.match(SqlBaseParser.SUBSCRIPTION);
	            this.state = 2148;
	            localctx.name = this.ident();
	            this.state = 2149;
	            this.match(SqlBaseParser.CONNECTION);
	            this.state = 2150;
	            localctx.conninfo = this.expr();
	            this.state = 2151;
	            this.match(SqlBaseParser.PUBLICATION);
	            this.state = 2152;
	            localctx.publications = this.idents();
	            this.state = 2154;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 2153;
	                this.withProperties();
	            }

	            break;

	        case 14:
	            localctx = new CreateServerContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2156;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 2157;
	            this.match(SqlBaseParser.SERVER);
	            this.state = 2161;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 2158;
	                this.match(SqlBaseParser.IF);
	                this.state = 2159;
	                this.match(SqlBaseParser.NOT);
	                this.state = 2160;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 2163;
	            localctx.name = this.ident();
	            this.state = 2164;
	            this.match(SqlBaseParser.FOREIGN);
	            this.state = 2165;
	            this.match(SqlBaseParser.DATA);
	            this.state = 2166;
	            this.match(SqlBaseParser.WRAPPER);
	            this.state = 2167;
	            localctx.fdw = this.ident();
	            this.state = 2169;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===278) {
	                this.state = 2168;
	                this.kvOptions();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mappedUser() {
	    let localctx = new MappedUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, SqlBaseParser.RULE_mappedUser);
	    try {
	        this.state = 2177;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	        case 6:
	        case 10:
	        case 27:
	        case 32:
	        case 33:
	        case 35:
	        case 38:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 70:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 93:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 135:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 161:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 198:
	        case 202:
	        case 203:
	        case 204:
	        case 208:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 219:
	        case 220:
	        case 221:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 244:
	        case 245:
	        case 247:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2173;
	            localctx.userName = this.ident();
	            break;
	        case 246:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2174;
	            this.match(SqlBaseParser.USER);
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2175;
	            this.match(SqlBaseParser.CURRENT_ROLE);
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2176;
	            this.match(SqlBaseParser.CURRENT_USER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kvOptions() {
	    let localctx = new KvOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, SqlBaseParser.RULE_kvOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2179;
	        this.match(SqlBaseParser.OPTIONS);
	        this.state = 2180;
	        this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	        this.state = 2181;
	        this.kvOption();
	        this.state = 2186;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===303) {
	            this.state = 2182;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 2183;
	            this.kvOption();
	            this.state = 2188;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2189;
	        this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kvOption() {
	    let localctx = new KvOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, SqlBaseParser.RULE_kvOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2191;
	        this.ident();
	        this.state = 2192;
	        this.parameterOrLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionArgument() {
	    let localctx = new FunctionArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, SqlBaseParser.RULE_functionArgument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2195;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	        if(la_===1) {
	            this.state = 2194;
	            localctx.name = this.ident();

	        }
	        this.state = 2197;
	        localctx.type = this.dataType(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableDefinition() {
	    let localctx = new AlterTableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, SqlBaseParser.RULE_alterTableDefinition);
	    try {
	        this.state = 2202;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableOnlyContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2199;
	            this.match(SqlBaseParser.ONLY);
	            this.state = 2200;
	            this.qname();
	            break;

	        case 2:
	            localctx = new TableWithPartitionDefaultContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2201;
	            this.tableWithPartition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSubscriptionMode() {
	    let localctx = new AlterSubscriptionModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, SqlBaseParser.RULE_alterSubscriptionMode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2204;
	        _la = this._input.LA(1);
	        if(!(_la===259 || _la===260)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionedByOrClusteredInto() {
	    let localctx = new PartitionedByOrClusteredIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, SqlBaseParser.RULE_partitionedByOrClusteredInto);
	    var _la = 0;
	    try {
	        this.state = 2218;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2207;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===239) {
	                this.state = 2206;
	                this.partitionedBy();
	            }

	            this.state = 2210;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===220) {
	                this.state = 2209;
	                this.clusteredBy();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2213;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===220) {
	                this.state = 2212;
	                this.clusteredBy();
	            }

	            this.state = 2216;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===239) {
	                this.state = 2215;
	                this.partitionedBy();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionedBy() {
	    let localctx = new PartitionedByContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, SqlBaseParser.RULE_partitionedBy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2220;
	        this.match(SqlBaseParser.PARTITIONED);
	        this.state = 2221;
	        this.match(SqlBaseParser.BY);
	        this.state = 2222;
	        this.columns();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clusteredBy() {
	    let localctx = new ClusteredByContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, SqlBaseParser.RULE_clusteredBy);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2224;
	        this.match(SqlBaseParser.CLUSTERED);
	        this.state = 2230;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===15) {
	            this.state = 2225;
	            this.match(SqlBaseParser.BY);
	            this.state = 2226;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 2227;
	            localctx.routing = this.primaryExpression(0);
	            this.state = 2228;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	        }

	        this.state = 2236;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===207) {
	            this.state = 2232;
	            this.match(SqlBaseParser.INTO);
	            this.state = 2233;
	            localctx.numShards = this.parameterOrInteger();
	            this.state = 2234;
	            this.match(SqlBaseParser.SHARDS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blobClusteredInto() {
	    let localctx = new BlobClusteredIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, SqlBaseParser.RULE_blobClusteredInto);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2238;
	        this.match(SqlBaseParser.CLUSTERED);
	        this.state = 2239;
	        this.match(SqlBaseParser.INTO);
	        this.state = 2240;
	        localctx.numShards = this.parameterOrInteger();
	        this.state = 2241;
	        this.match(SqlBaseParser.SHARDS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableElement() {
	    let localctx = new TableElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, SqlBaseParser.RULE_tableElement);
	    var _la = 0;
	    try {
	        this.state = 2256;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ColumnDefinitionDefaultContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2243;
	            this.columnDefinition();
	            break;

	        case 2:
	            localctx = new PrimaryKeyConstraintTableLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2244;
	            this.primaryKeyContraint();
	            this.state = 2245;
	            this.columns();
	            break;

	        case 3:
	            localctx = new IndexDefinitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2247;
	            this.match(SqlBaseParser.INDEX);
	            this.state = 2248;
	            localctx.name = this.ident();
	            this.state = 2249;
	            this.match(SqlBaseParser.USING);
	            this.state = 2250;
	            localctx.method = this.ident();
	            this.state = 2251;
	            this.columns();
	            this.state = 2253;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 2252;
	                this.withProperties();
	            }

	            break;

	        case 4:
	            localctx = new TableCheckConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2255;
	            this.checkConstraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnDefinition() {
	    let localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, SqlBaseParser.RULE_columnDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2258;
	        this.ident();
	        this.state = 2260;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
	        if(la_===1) {
	            this.state = 2259;
	            this.dataType(0);

	        }
	        this.state = 2265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 545259552) !== 0) || _la===173 || _la===174 || ((((_la - 218)) & ~0x1f) === 0 && ((1 << (_la - 218)) & 67110417) !== 0)) {
	            this.state = 2262;
	            this.columnConstraint();
	            this.state = 2267;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addColumnDefinition() {
	    let localctx = new AddColumnDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, SqlBaseParser.RULE_addColumnDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2268;
	        this.match(SqlBaseParser.ADD);
	        this.state = 2270;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===110) {
	            this.state = 2269;
	            this.match(SqlBaseParser.COLUMN);
	        }

	        this.state = 2272;
	        this.subscriptSafe(0);
	        this.state = 2274;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
	        if(la_===1) {
	            this.state = 2273;
	            this.dataType(0);

	        }
	        this.state = 2279;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 545259552) !== 0) || _la===173 || _la===174 || ((((_la - 218)) & ~0x1f) === 0 && ((1 << (_la - 218)) & 67110417) !== 0)) {
	            this.state = 2276;
	            this.columnConstraint();
	            this.state = 2281;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropColumnDefinition() {
	    let localctx = new DropColumnDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, SqlBaseParser.RULE_dropColumnDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2282;
	        this.match(SqlBaseParser.DROP);
	        this.state = 2284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===110) {
	            this.state = 2283;
	            this.match(SqlBaseParser.COLUMN);
	        }

	        this.state = 2288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===69) {
	            this.state = 2286;
	            this.match(SqlBaseParser.IF);
	            this.state = 2287;
	            this.match(SqlBaseParser.EXISTS);
	        }

	        this.state = 2290;
	        this.subscriptSafe(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rerouteOption() {
	    let localctx = new RerouteOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, SqlBaseParser.RULE_rerouteOption);
	    var _la = 0;
	    try {
	        this.state = 2324;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 115:
	            localctx = new RerouteMoveShardContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2292;
	            this.match(SqlBaseParser.MOVE);
	            this.state = 2293;
	            this.match(SqlBaseParser.SHARD);
	            this.state = 2294;
	            localctx.shardId = this.parameterOrInteger();
	            this.state = 2295;
	            this.match(SqlBaseParser.FROM);
	            this.state = 2296;
	            localctx.fromNodeId = this.parameterOrString();
	            this.state = 2297;
	            this.match(SqlBaseParser.TO);
	            this.state = 2298;
	            localctx.toNodeId = this.parameterOrString();
	            break;
	        case 117:
	            localctx = new RerouteAllocateReplicaShardContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2300;
	            this.match(SqlBaseParser.ALLOCATE);
	            this.state = 2301;
	            this.match(SqlBaseParser.REPLICA);
	            this.state = 2302;
	            this.match(SqlBaseParser.SHARD);
	            this.state = 2303;
	            localctx.shardId = this.parameterOrInteger();
	            this.state = 2304;
	            this.match(SqlBaseParser.ON);
	            this.state = 2305;
	            localctx.nodeId = this.parameterOrString();
	            break;
	        case 84:
	            localctx = new ReroutePromoteReplicaContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2307;
	            this.match(SqlBaseParser.PROMOTE);
	            this.state = 2308;
	            this.match(SqlBaseParser.REPLICA);
	            this.state = 2309;
	            this.match(SqlBaseParser.SHARD);
	            this.state = 2310;
	            localctx.shardId = this.parameterOrInteger();
	            this.state = 2311;
	            this.match(SqlBaseParser.ON);
	            this.state = 2312;
	            localctx.nodeId = this.parameterOrString();
	            this.state = 2314;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 2313;
	                this.withProperties();
	            }

	            break;
	        case 119:
	            localctx = new RerouteCancelShardContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2316;
	            this.match(SqlBaseParser.CANCEL);
	            this.state = 2317;
	            this.match(SqlBaseParser.SHARD);
	            this.state = 2318;
	            localctx.shardId = this.parameterOrInteger();
	            this.state = 2319;
	            this.match(SqlBaseParser.ON);
	            this.state = 2320;
	            localctx.nodeId = this.parameterOrString();
	            this.state = 2322;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 2321;
	                this.withProperties();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	dataType(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DataTypeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 192;
	    this.enterRecursionRule(localctx, 192, SqlBaseParser.RULE_dataType, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2347;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	        case 6:
	        case 10:
	        case 27:
	        case 32:
	        case 33:
	        case 35:
	        case 38:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 70:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 93:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 161:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 198:
	        case 202:
	        case 203:
	        case 204:
	        case 208:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 219:
	        case 220:
	        case 221:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 244:
	        case 245:
	        case 247:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            localctx = new MaybeParametrizedDataTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 2327;
	            this.baseDataType();
	            this.state = 2339;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
	            if(la_===1) {
	                this.state = 2328;
	                this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	                this.state = 2329;
	                this.integerLiteral();
	                this.state = 2334;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===303) {
	                    this.state = 2330;
	                    this.match(SqlBaseParser.COMMA);
	                    this.state = 2331;
	                    this.integerLiteral();
	                    this.state = 2336;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2337;
	                this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);

	            }
	            break;
	        case 136:
	            localctx = new ObjectDataTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2341;
	            this.objectTypeDefinition();
	            break;
	        case 233:
	            localctx = new ArrayDataTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2342;
	            this.match(SqlBaseParser.ARRAY);
	            this.state = 2343;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 2344;
	            this.dataType(0);
	            this.state = 2345;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2353;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,304,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ArrayDataTypeContext(this, new DataTypeContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_dataType);
	                this.state = 2349;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2350;
	                this.match(SqlBaseParser.EMPTY_SQUARE_BRACKET); 
	            }
	            this.state = 2355;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,304,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	baseDataType() {
	    let localctx = new BaseDataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, SqlBaseParser.RULE_baseDataType);
	    try {
	        this.state = 2358;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,305,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DefinedDataTypeDefaultContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2356;
	            this.definedDataType();
	            break;

	        case 2:
	            localctx = new IdentDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2357;
	            this.ident();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	definedDataType() {
	    let localctx = new DefinedDataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, SqlBaseParser.RULE_definedDataType);
	    try {
	        this.state = 2377;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2360;
	            this.match(SqlBaseParser.DOUBLE);
	            this.state = 2361;
	            this.match(SqlBaseParser.PRECISION);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2362;
	            this.match(SqlBaseParser.TIMESTAMP);
	            this.state = 2363;
	            this.match(SqlBaseParser.WITHOUT);
	            this.state = 2364;
	            this.match(SqlBaseParser.TIME);
	            this.state = 2365;
	            this.match(SqlBaseParser.ZONE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2366;
	            this.match(SqlBaseParser.TIMESTAMP);
	            this.state = 2367;
	            this.match(SqlBaseParser.WITH);
	            this.state = 2368;
	            this.match(SqlBaseParser.TIME);
	            this.state = 2369;
	            this.match(SqlBaseParser.ZONE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2370;
	            this.match(SqlBaseParser.TIME);
	            this.state = 2371;
	            this.match(SqlBaseParser.WITH);
	            this.state = 2372;
	            this.match(SqlBaseParser.TIME);
	            this.state = 2373;
	            this.match(SqlBaseParser.ZONE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2374;
	            this.match(SqlBaseParser.CHARACTER);
	            this.state = 2375;
	            this.match(SqlBaseParser.VARYING);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2376;
	            this.match(SqlBaseParser.CHAR_SPECIAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectTypeDefinition() {
	    let localctx = new ObjectTypeDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, SqlBaseParser.RULE_objectTypeDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2379;
	        this.match(SqlBaseParser.OBJECT);
	        this.state = 2383;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
	        if(la_===1) {
	            this.state = 2380;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 2381;
	            localctx.type = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 230)) & ~0x1f) === 0 && ((1 << (_la - 230)) & 7) !== 0))) {
	                localctx.type = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2382;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);

	        }
	        this.state = 2397;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
	        if(la_===1) {
	            this.state = 2385;
	            this.match(SqlBaseParser.AS);
	            this.state = 2386;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 2387;
	            this.columnDefinition();
	            this.state = 2392;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 2388;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 2389;
	                this.columnDefinition();
	                this.state = 2394;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2395;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnConstraint() {
	    let localctx = new ColumnConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, SqlBaseParser.RULE_columnConstraint);
	    var _la = 0;
	    try {
	        this.state = 2430;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ColumnConstraintPrimaryKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2399;
	            this.primaryKeyContraint();
	            break;

	        case 2:
	            localctx = new ColumnConstraintNotNullContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2400;
	            this.match(SqlBaseParser.NOT);
	            this.state = 2401;
	            this.match(SqlBaseParser.NULL);
	            break;

	        case 3:
	            localctx = new ColumnConstraintNullContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2402;
	            this.match(SqlBaseParser.NULL);
	            break;

	        case 4:
	            localctx = new ColumnIndexConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2403;
	            this.match(SqlBaseParser.INDEX);
	            this.state = 2404;
	            this.match(SqlBaseParser.USING);
	            this.state = 2405;
	            localctx.method = this.ident();
	            this.state = 2407;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 2406;
	                this.withProperties();
	            }

	            break;

	        case 5:
	            localctx = new ColumnIndexOffContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2409;
	            this.match(SqlBaseParser.INDEX);
	            this.state = 2410;
	            this.match(SqlBaseParser.OFF);
	            break;

	        case 6:
	            localctx = new ColumnStorageDefinitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2411;
	            this.match(SqlBaseParser.STORAGE);
	            this.state = 2412;
	            this.withProperties();
	            break;

	        case 7:
	            localctx = new ColumnDefaultConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2415;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===173) {
	                this.state = 2413;
	                this.match(SqlBaseParser.CONSTRAINT);
	                this.state = 2414;
	                localctx.name = this.ident();
	            }

	            this.state = 2417;
	            this.match(SqlBaseParser.DEFAULT);
	            this.state = 2418;
	            localctx.defaultExpr = this.expr();
	            break;

	        case 8:
	            localctx = new ColumnGeneratedConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2421;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===173) {
	                this.state = 2419;
	                this.match(SqlBaseParser.CONSTRAINT);
	                this.state = 2420;
	                localctx.name = this.ident();
	            }

	            this.state = 2425;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===244) {
	                this.state = 2423;
	                this.match(SqlBaseParser.GENERATED);
	                this.state = 2424;
	                this.match(SqlBaseParser.ALWAYS);
	            }

	            this.state = 2427;
	            this.match(SqlBaseParser.AS);
	            this.state = 2428;
	            localctx.generatedExpr = this.expr();
	            break;

	        case 9:
	            localctx = new ColumnCheckConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2429;
	            this.checkConstraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryKeyContraint() {
	    let localctx = new PrimaryKeyContraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, SqlBaseParser.RULE_primaryKeyContraint);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2434;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===173) {
	            this.state = 2432;
	            this.match(SqlBaseParser.CONSTRAINT);
	            this.state = 2433;
	            localctx.name = this.ident();
	        }

	        this.state = 2436;
	        this.match(SqlBaseParser.PRIMARY_KEY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkConstraint() {
	    let localctx = new CheckConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, SqlBaseParser.RULE_checkConstraint);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===173) {
	            this.state = 2438;
	            this.match(SqlBaseParser.CONSTRAINT);
	            this.state = 2439;
	            localctx.name = this.ident();
	        }

	        this.state = 2442;
	        this.match(SqlBaseParser.CHECK);
	        this.state = 2443;
	        this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	        this.state = 2444;
	        localctx.expression = this.booleanExpression(0);
	        this.state = 2445;
	        this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withProperties() {
	    let localctx = new WithPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, SqlBaseParser.RULE_withProperties);
	    try {
	        localctx = new WithGenericPropertiesContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2447;
	        this.match(SqlBaseParser.WITH);
	        this.state = 2448;
	        this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	        this.state = 2449;
	        this.genericProperties();
	        this.state = 2450;
	        this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericProperties() {
	    let localctx = new GenericPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, SqlBaseParser.RULE_genericProperties);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2452;
	        this.genericProperty();
	        this.state = 2457;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===303) {
	            this.state = 2453;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 2454;
	            this.genericProperty();
	            this.state = 2459;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericProperty() {
	    let localctx = new GenericPropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, SqlBaseParser.RULE_genericProperty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2460;
	        this.ident();
	        this.state = 2461;
	        this.match(SqlBaseParser.EQ);
	        this.state = 2462;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explainOptions() {
	    let localctx = new ExplainOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, SqlBaseParser.RULE_explainOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2464;
	        this.match(SqlBaseParser.OPEN_ROUND_BRACKET);

	        this.state = 2465;
	        this.explainOption();
	        this.state = 2470;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===303) {
	            this.state = 2466;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 2467;
	            this.explainOption();
	            this.state = 2472;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2473;
	        this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explainOption() {
	    let localctx = new ExplainOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, SqlBaseParser.RULE_explainOption);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2475;
	        _la = this._input.LA(1);
	        if(!(((((_la - 165)) & ~0x1f) === 0 && ((1 << (_la - 165)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2477;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===30 || _la===31) {
	            this.state = 2476;
	            this.booleanLiteral();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchPredicateIdents() {
	    let localctx = new MatchPredicateIdentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, SqlBaseParser.RULE_matchPredicateIdents);
	    var _la = 0;
	    try {
	        this.state = 2491;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	        case 6:
	        case 10:
	        case 27:
	        case 32:
	        case 33:
	        case 35:
	        case 38:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 70:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 93:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 135:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 161:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 198:
	        case 202:
	        case 203:
	        case 204:
	        case 208:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 219:
	        case 220:
	        case 221:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 244:
	        case 245:
	        case 247:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2479;
	            localctx.matchPred = this.matchPredicateIdent();
	            break;
	        case 305:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2480;
	            this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	            this.state = 2481;
	            this.matchPredicateIdent();
	            this.state = 2486;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===303) {
	                this.state = 2482;
	                this.match(SqlBaseParser.COMMA);
	                this.state = 2483;
	                this.matchPredicateIdent();
	                this.state = 2488;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2489;
	            this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchPredicateIdent() {
	    let localctx = new MatchPredicateIdentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, SqlBaseParser.RULE_matchPredicateIdent);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2493;
	        this.subscriptSafe(0);
	        this.state = 2495;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3758096384) !== 0) || _la===70 || ((((_la - 312)) & ~0x1f) === 0 && ((1 << (_la - 312)) & 17379) !== 0)) {
	            this.state = 2494;
	            localctx.boost = this.parameterOrSimpleLiteral();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyzerElement() {
	    let localctx = new AnalyzerElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, SqlBaseParser.RULE_analyzerElement);
	    try {
	        this.state = 2501;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,323,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2497;
	            this.tokenizer();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2498;
	            this.tokenFilters();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2499;
	            this.charFilters();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2500;
	            this.genericProperty();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tokenizer() {
	    let localctx = new TokenizerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, SqlBaseParser.RULE_tokenizer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2503;
	        this.match(SqlBaseParser.TOKENIZER);
	        this.state = 2504;
	        this.namedProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tokenFilters() {
	    let localctx = new TokenFiltersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, SqlBaseParser.RULE_tokenFilters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2506;
	        this.match(SqlBaseParser.TOKEN_FILTERS);
	        this.state = 2507;
	        this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	        this.state = 2508;
	        this.namedProperties();
	        this.state = 2513;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===303) {
	            this.state = 2509;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 2510;
	            this.namedProperties();
	            this.state = 2515;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2516;
	        this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charFilters() {
	    let localctx = new CharFiltersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, SqlBaseParser.RULE_charFilters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2518;
	        this.match(SqlBaseParser.CHAR_FILTERS);
	        this.state = 2519;
	        this.match(SqlBaseParser.OPEN_ROUND_BRACKET);
	        this.state = 2520;
	        this.namedProperties();
	        this.state = 2525;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===303) {
	            this.state = 2521;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 2522;
	            this.namedProperties();
	            this.state = 2527;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2528;
	        this.match(SqlBaseParser.CLOSE_ROUND_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedProperties() {
	    let localctx = new NamedPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, SqlBaseParser.RULE_namedProperties);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2530;
	        this.ident();
	        this.state = 2532;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===92) {
	            this.state = 2531;
	            this.withProperties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableWithPartitions() {
	    let localctx = new TableWithPartitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, SqlBaseParser.RULE_tableWithPartitions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2534;
	        this.tableWithPartition();
	        this.state = 2539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===303) {
	            this.state = 2535;
	            this.match(SqlBaseParser.COMMA);
	            this.state = 2536;
	            this.tableWithPartition();
	            this.state = 2541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setGlobalAssignment() {
	    let localctx = new SetGlobalAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, SqlBaseParser.RULE_setGlobalAssignment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2542;
	        localctx.name = this.primaryExpression(0);
	        this.state = 2543;
	        _la = this._input.LA(1);
	        if(!(_la===4 || _la===282)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2544;
	        localctx.value = this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setExpr() {
	    let localctx = new SetExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, SqlBaseParser.RULE_setExpr);
	    try {
	        this.state = 2551;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 317:
	        case 326:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2546;
	            this.stringLiteral();
	            break;
	        case 30:
	        case 31:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2547;
	            this.booleanLiteral();
	            break;
	        case 320:
	        case 321:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2548;
	            this.numericLiteral();
	            break;
	        case 1:
	        case 4:
	        case 6:
	        case 10:
	        case 27:
	        case 32:
	        case 33:
	        case 35:
	        case 38:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 70:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 93:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 107:
	        case 108:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 135:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 161:
	        case 163:
	        case 165:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 174:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 198:
	        case 202:
	        case 203:
	        case 204:
	        case 208:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 219:
	        case 220:
	        case 221:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 244:
	        case 245:
	        case 247:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2549;
	            this.ident();
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2550;
	            this.on();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	on() {
	    let localctx = new OnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, SqlBaseParser.RULE_on);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2553;
	        this.match(SqlBaseParser.ON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	securable() {
	    let localctx = new SecurableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, SqlBaseParser.RULE_securable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2555;
	        _la = this._input.LA(1);
	        if(!(_la===97 || _la===193 || _la===252)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionMode() {
	    let localctx = new TransactionModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, SqlBaseParser.RULE_transactionMode);
	    var _la = 0;
	    try {
	        this.state = 2570;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 150:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2557;
	            this.match(SqlBaseParser.ISOLATION);
	            this.state = 2558;
	            this.match(SqlBaseParser.LEVEL);
	            this.state = 2559;
	            this.isolationLevel();
	            break;
	        case 156:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2564;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2560;
	                this.match(SqlBaseParser.READ);
	                this.state = 2561;
	                this.match(SqlBaseParser.WRITE);
	                break;

	            case 2:
	                this.state = 2562;
	                this.match(SqlBaseParser.READ);
	                this.state = 2563;
	                this.match(SqlBaseParser.ONLY);
	                break;

	            }
	            break;
	        case 23:
	        case 158:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2567;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23) {
	                this.state = 2566;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 2569;
	            this.match(SqlBaseParser.DEFERRABLE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isolationLevel() {
	    let localctx = new IsolationLevelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, SqlBaseParser.RULE_isolationLevel);
	    try {
	        this.state = 2579;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,332,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2572;
	            this.match(SqlBaseParser.SERIALIZABLE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2573;
	            this.match(SqlBaseParser.REPEATABLE);
	            this.state = 2574;
	            this.match(SqlBaseParser.READ);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2575;
	            this.match(SqlBaseParser.READ);
	            this.state = 2576;
	            this.match(SqlBaseParser.COMMITTED);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2577;
	            this.match(SqlBaseParser.READ);
	            this.state = 2578;
	            this.match(SqlBaseParser.UNCOMMITTED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	direction() {
	    let localctx = new DirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, SqlBaseParser.RULE_direction);
	    var _la = 0;
	    try {
	        this.state = 2604;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2581;
	            this.match(SqlBaseParser.NEXT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2582;
	            this.match(SqlBaseParser.PRIOR);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2583;
	            this.match(SqlBaseParser.FIRST);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2584;
	            this.match(SqlBaseParser.LAST);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2585;
	            this.match(SqlBaseParser.ABSOLUTE);
	            this.state = 2586;
	            this.integerLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2587;
	            this.match(SqlBaseParser.RELATIVE);
	            this.state = 2589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===294) {
	                this.state = 2588;
	                this.match(SqlBaseParser.MINUS);
	            }

	            this.state = 2591;
	            this.integerLiteral();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2592;
	            this.integerLiteral();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2593;
	            this.match(SqlBaseParser.ALL);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2594;
	            this.match(SqlBaseParser.FORWARD);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2595;
	            this.match(SqlBaseParser.FORWARD);
	            this.state = 2596;
	            this.integerLiteral();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2597;
	            this.match(SqlBaseParser.FORWARD);
	            this.state = 2598;
	            this.match(SqlBaseParser.ALL);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2599;
	            this.match(SqlBaseParser.BACKWARD);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2600;
	            this.match(SqlBaseParser.BACKWARD);
	            this.state = 2601;
	            this.integerLiteral();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2602;
	            this.match(SqlBaseParser.BACKWARD);
	            this.state = 2603;
	            this.match(SqlBaseParser.ALL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareCursorParams() {
	    let localctx = new DeclareCursorParamsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, SqlBaseParser.RULE_declareCursorParams);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2615;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 263)) & ~0x1f) === 0 && ((1 << (_la - 263)) & 31) !== 0)) {
	            this.state = 2613;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 263:
	                this.state = 2606;
	                this.match(SqlBaseParser.ASENSITIVE);
	                break;
	            case 265:
	                this.state = 2607;
	                this.match(SqlBaseParser.BINARY);
	                break;
	            case 264:
	                this.state = 2608;
	                this.match(SqlBaseParser.INSENSITIVE);
	                break;
	            case 266:
	            case 267:
	                this.state = 2610;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===266) {
	                    this.state = 2609;
	                    this.match(SqlBaseParser.NO);
	                }

	                this.state = 2612;
	                this.match(SqlBaseParser.SCROLL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2617;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonReserved() {
	    let localctx = new NonReservedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, SqlBaseParser.RULE_nonReserved);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2618;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 134218834) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 268401739) !== 0) || ((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 4106090497) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 4294966895) !== 0) || ((((_la - 135)) & ~0x1f) === 0 && ((1 << (_la - 135)) & 1426063357) !== 0) || ((((_la - 167)) & ~0x1f) === 0 && ((1 << (_la - 167)) & 3221028543) !== 0) || ((((_la - 202)) & ~0x1f) === 0 && ((1 << (_la - 202)) & 2112765511) !== 0) || ((((_la - 234)) & ~0x1f) === 0 && ((1 << (_la - 234)) & 4294847615) !== 0) || ((((_la - 266)) & ~0x1f) === 0 && ((1 << (_la - 266)) & 65535) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SqlBaseParser.EOF = antlr4.Token.EOF;
SqlBaseParser.AUTHORIZATION = 1;
SqlBaseParser.SELECT = 2;
SqlBaseParser.FROM = 3;
SqlBaseParser.TO = 4;
SqlBaseParser.AS = 5;
SqlBaseParser.AT = 6;
SqlBaseParser.ALL = 7;
SqlBaseParser.ANY = 8;
SqlBaseParser.SOME = 9;
SqlBaseParser.DEALLOCATE = 10;
SqlBaseParser.DIRECTORY = 11;
SqlBaseParser.DISTINCT = 12;
SqlBaseParser.WHERE = 13;
SqlBaseParser.GROUP = 14;
SqlBaseParser.BY = 15;
SqlBaseParser.ORDER = 16;
SqlBaseParser.HAVING = 17;
SqlBaseParser.LIMIT = 18;
SqlBaseParser.OFFSET = 19;
SqlBaseParser.OR = 20;
SqlBaseParser.AND = 21;
SqlBaseParser.IN = 22;
SqlBaseParser.NOT = 23;
SqlBaseParser.EXISTS = 24;
SqlBaseParser.BETWEEN = 25;
SqlBaseParser.LIKE = 26;
SqlBaseParser.ILIKE = 27;
SqlBaseParser.IS = 28;
SqlBaseParser.NULL = 29;
SqlBaseParser.TRUE = 30;
SqlBaseParser.FALSE = 31;
SqlBaseParser.IGNORE = 32;
SqlBaseParser.RESPECT = 33;
SqlBaseParser.NULLS = 34;
SqlBaseParser.FETCH = 35;
SqlBaseParser.FIRST = 36;
SqlBaseParser.LAST = 37;
SqlBaseParser.NEXT = 38;
SqlBaseParser.ESCAPE = 39;
SqlBaseParser.ASC = 40;
SqlBaseParser.DESC = 41;
SqlBaseParser.SUBSTRING = 42;
SqlBaseParser.TRIM = 43;
SqlBaseParser.LEADING = 44;
SqlBaseParser.TRAILING = 45;
SqlBaseParser.BOTH = 46;
SqlBaseParser.FOR = 47;
SqlBaseParser.TIME = 48;
SqlBaseParser.ZONE = 49;
SqlBaseParser.YEAR = 50;
SqlBaseParser.MONTH = 51;
SqlBaseParser.DAY = 52;
SqlBaseParser.HOUR = 53;
SqlBaseParser.MINUTE = 54;
SqlBaseParser.SECOND = 55;
SqlBaseParser.CURRENT_DATE = 56;
SqlBaseParser.CURRENT_TIME = 57;
SqlBaseParser.CURRENT_TIMESTAMP = 58;
SqlBaseParser.CURRENT_SCHEMA = 59;
SqlBaseParser.CURRENT_USER = 60;
SqlBaseParser.CURRENT_ROLE = 61;
SqlBaseParser.SESSION_USER = 62;
SqlBaseParser.EXTRACT = 63;
SqlBaseParser.CASE = 64;
SqlBaseParser.WHEN = 65;
SqlBaseParser.THEN = 66;
SqlBaseParser.ELSE = 67;
SqlBaseParser.END = 68;
SqlBaseParser.IF = 69;
SqlBaseParser.INTERVAL = 70;
SqlBaseParser.JOIN = 71;
SqlBaseParser.CROSS = 72;
SqlBaseParser.OUTER = 73;
SqlBaseParser.INNER = 74;
SqlBaseParser.LEFT = 75;
SqlBaseParser.RIGHT = 76;
SqlBaseParser.FULL = 77;
SqlBaseParser.NATURAL = 78;
SqlBaseParser.USING = 79;
SqlBaseParser.ON = 80;
SqlBaseParser.OVER = 81;
SqlBaseParser.WINDOW = 82;
SqlBaseParser.PARTITION = 83;
SqlBaseParser.PROMOTE = 84;
SqlBaseParser.RANGE = 85;
SqlBaseParser.ROWS = 86;
SqlBaseParser.UNBOUNDED = 87;
SqlBaseParser.PRECEDING = 88;
SqlBaseParser.FOLLOWING = 89;
SqlBaseParser.CURRENT = 90;
SqlBaseParser.ROW = 91;
SqlBaseParser.WITH = 92;
SqlBaseParser.WITHOUT = 93;
SqlBaseParser.RECURSIVE = 94;
SqlBaseParser.CREATE = 95;
SqlBaseParser.BLOB = 96;
SqlBaseParser.TABLE = 97;
SqlBaseParser.SWAP = 98;
SqlBaseParser.GC = 99;
SqlBaseParser.DANGLING = 100;
SqlBaseParser.ARTIFACTS = 101;
SqlBaseParser.DECOMMISSION = 102;
SqlBaseParser.CLUSTER = 103;
SqlBaseParser.REPOSITORY = 104;
SqlBaseParser.SNAPSHOT = 105;
SqlBaseParser.ALTER = 106;
SqlBaseParser.KILL = 107;
SqlBaseParser.ONLY = 108;
SqlBaseParser.ADD = 109;
SqlBaseParser.COLUMN = 110;
SqlBaseParser.OPEN = 111;
SqlBaseParser.CLOSE = 112;
SqlBaseParser.RENAME = 113;
SqlBaseParser.REROUTE = 114;
SqlBaseParser.MOVE = 115;
SqlBaseParser.SHARD = 116;
SqlBaseParser.ALLOCATE = 117;
SqlBaseParser.REPLICA = 118;
SqlBaseParser.CANCEL = 119;
SqlBaseParser.RETRY = 120;
SqlBaseParser.FAILED = 121;
SqlBaseParser.BOOLEAN = 122;
SqlBaseParser.BYTE = 123;
SqlBaseParser.SHORT = 124;
SqlBaseParser.INTEGER = 125;
SqlBaseParser.INT = 126;
SqlBaseParser.LONG = 127;
SqlBaseParser.FLOAT = 128;
SqlBaseParser.DOUBLE = 129;
SqlBaseParser.PRECISION = 130;
SqlBaseParser.TIMESTAMP = 131;
SqlBaseParser.IP = 132;
SqlBaseParser.CHARACTER = 133;
SqlBaseParser.CHAR_SPECIAL = 134;
SqlBaseParser.VARYING = 135;
SqlBaseParser.OBJECT = 136;
SqlBaseParser.STRING_TYPE = 137;
SqlBaseParser.GEO_POINT = 138;
SqlBaseParser.GEO_SHAPE = 139;
SqlBaseParser.GLOBAL = 140;
SqlBaseParser.SESSION = 141;
SqlBaseParser.LOCAL = 142;
SqlBaseParser.BEGIN = 143;
SqlBaseParser.START = 144;
SqlBaseParser.COMMIT = 145;
SqlBaseParser.WORK = 146;
SqlBaseParser.TRANSACTION = 147;
SqlBaseParser.TRANSACTION_ISOLATION = 148;
SqlBaseParser.CHARACTERISTICS = 149;
SqlBaseParser.ISOLATION = 150;
SqlBaseParser.LEVEL = 151;
SqlBaseParser.SERIALIZABLE = 152;
SqlBaseParser.REPEATABLE = 153;
SqlBaseParser.COMMITTED = 154;
SqlBaseParser.UNCOMMITTED = 155;
SqlBaseParser.READ = 156;
SqlBaseParser.WRITE = 157;
SqlBaseParser.DEFERRABLE = 158;
SqlBaseParser.RETURNS = 159;
SqlBaseParser.CALLED = 160;
SqlBaseParser.REPLACE = 161;
SqlBaseParser.FUNCTION = 162;
SqlBaseParser.LANGUAGE = 163;
SqlBaseParser.INPUT = 164;
SqlBaseParser.ANALYZE = 165;
SqlBaseParser.COSTS = 166;
SqlBaseParser.VERBOSE = 167;
SqlBaseParser.DISCARD = 168;
SqlBaseParser.PLANS = 169;
SqlBaseParser.SEQUENCES = 170;
SqlBaseParser.TEMPORARY = 171;
SqlBaseParser.TEMP = 172;
SqlBaseParser.CONSTRAINT = 173;
SqlBaseParser.CHECK = 174;
SqlBaseParser.DESCRIBE = 175;
SqlBaseParser.EXPLAIN = 176;
SqlBaseParser.FORMAT = 177;
SqlBaseParser.TYPE = 178;
SqlBaseParser.TEXT = 179;
SqlBaseParser.GRAPHVIZ = 180;
SqlBaseParser.LOGICAL = 181;
SqlBaseParser.DISTRIBUTED = 182;
SqlBaseParser.CAST = 183;
SqlBaseParser.TRY_CAST = 184;
SqlBaseParser.SHOW = 185;
SqlBaseParser.TABLES = 186;
SqlBaseParser.SCHEMAS = 187;
SqlBaseParser.CATALOGS = 188;
SqlBaseParser.COLUMNS = 189;
SqlBaseParser.PARTITIONS = 190;
SqlBaseParser.FUNCTIONS = 191;
SqlBaseParser.MATERIALIZED = 192;
SqlBaseParser.VIEW = 193;
SqlBaseParser.OPTIMIZE = 194;
SqlBaseParser.REFRESH = 195;
SqlBaseParser.RESTORE = 196;
SqlBaseParser.DROP = 197;
SqlBaseParser.ALIAS = 198;
SqlBaseParser.UNION = 199;
SqlBaseParser.EXCEPT = 200;
SqlBaseParser.INTERSECT = 201;
SqlBaseParser.SYSTEM = 202;
SqlBaseParser.BERNOULLI = 203;
SqlBaseParser.TABLESAMPLE = 204;
SqlBaseParser.STRATIFY = 205;
SqlBaseParser.INSERT = 206;
SqlBaseParser.INTO = 207;
SqlBaseParser.VALUES = 208;
SqlBaseParser.DELETE = 209;
SqlBaseParser.UPDATE = 210;
SqlBaseParser.KEY = 211;
SqlBaseParser.DUPLICATE = 212;
SqlBaseParser.CONFLICT = 213;
SqlBaseParser.DO = 214;
SqlBaseParser.NOTHING = 215;
SqlBaseParser.SET = 216;
SqlBaseParser.RESET = 217;
SqlBaseParser.DEFAULT = 218;
SqlBaseParser.COPY = 219;
SqlBaseParser.CLUSTERED = 220;
SqlBaseParser.SHARDS = 221;
SqlBaseParser.PRIMARY_KEY = 222;
SqlBaseParser.OFF = 223;
SqlBaseParser.FULLTEXT = 224;
SqlBaseParser.FILTER = 225;
SqlBaseParser.PLAIN = 226;
SqlBaseParser.INDEX = 227;
SqlBaseParser.STORAGE = 228;
SqlBaseParser.RETURNING = 229;
SqlBaseParser.DYNAMIC = 230;
SqlBaseParser.STRICT = 231;
SqlBaseParser.IGNORED = 232;
SqlBaseParser.ARRAY = 233;
SqlBaseParser.ANALYZER = 234;
SqlBaseParser.EXTENDS = 235;
SqlBaseParser.TOKENIZER = 236;
SqlBaseParser.TOKEN_FILTERS = 237;
SqlBaseParser.CHAR_FILTERS = 238;
SqlBaseParser.PARTITIONED = 239;
SqlBaseParser.PREPARE = 240;
SqlBaseParser.TRANSIENT = 241;
SqlBaseParser.PERSISTENT = 242;
SqlBaseParser.MATCH = 243;
SqlBaseParser.GENERATED = 244;
SqlBaseParser.ALWAYS = 245;
SqlBaseParser.USER = 246;
SqlBaseParser.ROLE = 247;
SqlBaseParser.GRANT = 248;
SqlBaseParser.DENY = 249;
SqlBaseParser.REVOKE = 250;
SqlBaseParser.PRIVILEGES = 251;
SqlBaseParser.SCHEMA = 252;
SqlBaseParser.RETURN = 253;
SqlBaseParser.SUMMARY = 254;
SqlBaseParser.METADATA = 255;
SqlBaseParser.PUBLICATION = 256;
SqlBaseParser.SUBSCRIPTION = 257;
SqlBaseParser.CONNECTION = 258;
SqlBaseParser.ENABLE = 259;
SqlBaseParser.DISABLE = 260;
SqlBaseParser.DECLARE = 261;
SqlBaseParser.CURSOR = 262;
SqlBaseParser.ASENSITIVE = 263;
SqlBaseParser.INSENSITIVE = 264;
SqlBaseParser.BINARY = 265;
SqlBaseParser.NO = 266;
SqlBaseParser.SCROLL = 267;
SqlBaseParser.HOLD = 268;
SqlBaseParser.ABSOLUTE = 269;
SqlBaseParser.FORWARD = 270;
SqlBaseParser.BACKWARD = 271;
SqlBaseParser.RELATIVE = 272;
SqlBaseParser.PRIOR = 273;
SqlBaseParser.SERVER = 274;
SqlBaseParser.FOREIGN = 275;
SqlBaseParser.DATA = 276;
SqlBaseParser.WRAPPER = 277;
SqlBaseParser.OPTIONS = 278;
SqlBaseParser.MAPPING = 279;
SqlBaseParser.CASCADE = 280;
SqlBaseParser.RESTRICT = 281;
SqlBaseParser.EQ = 282;
SqlBaseParser.NEQ = 283;
SqlBaseParser.LT = 284;
SqlBaseParser.LTE = 285;
SqlBaseParser.GT = 286;
SqlBaseParser.GTE = 287;
SqlBaseParser.LLT = 288;
SqlBaseParser.REGEX_MATCH = 289;
SqlBaseParser.REGEX_NO_MATCH = 290;
SqlBaseParser.REGEX_MATCH_CI = 291;
SqlBaseParser.REGEX_NO_MATCH_CI = 292;
SqlBaseParser.PLUS = 293;
SqlBaseParser.MINUS = 294;
SqlBaseParser.ASTERISK = 295;
SqlBaseParser.CARET = 296;
SqlBaseParser.SLASH = 297;
SqlBaseParser.PERCENT = 298;
SqlBaseParser.CONCAT = 299;
SqlBaseParser.CAST_OPERATOR = 300;
SqlBaseParser.SEMICOLON = 301;
SqlBaseParser.COLON = 302;
SqlBaseParser.COMMA = 303;
SqlBaseParser.DOT = 304;
SqlBaseParser.OPEN_ROUND_BRACKET = 305;
SqlBaseParser.CLOSE_ROUND_BRACKET = 306;
SqlBaseParser.OPEN_CURLY_BRACKET = 307;
SqlBaseParser.CLOSE_CURLY_BRACKET = 308;
SqlBaseParser.OPEN_SQUARE_BRACKET = 309;
SqlBaseParser.CLOSE_SQUARE_BRACKET = 310;
SqlBaseParser.EMPTY_SQUARE_BRACKET = 311;
SqlBaseParser.QUESTION = 312;
SqlBaseParser.DOLLAR = 313;
SqlBaseParser.BITWISE_AND = 314;
SqlBaseParser.BITWISE_OR = 315;
SqlBaseParser.BITWISE_XOR = 316;
SqlBaseParser.STRING = 317;
SqlBaseParser.ESCAPED_STRING = 318;
SqlBaseParser.BIT_STRING = 319;
SqlBaseParser.INTEGER_VALUE = 320;
SqlBaseParser.DECIMAL_VALUE = 321;
SqlBaseParser.IDENTIFIER = 322;
SqlBaseParser.DIGIT_IDENTIFIER = 323;
SqlBaseParser.QUOTED_IDENTIFIER = 324;
SqlBaseParser.BACKQUOTED_IDENTIFIER = 325;
SqlBaseParser.BEGIN_DOLLAR_QUOTED_STRING = 326;
SqlBaseParser.COMMENT = 327;
SqlBaseParser.WS = 328;
SqlBaseParser.UNRECOGNIZED = 329;
SqlBaseParser.DOLLAR_QUOTED_STRING_BODY = 330;
SqlBaseParser.END_DOLLAR_QUOTED_STRING = 331;

SqlBaseParser.RULE_statements = 0;
SqlBaseParser.RULE_singleStatement = 1;
SqlBaseParser.RULE_singleExpression = 2;
SqlBaseParser.RULE_statement = 3;
SqlBaseParser.RULE_dropStmt = 4;
SqlBaseParser.RULE_alterStmt = 5;
SqlBaseParser.RULE_queryOptParens = 6;
SqlBaseParser.RULE_query = 7;
SqlBaseParser.RULE_queryNoWith = 8;
SqlBaseParser.RULE_limitClause = 9;
SqlBaseParser.RULE_offsetClause = 10;
SqlBaseParser.RULE_queryTerm = 11;
SqlBaseParser.RULE_setQuant = 12;
SqlBaseParser.RULE_sortItem = 13;
SqlBaseParser.RULE_querySpec = 14;
SqlBaseParser.RULE_selectItem = 15;
SqlBaseParser.RULE_where = 16;
SqlBaseParser.RULE_returning = 17;
SqlBaseParser.RULE_filter = 18;
SqlBaseParser.RULE_relation = 19;
SqlBaseParser.RULE_joinType = 20;
SqlBaseParser.RULE_joinCriteria = 21;
SqlBaseParser.RULE_aliasedRelation = 22;
SqlBaseParser.RULE_relationPrimary = 23;
SqlBaseParser.RULE_tableWithPartition = 24;
SqlBaseParser.RULE_table = 25;
SqlBaseParser.RULE_aliasedColumns = 26;
SqlBaseParser.RULE_with = 27;
SqlBaseParser.RULE_namedQuery = 28;
SqlBaseParser.RULE_expr = 29;
SqlBaseParser.RULE_booleanExpression = 30;
SqlBaseParser.RULE_predicated = 31;
SqlBaseParser.RULE_predicate = 32;
SqlBaseParser.RULE_valueExpression = 33;
SqlBaseParser.RULE_primaryExpression = 34;
SqlBaseParser.RULE_explicitFunction = 35;
SqlBaseParser.RULE_subqueryExpression = 36;
SqlBaseParser.RULE_parameterOrLiteral = 37;
SqlBaseParser.RULE_parameterOrSimpleLiteral = 38;
SqlBaseParser.RULE_parameterOrInteger = 39;
SqlBaseParser.RULE_parameterOrIdent = 40;
SqlBaseParser.RULE_parameterOrString = 41;
SqlBaseParser.RULE_parameterExpr = 42;
SqlBaseParser.RULE_nullLiteral = 43;
SqlBaseParser.RULE_escapedCharsStringLiteral = 44;
SqlBaseParser.RULE_dollarQuotedStringLiteral = 45;
SqlBaseParser.RULE_stringLiteral = 46;
SqlBaseParser.RULE_bitString = 47;
SqlBaseParser.RULE_subscriptSafe = 48;
SqlBaseParser.RULE_cmpOp = 49;
SqlBaseParser.RULE_setCmpQuantifier = 50;
SqlBaseParser.RULE_whenClause = 51;
SqlBaseParser.RULE_namedWindow = 52;
SqlBaseParser.RULE_over = 53;
SqlBaseParser.RULE_windowDefinition = 54;
SqlBaseParser.RULE_windowFrame = 55;
SqlBaseParser.RULE_frameBound = 56;
SqlBaseParser.RULE_qnames = 57;
SqlBaseParser.RULE_qname = 58;
SqlBaseParser.RULE_spaceSeparatedIdents = 59;
SqlBaseParser.RULE_identWithOrWithoutValue = 60;
SqlBaseParser.RULE_idents = 61;
SqlBaseParser.RULE_ident = 62;
SqlBaseParser.RULE_unquotedIdent = 63;
SqlBaseParser.RULE_quotedIdent = 64;
SqlBaseParser.RULE_stringLiteralOrIdentifier = 65;
SqlBaseParser.RULE_stringLiteralOrIdentifierOrQname = 66;
SqlBaseParser.RULE_numericLiteral = 67;
SqlBaseParser.RULE_intervalLiteral = 68;
SqlBaseParser.RULE_intervalField = 69;
SqlBaseParser.RULE_booleanLiteral = 70;
SqlBaseParser.RULE_decimalLiteral = 71;
SqlBaseParser.RULE_integerLiteral = 72;
SqlBaseParser.RULE_objectKeyValue = 73;
SqlBaseParser.RULE_insertSource = 74;
SqlBaseParser.RULE_onConflict = 75;
SqlBaseParser.RULE_conflictTarget = 76;
SqlBaseParser.RULE_values = 77;
SqlBaseParser.RULE_columns = 78;
SqlBaseParser.RULE_assignment = 79;
SqlBaseParser.RULE_createStmt = 80;
SqlBaseParser.RULE_mappedUser = 81;
SqlBaseParser.RULE_kvOptions = 82;
SqlBaseParser.RULE_kvOption = 83;
SqlBaseParser.RULE_functionArgument = 84;
SqlBaseParser.RULE_alterTableDefinition = 85;
SqlBaseParser.RULE_alterSubscriptionMode = 86;
SqlBaseParser.RULE_partitionedByOrClusteredInto = 87;
SqlBaseParser.RULE_partitionedBy = 88;
SqlBaseParser.RULE_clusteredBy = 89;
SqlBaseParser.RULE_blobClusteredInto = 90;
SqlBaseParser.RULE_tableElement = 91;
SqlBaseParser.RULE_columnDefinition = 92;
SqlBaseParser.RULE_addColumnDefinition = 93;
SqlBaseParser.RULE_dropColumnDefinition = 94;
SqlBaseParser.RULE_rerouteOption = 95;
SqlBaseParser.RULE_dataType = 96;
SqlBaseParser.RULE_baseDataType = 97;
SqlBaseParser.RULE_definedDataType = 98;
SqlBaseParser.RULE_objectTypeDefinition = 99;
SqlBaseParser.RULE_columnConstraint = 100;
SqlBaseParser.RULE_primaryKeyContraint = 101;
SqlBaseParser.RULE_checkConstraint = 102;
SqlBaseParser.RULE_withProperties = 103;
SqlBaseParser.RULE_genericProperties = 104;
SqlBaseParser.RULE_genericProperty = 105;
SqlBaseParser.RULE_explainOptions = 106;
SqlBaseParser.RULE_explainOption = 107;
SqlBaseParser.RULE_matchPredicateIdents = 108;
SqlBaseParser.RULE_matchPredicateIdent = 109;
SqlBaseParser.RULE_analyzerElement = 110;
SqlBaseParser.RULE_tokenizer = 111;
SqlBaseParser.RULE_tokenFilters = 112;
SqlBaseParser.RULE_charFilters = 113;
SqlBaseParser.RULE_namedProperties = 114;
SqlBaseParser.RULE_tableWithPartitions = 115;
SqlBaseParser.RULE_setGlobalAssignment = 116;
SqlBaseParser.RULE_setExpr = 117;
SqlBaseParser.RULE_on = 118;
SqlBaseParser.RULE_securable = 119;
SqlBaseParser.RULE_transactionMode = 120;
SqlBaseParser.RULE_isolationLevel = 121;
SqlBaseParser.RULE_direction = 122;
SqlBaseParser.RULE_declareCursorParams = 123;
SqlBaseParser.RULE_nonReserved = 124;

class StatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_statements;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.SEMICOLON);
	    } else {
	        return this.getToken(SqlBaseParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitStatements(this);
		}
	}


}



class SingleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_singleStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	SEMICOLON() {
	    return this.getToken(SqlBaseParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSingleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSingleStatement(this);
		}
	}


}



class SingleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_singleExpression;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSingleExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSingleExpression(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExplainContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXPLAIN() {
	    return this.getToken(SqlBaseParser.EXPLAIN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	ANALYZE() {
	    return this.getToken(SqlBaseParser.ANALYZE, 0);
	};

	VERBOSE() {
	    return this.getToken(SqlBaseParser.VERBOSE, 0);
	};

	explainOptions = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExplainOptionsContext);
	    } else {
	        return this.getTypedRuleContext(ExplainOptionsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterExplain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitExplain(this);
		}
	}


}

SqlBaseParser.ExplainContext = ExplainContext;

class SetTransactionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	TRANSACTION() {
	    return this.getToken(SqlBaseParser.TRANSACTION, 0);
	};

	transactionMode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionModeContext);
	    } else {
	        return this.getTypedRuleContext(TransactionModeContext,i);
	    }
	};

	SESSION() {
	    return this.getToken(SqlBaseParser.SESSION, 0);
	};

	CHARACTERISTICS() {
	    return this.getToken(SqlBaseParser.CHARACTERISTICS, 0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSetTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSetTransaction(this);
		}
	}


}

SqlBaseParser.SetTransactionContext = SetTransactionContext;

class DropContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	dropStmt() {
	    return this.getTypedRuleContext(DropStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDrop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDrop(this);
		}
	}


}

SqlBaseParser.DropContext = DropContext;

class DiscardContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DISCARD() {
	    return this.getToken(SqlBaseParser.DISCARD, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	PLANS() {
	    return this.getToken(SqlBaseParser.PLANS, 0);
	};

	SEQUENCES() {
	    return this.getToken(SqlBaseParser.SEQUENCES, 0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	TEMP() {
	    return this.getToken(SqlBaseParser.TEMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDiscard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDiscard(this);
		}
	}


}

SqlBaseParser.DiscardContext = DiscardContext;

class StartTransactionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	START() {
	    return this.getToken(SqlBaseParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(SqlBaseParser.TRANSACTION, 0);
	};

	transactionMode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionModeContext);
	    } else {
	        return this.getTypedRuleContext(TransactionModeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterStartTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitStartTransaction(this);
		}
	}


}

SqlBaseParser.StartTransactionContext = StartTransactionContext;

class DeclareContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DECLARE() {
	    return this.getToken(SqlBaseParser.DECLARE, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	declareCursorParams() {
	    return this.getTypedRuleContext(DeclareCursorParamsContext,0);
	};

	CURSOR() {
	    return this.getToken(SqlBaseParser.CURSOR, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	queryNoWith() {
	    return this.getTypedRuleContext(QueryNoWithContext,0);
	};

	HOLD() {
	    return this.getToken(SqlBaseParser.HOLD, 0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	WITHOUT() {
	    return this.getToken(SqlBaseParser.WITHOUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDeclare(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDeclare(this);
		}
	}


}

SqlBaseParser.DeclareContext = DeclareContext;

class DeallocateContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.prepStmt = null;;
        super.copyFrom(ctx);
    }

	DEALLOCATE() {
	    return this.getToken(SqlBaseParser.DEALLOCATE, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	PREPARE() {
	    return this.getToken(SqlBaseParser.PREPARE, 0);
	};

	stringLiteralOrIdentifierOrQname() {
	    return this.getTypedRuleContext(StringLiteralOrIdentifierOrQnameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDeallocate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDeallocate(this);
		}
	}


}

SqlBaseParser.DeallocateContext = DeallocateContext;

class CommitContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMMIT() {
	    return this.getToken(SqlBaseParser.COMMIT, 0);
	};

	WORK() {
	    return this.getToken(SqlBaseParser.WORK, 0);
	};

	TRANSACTION() {
	    return this.getToken(SqlBaseParser.TRANSACTION, 0);
	};

	END() {
	    return this.getToken(SqlBaseParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCommit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCommit(this);
		}
	}


}

SqlBaseParser.CommitContext = CommitContext;

class UpdateContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UPDATE() {
	    return this.getToken(SqlBaseParser.UPDATE, 0);
	};

	aliasedRelation() {
	    return this.getTypedRuleContext(AliasedRelationContext,0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	assignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	returning() {
	    return this.getTypedRuleContext(ReturningContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitUpdate(this);
		}
	}


}

SqlBaseParser.UpdateContext = UpdateContext;

class InsertContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INSERT() {
	    return this.getToken(SqlBaseParser.INSERT, 0);
	};

	INTO() {
	    return this.getToken(SqlBaseParser.INTO, 0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	insertSource() {
	    return this.getTypedRuleContext(InsertSourceContext,0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	onConflict() {
	    return this.getTypedRuleContext(OnConflictContext,0);
	};

	returning() {
	    return this.getTypedRuleContext(ReturningContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterInsert(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitInsert(this);
		}
	}


}

SqlBaseParser.InsertContext = InsertContext;

class DeleteContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DELETE() {
	    return this.getToken(SqlBaseParser.DELETE, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	aliasedRelation() {
	    return this.getTypedRuleContext(AliasedRelationContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDelete(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDelete(this);
		}
	}


}

SqlBaseParser.DeleteContext = DeleteContext;

class ShowTablesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	TABLES() {
	    return this.getToken(SqlBaseParser.TABLES, 0);
	};

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterShowTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitShowTables(this);
		}
	}


}

SqlBaseParser.ShowTablesContext = ShowTablesContext;

class SetGlobalContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	GLOBAL() {
	    return this.getToken(SqlBaseParser.GLOBAL, 0);
	};

	setGlobalAssignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetGlobalAssignmentContext);
	    } else {
	        return this.getTypedRuleContext(SetGlobalAssignmentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	PERSISTENT() {
	    return this.getToken(SqlBaseParser.PERSISTENT, 0);
	};

	TRANSIENT() {
	    return this.getToken(SqlBaseParser.TRANSIENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSetGlobal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSetGlobal(this);
		}
	}


}

SqlBaseParser.SetGlobalContext = SetGlobalContext;

class CopyToContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.path = null;;
        super.copyFrom(ctx);
    }

	COPY() {
	    return this.getToken(SqlBaseParser.COPY, 0);
	};

	tableWithPartition() {
	    return this.getTypedRuleContext(TableWithPartitionContext,0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	columns() {
	    return this.getTypedRuleContext(ColumnsContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	DIRECTORY() {
	    return this.getToken(SqlBaseParser.DIRECTORY, 0);
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCopyTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCopyTo(this);
		}
	}


}

SqlBaseParser.CopyToContext = CopyToContext;

class ShowSessionParameterContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterShowSessionParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitShowSessionParameter(this);
		}
	}


}

SqlBaseParser.ShowSessionParameterContext = ShowSessionParameterContext;

class DefaultContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDefault(this);
		}
	}


}

SqlBaseParser.DefaultContext = DefaultContext;

class OptimizeContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPTIMIZE() {
	    return this.getToken(SqlBaseParser.OPTIMIZE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	tableWithPartitions() {
	    return this.getTypedRuleContext(TableWithPartitionsContext,0);
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterOptimize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitOptimize(this);
		}
	}


}

SqlBaseParser.OptimizeContext = OptimizeContext;

class ResetGlobalContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RESET() {
	    return this.getToken(SqlBaseParser.RESET, 0);
	};

	GLOBAL() {
	    return this.getToken(SqlBaseParser.GLOBAL, 0);
	};

	primaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterResetGlobal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitResetGlobal(this);
		}
	}


}

SqlBaseParser.ResetGlobalContext = ResetGlobalContext;

class RevokePrivilegeContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.privileges = null;;
        this.users = null;;
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(SqlBaseParser.REVOKE, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	idents = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentsContext);
	    } else {
	        return this.getTypedRuleContext(IdentsContext,i);
	    }
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	securable() {
	    return this.getTypedRuleContext(SecurableContext,0);
	};

	qnames() {
	    return this.getTypedRuleContext(QnamesContext,0);
	};

	PRIVILEGES() {
	    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterRevokePrivilege(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitRevokePrivilege(this);
		}
	}


}

SqlBaseParser.RevokePrivilegeContext = RevokePrivilegeContext;

class SetTimeZoneContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	TIME() {
	    return this.getToken(SqlBaseParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(SqlBaseParser.ZONE, 0);
	};

	LOCAL() {
	    return this.getToken(SqlBaseParser.LOCAL, 0);
	};

	DEFAULT() {
	    return this.getToken(SqlBaseParser.DEFAULT, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSetTimeZone(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSetTimeZone(this);
		}
	}


}

SqlBaseParser.SetTimeZoneContext = SetTimeZoneContext;

class CreateContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	createStmt() {
	    return this.getTypedRuleContext(CreateStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreate(this);
		}
	}


}

SqlBaseParser.CreateContext = CreateContext;

class ShowCreateTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterShowCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitShowCreateTable(this);
		}
	}


}

SqlBaseParser.ShowCreateTableContext = ShowCreateTableContext;

class ShowSchemasContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	SCHEMAS() {
	    return this.getToken(SqlBaseParser.SCHEMAS, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterShowSchemas(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitShowSchemas(this);
		}
	}


}

SqlBaseParser.ShowSchemasContext = ShowSchemasContext;

class CloseContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CLOSE() {
	    return this.getToken(SqlBaseParser.CLOSE, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterClose(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitClose(this);
		}
	}


}

SqlBaseParser.CloseContext = CloseContext;

class ShowColumnsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.tableName = null;;
        this.schema = null;;
        this.pattern = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	COLUMNS() {
	    return this.getToken(SqlBaseParser.COLUMNS, 0);
	};

	FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.FROM);
	    } else {
	        return this.getToken(SqlBaseParser.FROM, i);
	    }
	};


	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.IN);
	    } else {
	        return this.getToken(SqlBaseParser.IN, i);
	    }
	};


	qname = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QnameContext);
	    } else {
	        return this.getTypedRuleContext(QnameContext,i);
	    }
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterShowColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitShowColumns(this);
		}
	}


}

SqlBaseParser.ShowColumnsContext = ShowColumnsContext;

class AlterContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	alterStmt() {
	    return this.getTypedRuleContext(AlterStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlter(this);
		}
	}


}

SqlBaseParser.AlterContext = AlterContext;

class SetContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	DEFAULT() {
	    return this.getToken(SqlBaseParser.DEFAULT, 0);
	};

	setExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetExprContext);
	    } else {
	        return this.getTypedRuleContext(SetExprContext,i);
	    }
	};

	SESSION() {
	    return this.getToken(SqlBaseParser.SESSION, 0);
	};

	LOCAL() {
	    return this.getToken(SqlBaseParser.LOCAL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSet(this);
		}
	}


}

SqlBaseParser.SetContext = SetContext;

class RestoreContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.metatypes = null;;
        super.copyFrom(ctx);
    }

	RESTORE() {
	    return this.getToken(SqlBaseParser.RESTORE, 0);
	};

	SNAPSHOT() {
	    return this.getToken(SqlBaseParser.SNAPSHOT, 0);
	};

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	METADATA() {
	    return this.getToken(SqlBaseParser.METADATA, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	tableWithPartitions() {
	    return this.getTypedRuleContext(TableWithPartitionsContext,0);
	};

	idents() {
	    return this.getTypedRuleContext(IdentsContext,0);
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterRestore(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitRestore(this);
		}
	}


}

SqlBaseParser.RestoreContext = RestoreContext;

class RefreshTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REFRESH() {
	    return this.getToken(SqlBaseParser.REFRESH, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	tableWithPartitions() {
	    return this.getTypedRuleContext(TableWithPartitionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterRefreshTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitRefreshTable(this);
		}
	}


}

SqlBaseParser.RefreshTableContext = RefreshTableContext;

class GrantPrivilegeContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.priviliges = null;;
        this.users = null;;
        super.copyFrom(ctx);
    }

	GRANT() {
	    return this.getToken(SqlBaseParser.GRANT, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	idents = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentsContext);
	    } else {
	        return this.getTypedRuleContext(IdentsContext,i);
	    }
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	securable() {
	    return this.getTypedRuleContext(SecurableContext,0);
	};

	qnames() {
	    return this.getTypedRuleContext(QnamesContext,0);
	};

	PRIVILEGES() {
	    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterGrantPrivilege(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitGrantPrivilege(this);
		}
	}


}

SqlBaseParser.GrantPrivilegeContext = GrantPrivilegeContext;

class DenyPrivilegeContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.priviliges = null;;
        this.users = null;;
        super.copyFrom(ctx);
    }

	DENY() {
	    return this.getToken(SqlBaseParser.DENY, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	idents = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentsContext);
	    } else {
	        return this.getTypedRuleContext(IdentsContext,i);
	    }
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	securable() {
	    return this.getTypedRuleContext(SecurableContext,0);
	};

	qnames() {
	    return this.getTypedRuleContext(QnamesContext,0);
	};

	PRIVILEGES() {
	    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDenyPrivilege(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDenyPrivilege(this);
		}
	}


}

SqlBaseParser.DenyPrivilegeContext = DenyPrivilegeContext;

class SetSessionAuthorizationContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.username = null;;
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	SESSION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.SESSION);
	    } else {
	        return this.getToken(SqlBaseParser.SESSION, i);
	    }
	};


	AUTHORIZATION() {
	    return this.getToken(SqlBaseParser.AUTHORIZATION, 0);
	};

	DEFAULT() {
	    return this.getToken(SqlBaseParser.DEFAULT, 0);
	};

	stringLiteralOrIdentifier() {
	    return this.getTypedRuleContext(StringLiteralOrIdentifierContext,0);
	};

	LOCAL() {
	    return this.getToken(SqlBaseParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSetSessionAuthorization(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSetSessionAuthorization(this);
		}
	}


}

SqlBaseParser.SetSessionAuthorizationContext = SetSessionAuthorizationContext;

class KillContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.jobId = null;;
        super.copyFrom(ctx);
    }

	KILL() {
	    return this.getToken(SqlBaseParser.KILL, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	parameterOrString() {
	    return this.getTypedRuleContext(ParameterOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterKill(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitKill(this);
		}
	}


}

SqlBaseParser.KillContext = KillContext;

class CopyFromContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.path = null;;
        super.copyFrom(ctx);
    }

	COPY() {
	    return this.getToken(SqlBaseParser.COPY, 0);
	};

	tableWithPartition() {
	    return this.getTypedRuleContext(TableWithPartitionContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	RETURN() {
	    return this.getToken(SqlBaseParser.RETURN, 0);
	};

	SUMMARY() {
	    return this.getToken(SqlBaseParser.SUMMARY, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCopyFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCopyFrom(this);
		}
	}


}

SqlBaseParser.CopyFromContext = CopyFromContext;

class AnalyzeContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ANALYZE() {
	    return this.getToken(SqlBaseParser.ANALYZE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAnalyze(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAnalyze(this);
		}
	}


}

SqlBaseParser.AnalyzeContext = AnalyzeContext;

class FetchContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(SqlBaseParser.FETCH, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	direction() {
	    return this.getTypedRuleContext(DirectionContext,0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterFetch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitFetch(this);
		}
	}


}

SqlBaseParser.FetchContext = FetchContext;

class ShowTransactionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	TRANSACTION() {
	    return this.getToken(SqlBaseParser.TRANSACTION, 0);
	};

	ISOLATION() {
	    return this.getToken(SqlBaseParser.ISOLATION, 0);
	};

	LEVEL() {
	    return this.getToken(SqlBaseParser.LEVEL, 0);
	};

	TRANSACTION_ISOLATION() {
	    return this.getToken(SqlBaseParser.TRANSACTION_ISOLATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterShowTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitShowTransaction(this);
		}
	}


}

SqlBaseParser.ShowTransactionContext = ShowTransactionContext;

class ResetSessionAuthorizationContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RESET() {
	    return this.getToken(SqlBaseParser.RESET, 0);
	};

	SESSION() {
	    return this.getToken(SqlBaseParser.SESSION, 0);
	};

	AUTHORIZATION() {
	    return this.getToken(SqlBaseParser.AUTHORIZATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterResetSessionAuthorization(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitResetSessionAuthorization(this);
		}
	}


}

SqlBaseParser.ResetSessionAuthorizationContext = ResetSessionAuthorizationContext;

class BeginContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BEGIN() {
	    return this.getToken(SqlBaseParser.BEGIN, 0);
	};

	transactionMode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionModeContext);
	    } else {
	        return this.getTypedRuleContext(TransactionModeContext,i);
	    }
	};

	WORK() {
	    return this.getToken(SqlBaseParser.WORK, 0);
	};

	TRANSACTION() {
	    return this.getToken(SqlBaseParser.TRANSACTION, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterBegin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitBegin(this);
		}
	}


}

SqlBaseParser.BeginContext = BeginContext;

class DropStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_dropStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DropSubscriptionContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	SUBSCRIPTION() {
	    return this.getToken(SqlBaseParser.SUBSCRIPTION, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropSubscription(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropSubscription(this);
		}
	}


}

SqlBaseParser.DropSubscriptionContext = DropSubscriptionContext;

class DropSnapshotContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	SNAPSHOT() {
	    return this.getToken(SqlBaseParser.SNAPSHOT, 0);
	};

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropSnapshot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropSnapshot(this);
		}
	}


}

SqlBaseParser.DropSnapshotContext = DropSnapshotContext;

class DropFunctionContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	functionArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionArgumentContext);
	    } else {
	        return this.getTypedRuleContext(FunctionArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropFunction(this);
		}
	}


}

SqlBaseParser.DropFunctionContext = DropFunctionContext;

class DropViewContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.names = null;;
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qnames() {
	    return this.getTypedRuleContext(QnamesContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropView(this);
		}
	}


}

SqlBaseParser.DropViewContext = DropViewContext;

class DropUserMappingContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.server = null;;
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	USER() {
	    return this.getToken(SqlBaseParser.USER, 0);
	};

	MAPPING() {
	    return this.getToken(SqlBaseParser.MAPPING, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	mappedUser() {
	    return this.getTypedRuleContext(MappedUserContext,0);
	};

	SERVER() {
	    return this.getToken(SqlBaseParser.SERVER, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropUserMapping(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropUserMapping(this);
		}
	}


}

SqlBaseParser.DropUserMappingContext = DropUserMappingContext;

class DropRepositoryContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	REPOSITORY() {
	    return this.getToken(SqlBaseParser.REPOSITORY, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropRepository(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropRepository(this);
		}
	}


}

SqlBaseParser.DropRepositoryContext = DropRepositoryContext;

class DropRoleContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	USER() {
	    return this.getToken(SqlBaseParser.USER, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropRole(this);
		}
	}


}

SqlBaseParser.DropRoleContext = DropRoleContext;

class DropForeignTableContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.names = null;;
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	FOREIGN() {
	    return this.getToken(SqlBaseParser.FOREIGN, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qnames() {
	    return this.getTypedRuleContext(QnamesContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	CASCADE() {
	    return this.getToken(SqlBaseParser.CASCADE, 0);
	};

	RESTRICT() {
	    return this.getToken(SqlBaseParser.RESTRICT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropForeignTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropForeignTable(this);
		}
	}


}

SqlBaseParser.DropForeignTableContext = DropForeignTableContext;

class DropBlobTableContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	BLOB() {
	    return this.getToken(SqlBaseParser.BLOB, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropBlobTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropBlobTable(this);
		}
	}


}

SqlBaseParser.DropBlobTableContext = DropBlobTableContext;

class DropAnalyzerContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	ANALYZER() {
	    return this.getToken(SqlBaseParser.ANALYZER, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropAnalyzer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropAnalyzer(this);
		}
	}


}

SqlBaseParser.DropAnalyzerContext = DropAnalyzerContext;

class DropAliasContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	ALIAS() {
	    return this.getToken(SqlBaseParser.ALIAS, 0);
	};

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropAlias(this);
		}
	}


}

SqlBaseParser.DropAliasContext = DropAliasContext;

class DropPublicationContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	PUBLICATION() {
	    return this.getToken(SqlBaseParser.PUBLICATION, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropPublication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropPublication(this);
		}
	}


}

SqlBaseParser.DropPublicationContext = DropPublicationContext;

class DropTableContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropTable(this);
		}
	}


}

SqlBaseParser.DropTableContext = DropTableContext;

class DropServerContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.names = null;;
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	SERVER() {
	    return this.getToken(SqlBaseParser.SERVER, 0);
	};

	idents() {
	    return this.getTypedRuleContext(IdentsContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	CASCADE() {
	    return this.getToken(SqlBaseParser.CASCADE, 0);
	};

	RESTRICT() {
	    return this.getToken(SqlBaseParser.RESTRICT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropServer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropServer(this);
		}
	}


}

SqlBaseParser.DropServerContext = DropServerContext;

class AlterStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_alterStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AddColumnContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	alterTableDefinition() {
	    return this.getTypedRuleContext(AlterTableDefinitionContext,0);
	};

	addColumnDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AddColumnDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(AddColumnDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAddColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAddColumn(this);
		}
	}


}

SqlBaseParser.AddColumnContext = AddColumnContext;

class AlterClusterGCDanglingArtifactsContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	CLUSTER() {
	    return this.getToken(SqlBaseParser.CLUSTER, 0);
	};

	GC() {
	    return this.getToken(SqlBaseParser.GC, 0);
	};

	DANGLING() {
	    return this.getToken(SqlBaseParser.DANGLING, 0);
	};

	ARTIFACTS() {
	    return this.getToken(SqlBaseParser.ARTIFACTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlterClusterGCDanglingArtifacts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlterClusterGCDanglingArtifacts(this);
		}
	}


}

SqlBaseParser.AlterClusterGCDanglingArtifactsContext = AlterClusterGCDanglingArtifactsContext;

class AlterTablePropertiesContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	alterTableDefinition() {
	    return this.getTypedRuleContext(AlterTableDefinitionContext,0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	genericProperties() {
	    return this.getTypedRuleContext(GenericPropertiesContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	RESET() {
	    return this.getToken(SqlBaseParser.RESET, 0);
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlterTableProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlterTableProperties(this);
		}
	}


}

SqlBaseParser.AlterTablePropertiesContext = AlterTablePropertiesContext;

class AlterRoleContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	genericProperties() {
	    return this.getTypedRuleContext(GenericPropertiesContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	USER() {
	    return this.getToken(SqlBaseParser.USER, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlterRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlterRole(this);
		}
	}


}

SqlBaseParser.AlterRoleContext = AlterRoleContext;

class DropColumnContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	alterTableDefinition() {
	    return this.getTypedRuleContext(AlterTableDefinitionContext,0);
	};

	dropColumnDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DropColumnDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(DropColumnDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropColumn(this);
		}
	}


}

SqlBaseParser.DropColumnContext = DropColumnContext;

class DropCheckConstraintContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	alterTableDefinition() {
	    return this.getTypedRuleContext(AlterTableDefinitionContext,0);
	};

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	CONSTRAINT() {
	    return this.getToken(SqlBaseParser.CONSTRAINT, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropCheckConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropCheckConstraint(this);
		}
	}


}

SqlBaseParser.DropCheckConstraintContext = DropCheckConstraintContext;

class AlterTableOpenCloseContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	alterTableDefinition() {
	    return this.getTypedRuleContext(AlterTableDefinitionContext,0);
	};

	OPEN() {
	    return this.getToken(SqlBaseParser.OPEN, 0);
	};

	CLOSE() {
	    return this.getToken(SqlBaseParser.CLOSE, 0);
	};

	BLOB() {
	    return this.getToken(SqlBaseParser.BLOB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlterTableOpenClose(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlterTableOpenClose(this);
		}
	}


}

SqlBaseParser.AlterTableOpenCloseContext = AlterTableOpenCloseContext;

class AlterTableRenameTableContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	alterTableDefinition() {
	    return this.getTypedRuleContext(AlterTableDefinitionContext,0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	BLOB() {
	    return this.getToken(SqlBaseParser.BLOB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlterTableRenameTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlterTableRenameTable(this);
		}
	}


}

SqlBaseParser.AlterTableRenameTableContext = AlterTableRenameTableContext;

class AlterPublicationContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	PUBLICATION() {
	    return this.getToken(SqlBaseParser.PUBLICATION, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qname = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QnameContext);
	    } else {
	        return this.getTypedRuleContext(QnameContext,i);
	    }
	};

	ADD() {
	    return this.getToken(SqlBaseParser.ADD, 0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	ASTERISK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.ASTERISK);
	    } else {
	        return this.getToken(SqlBaseParser.ASTERISK, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlterPublication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlterPublication(this);
		}
	}


}

SqlBaseParser.AlterPublicationContext = AlterPublicationContext;

class AlterClusterDecommissionNodeContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.node = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	CLUSTER() {
	    return this.getToken(SqlBaseParser.CLUSTER, 0);
	};

	DECOMMISSION() {
	    return this.getToken(SqlBaseParser.DECOMMISSION, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlterClusterDecommissionNode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlterClusterDecommissionNode(this);
		}
	}


}

SqlBaseParser.AlterClusterDecommissionNodeContext = AlterClusterDecommissionNodeContext;

class AlterClusterRerouteRetryFailedContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	CLUSTER() {
	    return this.getToken(SqlBaseParser.CLUSTER, 0);
	};

	REROUTE() {
	    return this.getToken(SqlBaseParser.REROUTE, 0);
	};

	RETRY() {
	    return this.getToken(SqlBaseParser.RETRY, 0);
	};

	FAILED() {
	    return this.getToken(SqlBaseParser.FAILED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlterClusterRerouteRetryFailed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlterClusterRerouteRetryFailed(this);
		}
	}


}

SqlBaseParser.AlterClusterRerouteRetryFailedContext = AlterClusterRerouteRetryFailedContext;

class AlterBlobTablePropertiesContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	BLOB() {
	    return this.getToken(SqlBaseParser.BLOB, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	alterTableDefinition() {
	    return this.getTypedRuleContext(AlterTableDefinitionContext,0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	genericProperties() {
	    return this.getTypedRuleContext(GenericPropertiesContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	RESET() {
	    return this.getToken(SqlBaseParser.RESET, 0);
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlterBlobTableProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlterBlobTableProperties(this);
		}
	}


}

SqlBaseParser.AlterBlobTablePropertiesContext = AlterBlobTablePropertiesContext;

class AlterTableRerouteContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	alterTableDefinition() {
	    return this.getTypedRuleContext(AlterTableDefinitionContext,0);
	};

	REROUTE() {
	    return this.getToken(SqlBaseParser.REROUTE, 0);
	};

	rerouteOption() {
	    return this.getTypedRuleContext(RerouteOptionContext,0);
	};

	BLOB() {
	    return this.getToken(SqlBaseParser.BLOB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlterTableReroute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlterTableReroute(this);
		}
	}


}

SqlBaseParser.AlterTableRerouteContext = AlterTableRerouteContext;

class AlterClusterSwapTableContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.source = null;;
        this.target = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	CLUSTER() {
	    return this.getToken(SqlBaseParser.CLUSTER, 0);
	};

	SWAP() {
	    return this.getToken(SqlBaseParser.SWAP, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	qname = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QnameContext);
	    } else {
	        return this.getTypedRuleContext(QnameContext,i);
	    }
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlterClusterSwapTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlterClusterSwapTable(this);
		}
	}


}

SqlBaseParser.AlterClusterSwapTableContext = AlterClusterSwapTableContext;

class AlterTableRenameColumnContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.source = null;;
        this.target = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	alterTableDefinition() {
	    return this.getTypedRuleContext(AlterTableDefinitionContext,0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	subscriptSafe = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubscriptSafeContext);
	    } else {
	        return this.getTypedRuleContext(SubscriptSafeContext,i);
	    }
	};

	BLOB() {
	    return this.getToken(SqlBaseParser.BLOB, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlterTableRenameColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlterTableRenameColumn(this);
		}
	}


}

SqlBaseParser.AlterTableRenameColumnContext = AlterTableRenameColumnContext;

class AlterSubscriptionContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	SUBSCRIPTION() {
	    return this.getToken(SqlBaseParser.SUBSCRIPTION, 0);
	};

	alterSubscriptionMode() {
	    return this.getTypedRuleContext(AlterSubscriptionModeContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlterSubscription(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlterSubscription(this);
		}
	}


}

SqlBaseParser.AlterSubscriptionContext = AlterSubscriptionContext;

class QueryOptParensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_queryOptParens;
    }

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	queryOptParens() {
	    return this.getTypedRuleContext(QueryOptParensContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterQueryOptParens(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitQueryOptParens(this);
		}
	}


}



class QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_query;
    }

	queryNoWith() {
	    return this.getTypedRuleContext(QueryNoWithContext,0);
	};

	with_() {
	    return this.getTypedRuleContext(WithContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitQuery(this);
		}
	}


}



class QueryNoWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_queryNoWith;
    }

	queryTerm() {
	    return this.getTypedRuleContext(QueryTermContext,0);
	};

	ORDER() {
	    return this.getToken(SqlBaseParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterQueryNoWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitQueryNoWith(this);
		}
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_limitClause;
        this.limit = null;
    }

	LIMIT() {
	    return this.getToken(SqlBaseParser.LIMIT, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	parameterOrInteger() {
	    return this.getTypedRuleContext(ParameterOrIntegerContext,0);
	};

	FETCH() {
	    return this.getToken(SqlBaseParser.FETCH, 0);
	};

	ONLY() {
	    return this.getToken(SqlBaseParser.ONLY, 0);
	};

	FIRST() {
	    return this.getToken(SqlBaseParser.FIRST, 0);
	};

	NEXT() {
	    return this.getToken(SqlBaseParser.NEXT, 0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(SqlBaseParser.ROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitLimitClause(this);
		}
	}


}



class OffsetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_offsetClause;
        this.offset = null;
    }

	OFFSET() {
	    return this.getToken(SqlBaseParser.OFFSET, 0);
	};

	parameterOrInteger() {
	    return this.getTypedRuleContext(ParameterOrIntegerContext,0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(SqlBaseParser.ROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterOffsetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitOffsetClause(this);
		}
	}


}



class QueryTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_queryTerm;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class QueryTermDefaultContext extends QueryTermContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	querySpec() {
	    return this.getTypedRuleContext(QuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterQueryTermDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitQueryTermDefault(this);
		}
	}


}

SqlBaseParser.QueryTermDefaultContext = QueryTermDefaultContext;

class SetOperationContext extends QueryTermContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.first = null;;
        this.operator = null;;
        this.second = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	querySpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QuerySpecContext);
	    } else {
	        return this.getTypedRuleContext(QuerySpecContext,i);
	    }
	};

	INTERSECT() {
	    return this.getToken(SqlBaseParser.INTERSECT, 0);
	};

	EXCEPT() {
	    return this.getToken(SqlBaseParser.EXCEPT, 0);
	};

	queryTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryTermContext);
	    } else {
	        return this.getTypedRuleContext(QueryTermContext,i);
	    }
	};

	UNION() {
	    return this.getToken(SqlBaseParser.UNION, 0);
	};

	setQuant() {
	    return this.getTypedRuleContext(SetQuantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSetOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSetOperation(this);
		}
	}


}

SqlBaseParser.SetOperationContext = SetOperationContext;

class SetQuantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_setQuant;
    }

	DISTINCT() {
	    return this.getToken(SqlBaseParser.DISTINCT, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSetQuant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSetQuant(this);
		}
	}


}



class SortItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_sortItem;
        this.ordering = null;
        this.nullOrdering = null;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	NULLS() {
	    return this.getToken(SqlBaseParser.NULLS, 0);
	};

	ASC() {
	    return this.getToken(SqlBaseParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	FIRST() {
	    return this.getToken(SqlBaseParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(SqlBaseParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSortItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSortItem(this);
		}
	}


}



class QuerySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_querySpec;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DefaultQuerySpecContext extends QuerySpecContext {

    constructor(parser, ctx) {
        super(parser);
        this.having = null;;
        this._namedWindow = null;;
        this.windows = [];;
        super.copyFrom(ctx);
    }

	SELECT() {
	    return this.getToken(SqlBaseParser.SELECT, 0);
	};

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	setQuant() {
	    return this.getTypedRuleContext(SetQuantContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	relation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationContext);
	    } else {
	        return this.getTypedRuleContext(RelationContext,i);
	    }
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	GROUP() {
	    return this.getToken(SqlBaseParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	HAVING() {
	    return this.getToken(SqlBaseParser.HAVING, 0);
	};

	WINDOW() {
	    return this.getToken(SqlBaseParser.WINDOW, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	namedWindow = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedWindowContext);
	    } else {
	        return this.getTypedRuleContext(NamedWindowContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDefaultQuerySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDefaultQuerySpec(this);
		}
	}


}

SqlBaseParser.DefaultQuerySpecContext = DefaultQuerySpecContext;

class ValuesRelationContext extends QuerySpecContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VALUES() {
	    return this.getToken(SqlBaseParser.VALUES, 0);
	};

	values = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValuesContext);
	    } else {
	        return this.getTypedRuleContext(ValuesContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterValuesRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitValuesRelation(this);
		}
	}


}

SqlBaseParser.ValuesRelationContext = ValuesRelationContext;

class SelectItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_selectItem;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectAllContext extends SelectItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	DOT() {
	    return this.getToken(SqlBaseParser.DOT, 0);
	};

	ASTERISK() {
	    return this.getToken(SqlBaseParser.ASTERISK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSelectAll(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSelectAll(this);
		}
	}


}

SqlBaseParser.SelectAllContext = SelectAllContext;

class SelectSingleContext extends SelectItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSelectSingle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSelectSingle(this);
		}
	}


}

SqlBaseParser.SelectSingleContext = SelectSingleContext;

class WhereContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_where;
        this.condition = null;
    }

	WHERE() {
	    return this.getToken(SqlBaseParser.WHERE, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterWhere(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitWhere(this);
		}
	}


}



class ReturningContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_returning;
    }

	RETURNING() {
	    return this.getToken(SqlBaseParser.RETURNING, 0);
	};

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterReturning(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitReturning(this);
		}
	}


}



class FilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_filter;
    }

	FILTER() {
	    return this.getToken(SqlBaseParser.FILTER, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitFilter(this);
		}
	}


}



class RelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_relation;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RelationDefaultContext extends RelationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	aliasedRelation() {
	    return this.getTypedRuleContext(AliasedRelationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterRelationDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitRelationDefault(this);
		}
	}


}

SqlBaseParser.RelationDefaultContext = RelationDefaultContext;

class JoinRelationContext extends RelationContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.right = null;;
        this.rightRelation = null;;
        super.copyFrom(ctx);
    }

	relation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationContext);
	    } else {
	        return this.getTypedRuleContext(RelationContext,i);
	    }
	};

	CROSS() {
	    return this.getToken(SqlBaseParser.CROSS, 0);
	};

	JOIN() {
	    return this.getToken(SqlBaseParser.JOIN, 0);
	};

	joinType() {
	    return this.getTypedRuleContext(JoinTypeContext,0);
	};

	joinCriteria() {
	    return this.getTypedRuleContext(JoinCriteriaContext,0);
	};

	NATURAL() {
	    return this.getToken(SqlBaseParser.NATURAL, 0);
	};

	aliasedRelation() {
	    return this.getTypedRuleContext(AliasedRelationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterJoinRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitJoinRelation(this);
		}
	}


}

SqlBaseParser.JoinRelationContext = JoinRelationContext;

class JoinTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_joinType;
    }

	INNER() {
	    return this.getToken(SqlBaseParser.INNER, 0);
	};

	LEFT() {
	    return this.getToken(SqlBaseParser.LEFT, 0);
	};

	OUTER() {
	    return this.getToken(SqlBaseParser.OUTER, 0);
	};

	RIGHT() {
	    return this.getToken(SqlBaseParser.RIGHT, 0);
	};

	FULL() {
	    return this.getToken(SqlBaseParser.FULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterJoinType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitJoinType(this);
		}
	}


}



class JoinCriteriaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_joinCriteria;
    }

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterJoinCriteria(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitJoinCriteria(this);
		}
	}


}



class AliasedRelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_aliasedRelation;
    }

	relationPrimary() {
	    return this.getTypedRuleContext(RelationPrimaryContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	aliasedColumns() {
	    return this.getTypedRuleContext(AliasedColumnsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAliasedRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAliasedRelation(this);
		}
	}


}



class RelationPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_relationPrimary;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubqueryRelationContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSubqueryRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSubqueryRelation(this);
		}
	}


}

SqlBaseParser.SubqueryRelationContext = SubqueryRelationContext;

class ParenthesizedRelationContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	relation() {
	    return this.getTypedRuleContext(RelationContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterParenthesizedRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitParenthesizedRelation(this);
		}
	}


}

SqlBaseParser.ParenthesizedRelationContext = ParenthesizedRelationContext;

class TableRelationContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterTableRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitTableRelation(this);
		}
	}


}

SqlBaseParser.TableRelationContext = TableRelationContext;

class TableWithPartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableWithPartition;
    }

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	PARTITION() {
	    return this.getToken(SqlBaseParser.PARTITION, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	assignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterTableWithPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitTableWithPartition(this);
		}
	}


}



class TableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_table;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableFunctionContext extends TableContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterTableFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitTableFunction(this);
		}
	}


}

SqlBaseParser.TableFunctionContext = TableFunctionContext;

class TableNameContext extends TableContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitTableName(this);
		}
	}


}

SqlBaseParser.TableNameContext = TableNameContext;

class AliasedColumnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_aliasedColumns;
    }

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAliasedColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAliasedColumns(this);
		}
	}


}



class WithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_with;
    }

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	namedQuery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedQueryContext);
	    } else {
	        return this.getTypedRuleContext(NamedQueryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitWith(this);
		}
	}


}



class NamedQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_namedQuery;
        this.name = null;
    }

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	aliasedColumns() {
	    return this.getTypedRuleContext(AliasedColumnsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterNamedQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitNamedQuery(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_expr;
    }

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitExpr(this);
		}
	}


}



class BooleanExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_booleanExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LogicalNotContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterLogicalNot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitLogicalNot(this);
		}
	}


}

SqlBaseParser.LogicalNotContext = LogicalNotContext;

class BooleanDefaultContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicated() {
	    return this.getTypedRuleContext(PredicatedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterBooleanDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitBooleanDefault(this);
		}
	}


}

SqlBaseParser.BooleanDefaultContext = BooleanDefaultContext;

class MatchContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.term = null;;
        this.matchType = null;;
        super.copyFrom(ctx);
    }

	MATCH() {
	    return this.getToken(SqlBaseParser.MATCH, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	matchPredicateIdents() {
	    return this.getTypedRuleContext(MatchPredicateIdentsContext,0);
	};

	COMMA() {
	    return this.getToken(SqlBaseParser.COMMA, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterMatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitMatch(this);
		}
	}


}

SqlBaseParser.MatchContext = MatchContext;

class LogicalBinaryContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.operator = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	booleanExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BooleanExpressionContext,i);
	    }
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterLogicalBinary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitLogicalBinary(this);
		}
	}


}

SqlBaseParser.LogicalBinaryContext = LogicalBinaryContext;

class PredicatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_predicated;
        this._valueExpression = null;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterPredicated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitPredicated(this);
		}
	}


}



class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, value) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_predicate;
        this.value = null
        this.value = value || null;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
			this.value = ctx.value;
		}

}


class ComparisonContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.right = null;;
        super.copyFrom(ctx);
    }

	cmpOp() {
	    return this.getTypedRuleContext(CmpOpContext,0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitComparison(this);
		}
	}


}

SqlBaseParser.ComparisonContext = ComparisonContext;

class LikeContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null;;
        this.escape = null;;
        super.copyFrom(ctx);
    }

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	ILIKE() {
	    return this.getToken(SqlBaseParser.ILIKE, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	ESCAPE() {
	    return this.getToken(SqlBaseParser.ESCAPE, 0);
	};

	parameterOrLiteral() {
	    return this.getTypedRuleContext(ParameterOrLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterLike(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitLike(this);
		}
	}


}

SqlBaseParser.LikeContext = LikeContext;

class InSubqueryContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	subqueryExpression() {
	    return this.getTypedRuleContext(SubqueryExpressionContext,0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterInSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitInSubquery(this);
		}
	}


}

SqlBaseParser.InSubqueryContext = InSubqueryContext;

class DistinctFromContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.right = null;;
        super.copyFrom(ctx);
    }

	IS() {
	    return this.getToken(SqlBaseParser.IS, 0);
	};

	DISTINCT() {
	    return this.getToken(SqlBaseParser.DISTINCT, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDistinctFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDistinctFrom(this);
		}
	}


}

SqlBaseParser.DistinctFromContext = DistinctFromContext;

class InListContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterInList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitInList(this);
		}
	}


}

SqlBaseParser.InListContext = InListContext;

class ArrayLikeContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.quant = null;;
        this.v = null;;
        this.escape = null;;
        super.copyFrom(ctx);
    }

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	ILIKE() {
	    return this.getToken(SqlBaseParser.ILIKE, 0);
	};

	setCmpQuantifier() {
	    return this.getTypedRuleContext(SetCmpQuantifierContext,0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	ESCAPE() {
	    return this.getToken(SqlBaseParser.ESCAPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterArrayLike(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitArrayLike(this);
		}
	}


}

SqlBaseParser.ArrayLikeContext = ArrayLikeContext;

class NullPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IS() {
	    return this.getToken(SqlBaseParser.IS, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterNullPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitNullPredicate(this);
		}
	}


}

SqlBaseParser.NullPredicateContext = NullPredicateContext;

class BetweenContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.lower = null;;
        this.upper = null;;
        super.copyFrom(ctx);
    }

	BETWEEN() {
	    return this.getToken(SqlBaseParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterBetween(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitBetween(this);
		}
	}


}

SqlBaseParser.BetweenContext = BetweenContext;

class QuantifiedComparisonContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	cmpOp() {
	    return this.getTypedRuleContext(CmpOpContext,0);
	};

	setCmpQuantifier() {
	    return this.getTypedRuleContext(SetCmpQuantifierContext,0);
	};

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterQuantifiedComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitQuantifiedComparison(this);
		}
	}


}

SqlBaseParser.QuantifiedComparisonContext = QuantifiedComparisonContext;

class ValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_valueExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BitwiseBinaryContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.operator = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	BITWISE_AND() {
	    return this.getToken(SqlBaseParser.BITWISE_AND, 0);
	};

	BITWISE_OR() {
	    return this.getToken(SqlBaseParser.BITWISE_OR, 0);
	};

	BITWISE_XOR() {
	    return this.getToken(SqlBaseParser.BITWISE_XOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterBitwiseBinary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitBitwiseBinary(this);
		}
	}


}

SqlBaseParser.BitwiseBinaryContext = BitwiseBinaryContext;

class ValueExpressionDefaultContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterValueExpressionDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitValueExpressionDefault(this);
		}
	}


}

SqlBaseParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;

class ConcatenationContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	CONCAT() {
	    return this.getToken(SqlBaseParser.CONCAT, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterConcatenation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitConcatenation(this);
		}
	}


}

SqlBaseParser.ConcatenationContext = ConcatenationContext;

class FromStringLiteralCastContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterFromStringLiteralCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitFromStringLiteralCast(this);
		}
	}


}

SqlBaseParser.FromStringLiteralCastContext = FromStringLiteralCastContext;

class ArithmeticBinaryContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.operator = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	CARET() {
	    return this.getToken(SqlBaseParser.CARET, 0);
	};

	ASTERISK() {
	    return this.getToken(SqlBaseParser.ASTERISK, 0);
	};

	SLASH() {
	    return this.getToken(SqlBaseParser.SLASH, 0);
	};

	PERCENT() {
	    return this.getToken(SqlBaseParser.PERCENT, 0);
	};

	PLUS() {
	    return this.getToken(SqlBaseParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterArithmeticBinary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitArithmeticBinary(this);
		}
	}


}

SqlBaseParser.ArithmeticBinaryContext = ArithmeticBinaryContext;

class ArithmeticUnaryContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	PLUS() {
	    return this.getToken(SqlBaseParser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterArithmeticUnary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitArithmeticUnary(this);
		}
	}


}

SqlBaseParser.ArithmeticUnaryContext = ArithmeticUnaryContext;

class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_primaryExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubqueryExpressionDefaultContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	subqueryExpression() {
	    return this.getTypedRuleContext(SubqueryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSubqueryExpressionDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSubqueryExpressionDefault(this);
		}
	}


}

SqlBaseParser.SubqueryExpressionDefaultContext = SubqueryExpressionDefaultContext;

class DereferenceContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.DOT);
	    } else {
	        return this.getToken(SqlBaseParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDereference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDereference(this);
		}
	}


}

SqlBaseParser.DereferenceContext = DereferenceContext;

class ColumnReferenceContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterColumnReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitColumnReference(this);
		}
	}


}

SqlBaseParser.ColumnReferenceContext = ColumnReferenceContext;

class AtTimezoneContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.timestamp = null;;
        this.zone = null;;
        super.copyFrom(ctx);
    }

	AT() {
	    return this.getToken(SqlBaseParser.AT, 0);
	};

	TIME() {
	    return this.getToken(SqlBaseParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(SqlBaseParser.ZONE, 0);
	};

	primaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAtTimezone(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAtTimezone(this);
		}
	}


}

SqlBaseParser.AtTimezoneContext = AtTimezoneContext;

class SubscriptContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.value = null;;
        this.index = null;;
        super.copyFrom(ctx);
    }

	OPEN_SQUARE_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_SQUARE_BRACKET, 0);
	};

	CLOSE_SQUARE_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_SQUARE_BRACKET, 0);
	};

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSubscript(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSubscript(this);
		}
	}


}

SqlBaseParser.SubscriptContext = SubscriptContext;

class RecordSubscriptContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.base = null;;
        this.fieldName = null;;
        super.copyFrom(ctx);
    }

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	DOT() {
	    return this.getToken(SqlBaseParser.DOT, 0);
	};

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterRecordSubscript(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitRecordSubscript(this);
		}
	}


}

SqlBaseParser.RecordSubscriptContext = RecordSubscriptContext;

class ExplicitFunctionDefaultContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	explicitFunction() {
	    return this.getTypedRuleContext(ExplicitFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterExplicitFunctionDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitExplicitFunctionDefault(this);
		}
	}


}

SqlBaseParser.ExplicitFunctionDefaultContext = ExplicitFunctionDefaultContext;

class DoubleColonCastContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	CAST_OPERATOR() {
	    return this.getToken(SqlBaseParser.CAST_OPERATOR, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDoubleColonCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDoubleColonCast(this);
		}
	}


}

SqlBaseParser.DoubleColonCastContext = DoubleColonCastContext;

class DefaultParamOrLiteralContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	parameterOrLiteral() {
	    return this.getTypedRuleContext(ParameterOrLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDefaultParamOrLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDefaultParamOrLiteral(this);
		}
	}


}

SqlBaseParser.DefaultParamOrLiteralContext = DefaultParamOrLiteralContext;

class FunctionCallContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	ASTERISK() {
	    return this.getToken(SqlBaseParser.ASTERISK, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	filter() {
	    return this.getTypedRuleContext(FilterContext,0);
	};

	over() {
	    return this.getTypedRuleContext(OverContext,0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	NULLS() {
	    return this.getToken(SqlBaseParser.NULLS, 0);
	};

	IGNORE() {
	    return this.getToken(SqlBaseParser.IGNORE, 0);
	};

	RESPECT() {
	    return this.getToken(SqlBaseParser.RESPECT, 0);
	};

	setQuant() {
	    return this.getTypedRuleContext(SetQuantContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitFunctionCall(this);
		}
	}


}

SqlBaseParser.FunctionCallContext = FunctionCallContext;

class NestedExpressionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterNestedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitNestedExpression(this);
		}
	}


}

SqlBaseParser.NestedExpressionContext = NestedExpressionContext;

class ArraySliceContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.base = null;;
        this.from = null;;
        this.to = null;;
        super.copyFrom(ctx);
    }

	OPEN_SQUARE_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_SQUARE_BRACKET, 0);
	};

	COLON() {
	    return this.getToken(SqlBaseParser.COLON, 0);
	};

	CLOSE_SQUARE_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_SQUARE_BRACKET, 0);
	};

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterArraySlice(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitArraySlice(this);
		}
	}


}

SqlBaseParser.ArraySliceContext = ArraySliceContext;

class ExistsContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitExists(this);
		}
	}


}

SqlBaseParser.ExistsContext = ExistsContext;

class EmptyArrayContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EMPTY_SQUARE_BRACKET() {
	    return this.getToken(SqlBaseParser.EMPTY_SQUARE_BRACKET, 0);
	};

	ARRAY() {
	    return this.getToken(SqlBaseParser.ARRAY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterEmptyArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitEmptyArray(this);
		}
	}


}

SqlBaseParser.EmptyArrayContext = EmptyArrayContext;

class ExplicitFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_explicitFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SimpleCaseContext extends ExplicitFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operand = null;;
        this.elseExpr = null;;
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(SqlBaseParser.CASE, 0);
	};

	END() {
	    return this.getToken(SqlBaseParser.END, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	whenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(WhenClauseContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(SqlBaseParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSimpleCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSimpleCase(this);
		}
	}


}

SqlBaseParser.SimpleCaseContext = SimpleCaseContext;

class IfCaseContext extends ExplicitFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.condition = null;;
        this.trueValue = null;;
        this.falseValue = null;;
        super.copyFrom(ctx);
    }

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterIfCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitIfCase(this);
		}
	}


}

SqlBaseParser.IfCaseContext = IfCaseContext;

class SpecialDateTimeFunctionContext extends ExplicitFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.precision = null;;
        super.copyFrom(ctx);
    }

	CURRENT_DATE() {
	    return this.getToken(SqlBaseParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(SqlBaseParser.CURRENT_TIME, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSpecialDateTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSpecialDateTimeFunction(this);
		}
	}


}

SqlBaseParser.SpecialDateTimeFunctionContext = SpecialDateTimeFunctionContext;

class SessionUserContext extends ExplicitFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SESSION_USER() {
	    return this.getToken(SqlBaseParser.SESSION_USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSessionUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSessionUser(this);
		}
	}


}

SqlBaseParser.SessionUserContext = SessionUserContext;

class ArraySubqueryContext extends ExplicitFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ARRAY() {
	    return this.getToken(SqlBaseParser.ARRAY, 0);
	};

	subqueryExpression() {
	    return this.getTypedRuleContext(SubqueryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterArraySubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitArraySubquery(this);
		}
	}


}

SqlBaseParser.ArraySubqueryContext = ArraySubqueryContext;

class RightContext extends ExplicitFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.strOrColName = null;;
        this.len = null;;
        super.copyFrom(ctx);
    }

	RIGHT() {
	    return this.getToken(SqlBaseParser.RIGHT, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(SqlBaseParser.COMMA, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitRight(this);
		}
	}


}

SqlBaseParser.RightContext = RightContext;

class SubstringContext extends ExplicitFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SUBSTRING() {
	    return this.getToken(SqlBaseParser.SUBSTRING, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSubstring(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSubstring(this);
		}
	}


}

SqlBaseParser.SubstringContext = SubstringContext;

class CastContext extends ExplicitFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CAST() {
	    return this.getToken(SqlBaseParser.CAST, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	TRY_CAST() {
	    return this.getToken(SqlBaseParser.TRY_CAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCast(this);
		}
	}


}

SqlBaseParser.CastContext = CastContext;

class CurrentUserContext extends ExplicitFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CURRENT_USER() {
	    return this.getToken(SqlBaseParser.CURRENT_USER, 0);
	};

	CURRENT_ROLE() {
	    return this.getToken(SqlBaseParser.CURRENT_ROLE, 0);
	};

	USER() {
	    return this.getToken(SqlBaseParser.USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCurrentUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCurrentUser(this);
		}
	}


}

SqlBaseParser.CurrentUserContext = CurrentUserContext;

class ExtractContext extends ExplicitFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXTRACT() {
	    return this.getToken(SqlBaseParser.EXTRACT, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	stringLiteralOrIdentifier() {
	    return this.getTypedRuleContext(StringLiteralOrIdentifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterExtract(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitExtract(this);
		}
	}


}

SqlBaseParser.ExtractContext = ExtractContext;

class TrimContext extends ExplicitFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.trimMode = null;;
        this.charsToTrim = null;;
        this.target = null;;
        super.copyFrom(ctx);
    }

	TRIM() {
	    return this.getToken(SqlBaseParser.TRIM, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	LEADING() {
	    return this.getToken(SqlBaseParser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(SqlBaseParser.TRAILING, 0);
	};

	BOTH() {
	    return this.getToken(SqlBaseParser.BOTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterTrim(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitTrim(this);
		}
	}


}

SqlBaseParser.TrimContext = TrimContext;

class LeftContext extends ExplicitFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.strOrColName = null;;
        this.len = null;;
        super.copyFrom(ctx);
    }

	LEFT() {
	    return this.getToken(SqlBaseParser.LEFT, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(SqlBaseParser.COMMA, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitLeft(this);
		}
	}


}

SqlBaseParser.LeftContext = LeftContext;

class CurrentSchemaContext extends ExplicitFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CURRENT_SCHEMA() {
	    return this.getToken(SqlBaseParser.CURRENT_SCHEMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCurrentSchema(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCurrentSchema(this);
		}
	}


}

SqlBaseParser.CurrentSchemaContext = CurrentSchemaContext;

class SearchedCaseContext extends ExplicitFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.elseExpr = null;;
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(SqlBaseParser.CASE, 0);
	};

	END() {
	    return this.getToken(SqlBaseParser.END, 0);
	};

	whenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(WhenClauseContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(SqlBaseParser.ELSE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSearchedCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSearchedCase(this);
		}
	}


}

SqlBaseParser.SearchedCaseContext = SearchedCaseContext;

class SubqueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_subqueryExpression;
    }

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSubqueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSubqueryExpression(this);
		}
	}


}



class ParameterOrLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_parameterOrLiteral;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ObjectLiteralContext extends ParameterOrLiteralContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_CURLY_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_CURLY_BRACKET, 0);
	};

	CLOSE_CURLY_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_CURLY_BRACKET, 0);
	};

	objectKeyValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectKeyValueContext);
	    } else {
	        return this.getTypedRuleContext(ObjectKeyValueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterObjectLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitObjectLiteral(this);
		}
	}


}

SqlBaseParser.ObjectLiteralContext = ObjectLiteralContext;

class SimpleLiteralContext extends ParameterOrLiteralContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	parameterOrSimpleLiteral() {
	    return this.getTypedRuleContext(ParameterOrSimpleLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSimpleLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSimpleLiteral(this);
		}
	}


}

SqlBaseParser.SimpleLiteralContext = SimpleLiteralContext;

class ArrayLiteralContext extends ParameterOrLiteralContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_SQUARE_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_SQUARE_BRACKET, 0);
	};

	CLOSE_SQUARE_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_SQUARE_BRACKET, 0);
	};

	ARRAY() {
	    return this.getToken(SqlBaseParser.ARRAY, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterArrayLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitArrayLiteral(this);
		}
	}


}

SqlBaseParser.ArrayLiteralContext = ArrayLiteralContext;

class ParameterOrSimpleLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_parameterOrSimpleLiteral;
    }

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	intervalLiteral() {
	    return this.getTypedRuleContext(IntervalLiteralContext,0);
	};

	escapedCharsStringLiteral() {
	    return this.getTypedRuleContext(EscapedCharsStringLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	bitString() {
	    return this.getTypedRuleContext(BitStringContext,0);
	};

	parameterExpr() {
	    return this.getTypedRuleContext(ParameterExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterParameterOrSimpleLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitParameterOrSimpleLiteral(this);
		}
	}


}



class ParameterOrIntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_parameterOrInteger;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class IntegerParamOrLiteralCastContext extends ParameterOrIntegerContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CAST() {
	    return this.getToken(SqlBaseParser.CAST, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	TRY_CAST() {
	    return this.getToken(SqlBaseParser.TRY_CAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterIntegerParamOrLiteralCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitIntegerParamOrLiteralCast(this);
		}
	}


}

SqlBaseParser.IntegerParamOrLiteralCastContext = IntegerParamOrLiteralCastContext;

class IntegerParamOrLiteralDoubleColonCastContext extends ParameterOrIntegerContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	parameterOrLiteral() {
	    return this.getTypedRuleContext(ParameterOrLiteralContext,0);
	};

	CAST_OPERATOR() {
	    return this.getToken(SqlBaseParser.CAST_OPERATOR, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterIntegerParamOrLiteralDoubleColonCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitIntegerParamOrLiteralDoubleColonCast(this);
		}
	}


}

SqlBaseParser.IntegerParamOrLiteralDoubleColonCastContext = IntegerParamOrLiteralDoubleColonCastContext;

class NullAsLiteralContext extends ParameterOrIntegerContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterNullAsLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitNullAsLiteral(this);
		}
	}


}

SqlBaseParser.NullAsLiteralContext = NullAsLiteralContext;

class ParameterExpressionContext extends ParameterOrIntegerContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	parameterExpr() {
	    return this.getTypedRuleContext(ParameterExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterParameterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitParameterExpression(this);
		}
	}


}

SqlBaseParser.ParameterExpressionContext = ParameterExpressionContext;

class IntAsLiteralContext extends ParameterOrIntegerContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterIntAsLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitIntAsLiteral(this);
		}
	}


}

SqlBaseParser.IntAsLiteralContext = IntAsLiteralContext;

class ParameterOrIdentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_parameterOrIdent;
    }

	parameterExpr() {
	    return this.getTypedRuleContext(ParameterExprContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterParameterOrIdent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitParameterOrIdent(this);
		}
	}


}



class ParameterOrStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_parameterOrString;
    }

	parameterExpr() {
	    return this.getTypedRuleContext(ParameterExprContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterParameterOrString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitParameterOrString(this);
		}
	}


}



class ParameterExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_parameterExpr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ParameterPlaceholderContext extends ParameterExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	QUESTION() {
	    return this.getToken(SqlBaseParser.QUESTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterParameterPlaceholder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitParameterPlaceholder(this);
		}
	}


}

SqlBaseParser.ParameterPlaceholderContext = ParameterPlaceholderContext;

class PositionalParameterContext extends ParameterExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DOLLAR() {
	    return this.getToken(SqlBaseParser.DOLLAR, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterPositionalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitPositionalParameter(this);
		}
	}


}

SqlBaseParser.PositionalParameterContext = PositionalParameterContext;

class NullLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_nullLiteral;
    }

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitNullLiteral(this);
		}
	}


}



class EscapedCharsStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_escapedCharsStringLiteral;
    }

	ESCAPED_STRING() {
	    return this.getToken(SqlBaseParser.ESCAPED_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterEscapedCharsStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitEscapedCharsStringLiteral(this);
		}
	}


}



class DollarQuotedStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_dollarQuotedStringLiteral;
    }

	BEGIN_DOLLAR_QUOTED_STRING() {
	    return this.getToken(SqlBaseParser.BEGIN_DOLLAR_QUOTED_STRING, 0);
	};

	END_DOLLAR_QUOTED_STRING() {
	    return this.getToken(SqlBaseParser.END_DOLLAR_QUOTED_STRING, 0);
	};

	DOLLAR_QUOTED_STRING_BODY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.DOLLAR_QUOTED_STRING_BODY);
	    } else {
	        return this.getToken(SqlBaseParser.DOLLAR_QUOTED_STRING_BODY, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDollarQuotedStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDollarQuotedStringLiteral(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_stringLiteral;
    }

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	dollarQuotedStringLiteral() {
	    return this.getTypedRuleContext(DollarQuotedStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class BitStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_bitString;
    }

	BIT_STRING() {
	    return this.getToken(SqlBaseParser.BIT_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterBitString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitBitString(this);
		}
	}


}



class SubscriptSafeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_subscriptSafe;
        this.value = null;
        this.index = null;
    }

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	OPEN_SQUARE_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_SQUARE_BRACKET, 0);
	};

	CLOSE_SQUARE_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_SQUARE_BRACKET, 0);
	};

	subscriptSafe() {
	    return this.getTypedRuleContext(SubscriptSafeContext,0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSubscriptSafe(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSubscriptSafe(this);
		}
	}


}



class CmpOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_cmpOp;
    }

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(SqlBaseParser.NEQ, 0);
	};

	LT() {
	    return this.getToken(SqlBaseParser.LT, 0);
	};

	LTE() {
	    return this.getToken(SqlBaseParser.LTE, 0);
	};

	GT() {
	    return this.getToken(SqlBaseParser.GT, 0);
	};

	GTE() {
	    return this.getToken(SqlBaseParser.GTE, 0);
	};

	LLT() {
	    return this.getToken(SqlBaseParser.LLT, 0);
	};

	REGEX_MATCH() {
	    return this.getToken(SqlBaseParser.REGEX_MATCH, 0);
	};

	REGEX_NO_MATCH() {
	    return this.getToken(SqlBaseParser.REGEX_NO_MATCH, 0);
	};

	REGEX_MATCH_CI() {
	    return this.getToken(SqlBaseParser.REGEX_MATCH_CI, 0);
	};

	REGEX_NO_MATCH_CI() {
	    return this.getToken(SqlBaseParser.REGEX_NO_MATCH_CI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCmpOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCmpOp(this);
		}
	}


}



class SetCmpQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_setCmpQuantifier;
    }

	ANY() {
	    return this.getToken(SqlBaseParser.ANY, 0);
	};

	SOME() {
	    return this.getToken(SqlBaseParser.SOME, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSetCmpQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSetCmpQuantifier(this);
		}
	}


}



class WhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_whenClause;
        this.condition = null;
        this.result = null;
    }

	WHEN() {
	    return this.getToken(SqlBaseParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(SqlBaseParser.THEN, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitWhenClause(this);
		}
	}


}



class NamedWindowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_namedWindow;
        this.name = null;
    }

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	windowDefinition() {
	    return this.getTypedRuleContext(WindowDefinitionContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterNamedWindow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitNamedWindow(this);
		}
	}


}



class OverContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_over;
    }

	OVER() {
	    return this.getToken(SqlBaseParser.OVER, 0);
	};

	windowDefinition() {
	    return this.getTypedRuleContext(WindowDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterOver(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitOver(this);
		}
	}


}



class WindowDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_windowDefinition;
        this.windowRef = null;
        this._expr = null;
        this.partition = [];
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	PARTITION() {
	    return this.getToken(SqlBaseParser.PARTITION, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.BY);
	    } else {
	        return this.getToken(SqlBaseParser.BY, i);
	    }
	};


	ORDER() {
	    return this.getToken(SqlBaseParser.ORDER, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	windowFrame() {
	    return this.getTypedRuleContext(WindowFrameContext,0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterWindowDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitWindowDefinition(this);
		}
	}


}



class WindowFrameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_windowFrame;
        this.frameType = null;
        this.start = null;
        this.end = null;
    }

	RANGE() {
	    return this.getToken(SqlBaseParser.RANGE, 0);
	};

	frameBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FrameBoundContext);
	    } else {
	        return this.getTypedRuleContext(FrameBoundContext,i);
	    }
	};

	ROWS() {
	    return this.getToken(SqlBaseParser.ROWS, 0);
	};

	BETWEEN() {
	    return this.getToken(SqlBaseParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterWindowFrame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitWindowFrame(this);
		}
	}


}



class FrameBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_frameBound;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BoundedFrameContext extends FrameBoundContext {

    constructor(parser, ctx) {
        super(parser);
        this.boundType = null;;
        super.copyFrom(ctx);
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	PRECEDING() {
	    return this.getToken(SqlBaseParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(SqlBaseParser.FOLLOWING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterBoundedFrame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitBoundedFrame(this);
		}
	}


}

SqlBaseParser.BoundedFrameContext = BoundedFrameContext;

class UnboundedFrameContext extends FrameBoundContext {

    constructor(parser, ctx) {
        super(parser);
        this.boundType = null;;
        super.copyFrom(ctx);
    }

	UNBOUNDED() {
	    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
	};

	PRECEDING() {
	    return this.getToken(SqlBaseParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(SqlBaseParser.FOLLOWING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterUnboundedFrame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitUnboundedFrame(this);
		}
	}


}

SqlBaseParser.UnboundedFrameContext = UnboundedFrameContext;

class CurrentRowBoundContext extends FrameBoundContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CURRENT() {
	    return this.getToken(SqlBaseParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCurrentRowBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCurrentRowBound(this);
		}
	}


}

SqlBaseParser.CurrentRowBoundContext = CurrentRowBoundContext;

class QnamesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_qnames;
    }

	qname = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QnameContext);
	    } else {
	        return this.getTypedRuleContext(QnameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterQnames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitQnames(this);
		}
	}


}



class QnameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_qname;
    }

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.DOT);
	    } else {
	        return this.getToken(SqlBaseParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterQname(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitQname(this);
		}
	}


}



class SpaceSeparatedIdentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_spaceSeparatedIdents;
    }

	identWithOrWithoutValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentWithOrWithoutValueContext);
	    } else {
	        return this.getTypedRuleContext(IdentWithOrWithoutValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSpaceSeparatedIdents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSpaceSeparatedIdents(this);
		}
	}


}



class IdentWithOrWithoutValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_identWithOrWithoutValue;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	parameterOrSimpleLiteral() {
	    return this.getTypedRuleContext(ParameterOrSimpleLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterIdentWithOrWithoutValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitIdentWithOrWithoutValue(this);
		}
	}


}



class IdentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_idents;
    }

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterIdents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitIdents(this);
		}
	}


}



class IdentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_ident;
    }

	unquotedIdent() {
	    return this.getTypedRuleContext(UnquotedIdentContext,0);
	};

	quotedIdent() {
	    return this.getTypedRuleContext(QuotedIdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterIdent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitIdent(this);
		}
	}


}



class UnquotedIdentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_unquotedIdent;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DigitIdentifierContext extends UnquotedIdentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DIGIT_IDENTIFIER() {
	    return this.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDigitIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDigitIdentifier(this);
		}
	}


}

SqlBaseParser.DigitIdentifierContext = DigitIdentifierContext;

class UnquotedIdentifierContext extends UnquotedIdentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IDENTIFIER() {
	    return this.getToken(SqlBaseParser.IDENTIFIER, 0);
	};

	nonReserved() {
	    return this.getTypedRuleContext(NonReservedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterUnquotedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitUnquotedIdentifier(this);
		}
	}


}

SqlBaseParser.UnquotedIdentifierContext = UnquotedIdentifierContext;

class QuotedIdentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_quotedIdent;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BackQuotedIdentifierContext extends QuotedIdentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BACKQUOTED_IDENTIFIER() {
	    return this.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterBackQuotedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitBackQuotedIdentifier(this);
		}
	}


}

SqlBaseParser.BackQuotedIdentifierContext = BackQuotedIdentifierContext;

class QuotedIdentifierContext extends QuotedIdentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	QUOTED_IDENTIFIER() {
	    return this.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterQuotedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitQuotedIdentifier(this);
		}
	}


}

SqlBaseParser.QuotedIdentifierContext = QuotedIdentifierContext;

class StringLiteralOrIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_stringLiteralOrIdentifier;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterStringLiteralOrIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitStringLiteralOrIdentifier(this);
		}
	}


}



class StringLiteralOrIdentifierOrQnameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_stringLiteralOrIdentifierOrQname;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterStringLiteralOrIdentifierOrQname(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitStringLiteralOrIdentifierOrQname(this);
		}
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_numericLiteral;
    }

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitNumericLiteral(this);
		}
	}


}



class IntervalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_intervalLiteral;
        this.sign = null;
        this.from = null;
        this.to = null;
    }

	INTERVAL() {
	    return this.getToken(SqlBaseParser.INTERVAL, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	intervalField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntervalFieldContext);
	    } else {
	        return this.getTypedRuleContext(IntervalFieldContext,i);
	    }
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	PLUS() {
	    return this.getToken(SqlBaseParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterIntervalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitIntervalLiteral(this);
		}
	}


}



class IntervalFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_intervalField;
    }

	YEAR() {
	    return this.getToken(SqlBaseParser.YEAR, 0);
	};

	MONTH() {
	    return this.getToken(SqlBaseParser.MONTH, 0);
	};

	DAY() {
	    return this.getToken(SqlBaseParser.DAY, 0);
	};

	HOUR() {
	    return this.getToken(SqlBaseParser.HOUR, 0);
	};

	MINUTE() {
	    return this.getToken(SqlBaseParser.MINUTE, 0);
	};

	SECOND() {
	    return this.getToken(SqlBaseParser.SECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterIntervalField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitIntervalField(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_booleanLiteral;
    }

	TRUE() {
	    return this.getToken(SqlBaseParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(SqlBaseParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class DecimalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_decimalLiteral;
    }

	DECIMAL_VALUE() {
	    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDecimalLiteral(this);
		}
	}


}



class IntegerLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_integerLiteral;
    }

	INTEGER_VALUE() {
	    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitIntegerLiteral(this);
		}
	}


}



class ObjectKeyValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_objectKeyValue;
        this.key = null;
        this.value = null;
    }

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterObjectKeyValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitObjectKeyValue(this);
		}
	}


}



class InsertSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_insertSource;
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterInsertSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitInsertSource(this);
		}
	}


}



class OnConflictContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_onConflict;
    }

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	CONFLICT() {
	    return this.getToken(SqlBaseParser.CONFLICT, 0);
	};

	DO() {
	    return this.getToken(SqlBaseParser.DO, 0);
	};

	NOTHING() {
	    return this.getToken(SqlBaseParser.NOTHING, 0);
	};

	conflictTarget() {
	    return this.getTypedRuleContext(ConflictTargetContext,0);
	};

	UPDATE() {
	    return this.getToken(SqlBaseParser.UPDATE, 0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	assignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterOnConflict(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitOnConflict(this);
		}
	}


}



class ConflictTargetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_conflictTarget;
    }

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	subscriptSafe = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubscriptSafeContext);
	    } else {
	        return this.getTypedRuleContext(SubscriptSafeContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterConflictTarget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitConflictTarget(this);
		}
	}


}



class ValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_values;
    }

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitValues(this);
		}
	}


}



class ColumnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_columns;
    }

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	primaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryExpressionContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitColumns(this);
		}
	}


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_assignment;
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAssignment(this);
		}
	}


}



class CreateStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_createStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CreateTableContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	tableElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableElementContext);
	    } else {
	        return this.getTypedRuleContext(TableElementContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	partitionedByOrClusteredInto() {
	    return this.getTypedRuleContext(PartitionedByOrClusteredIntoContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreateTable(this);
		}
	}


}

SqlBaseParser.CreateTableContext = CreateTableContext;

class CreateSubscriptionContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.conninfo = null;;
        this.publications = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	SUBSCRIPTION() {
	    return this.getToken(SqlBaseParser.SUBSCRIPTION, 0);
	};

	CONNECTION() {
	    return this.getToken(SqlBaseParser.CONNECTION, 0);
	};

	PUBLICATION() {
	    return this.getToken(SqlBaseParser.PUBLICATION, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	idents() {
	    return this.getTypedRuleContext(IdentsContext,0);
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreateSubscription(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreateSubscription(this);
		}
	}


}

SqlBaseParser.CreateSubscriptionContext = CreateSubscriptionContext;

class CreateServerContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.fdw = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	SERVER() {
	    return this.getToken(SqlBaseParser.SERVER, 0);
	};

	FOREIGN() {
	    return this.getToken(SqlBaseParser.FOREIGN, 0);
	};

	DATA() {
	    return this.getToken(SqlBaseParser.DATA, 0);
	};

	WRAPPER() {
	    return this.getToken(SqlBaseParser.WRAPPER, 0);
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	kvOptions() {
	    return this.getTypedRuleContext(KvOptionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreateServer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreateServer(this);
		}
	}


}

SqlBaseParser.CreateServerContext = CreateServerContext;

class CreateRoleContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.options = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(SqlBaseParser.USER, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	spaceSeparatedIdents() {
	    return this.getTypedRuleContext(SpaceSeparatedIdentsContext,0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreateRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreateRole(this);
		}
	}


}

SqlBaseParser.CreateRoleContext = CreateRoleContext;

class CreatePublicationContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	PUBLICATION() {
	    return this.getToken(SqlBaseParser.PUBLICATION, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	TABLES() {
	    return this.getToken(SqlBaseParser.TABLES, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qname = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QnameContext);
	    } else {
	        return this.getTypedRuleContext(QnameContext,i);
	    }
	};

	ASTERISK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.ASTERISK);
	    } else {
	        return this.getToken(SqlBaseParser.ASTERISK, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreatePublication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreatePublication(this);
		}
	}


}

SqlBaseParser.CreatePublicationContext = CreatePublicationContext;

class CreateUserMappingContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.server = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(SqlBaseParser.USER, 0);
	};

	MAPPING() {
	    return this.getToken(SqlBaseParser.MAPPING, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	mappedUser() {
	    return this.getTypedRuleContext(MappedUserContext,0);
	};

	SERVER() {
	    return this.getToken(SqlBaseParser.SERVER, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	kvOptions() {
	    return this.getTypedRuleContext(KvOptionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreateUserMapping(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreateUserMapping(this);
		}
	}


}

SqlBaseParser.CreateUserMappingContext = CreateUserMappingContext;

class CreateBlobTableContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.numShards = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	BLOB() {
	    return this.getToken(SqlBaseParser.BLOB, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	blobClusteredInto() {
	    return this.getTypedRuleContext(BlobClusteredIntoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreateBlobTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreateBlobTable(this);
		}
	}


}

SqlBaseParser.CreateBlobTableContext = CreateBlobTableContext;

class CreateAnalyzerContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.extendedName = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	ANALYZER() {
	    return this.getToken(SqlBaseParser.ANALYZER, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	analyzerElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnalyzerElementContext);
	    } else {
	        return this.getTypedRuleContext(AnalyzerElementContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	EXTENDS() {
	    return this.getToken(SqlBaseParser.EXTENDS, 0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreateAnalyzer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreateAnalyzer(this);
		}
	}


}

SqlBaseParser.CreateAnalyzerContext = CreateAnalyzerContext;

class CreateRepositoryContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.type = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	REPOSITORY() {
	    return this.getToken(SqlBaseParser.REPOSITORY, 0);
	};

	TYPE() {
	    return this.getToken(SqlBaseParser.TYPE, 0);
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreateRepository(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreateRepository(this);
		}
	}


}

SqlBaseParser.CreateRepositoryContext = CreateRepositoryContext;

class CreateTableAsContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	insertSource() {
	    return this.getTypedRuleContext(InsertSourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreateTableAs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreateTableAs(this);
		}
	}


}

SqlBaseParser.CreateTableAsContext = CreateTableAsContext;

class CreateForeignTableContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.tableName = null;;
        this.server = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	FOREIGN() {
	    return this.getToken(SqlBaseParser.FOREIGN, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	tableElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableElementContext);
	    } else {
	        return this.getTypedRuleContext(TableElementContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	SERVER() {
	    return this.getToken(SqlBaseParser.SERVER, 0);
	};

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	kvOptions() {
	    return this.getTypedRuleContext(KvOptionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreateForeignTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreateForeignTable(this);
		}
	}


}

SqlBaseParser.CreateForeignTableContext = CreateForeignTableContext;

class CreateSnapshotContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	SNAPSHOT() {
	    return this.getToken(SqlBaseParser.SNAPSHOT, 0);
	};

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	tableWithPartitions() {
	    return this.getTypedRuleContext(TableWithPartitionsContext,0);
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreateSnapshot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreateSnapshot(this);
		}
	}


}

SqlBaseParser.CreateSnapshotContext = CreateSnapshotContext;

class CreateFunctionContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.returnType = null;;
        this.language = null;;
        this.body = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	RETURNS() {
	    return this.getToken(SqlBaseParser.RETURNS, 0);
	};

	LANGUAGE() {
	    return this.getToken(SqlBaseParser.LANGUAGE, 0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	parameterOrIdent() {
	    return this.getTypedRuleContext(ParameterOrIdentContext,0);
	};

	parameterOrString() {
	    return this.getTypedRuleContext(ParameterOrStringContext,0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	functionArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionArgumentContext);
	    } else {
	        return this.getTypedRuleContext(FunctionArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreateFunction(this);
		}
	}


}

SqlBaseParser.CreateFunctionContext = CreateFunctionContext;

class CreateViewContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	queryOptParens() {
	    return this.getTypedRuleContext(QueryOptParensContext,0);
	};

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCreateView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCreateView(this);
		}
	}


}

SqlBaseParser.CreateViewContext = CreateViewContext;

class MappedUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_mappedUser;
        this.userName = null;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	USER() {
	    return this.getToken(SqlBaseParser.USER, 0);
	};

	CURRENT_ROLE() {
	    return this.getToken(SqlBaseParser.CURRENT_ROLE, 0);
	};

	CURRENT_USER() {
	    return this.getToken(SqlBaseParser.CURRENT_USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterMappedUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitMappedUser(this);
		}
	}


}



class KvOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_kvOptions;
    }

	OPTIONS() {
	    return this.getToken(SqlBaseParser.OPTIONS, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	kvOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KvOptionContext);
	    } else {
	        return this.getTypedRuleContext(KvOptionContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterKvOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitKvOptions(this);
		}
	}


}



class KvOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_kvOption;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	parameterOrLiteral() {
	    return this.getTypedRuleContext(ParameterOrLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterKvOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitKvOption(this);
		}
	}


}



class FunctionArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_functionArgument;
        this.name = null;
        this.type = null;
    }

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterFunctionArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitFunctionArgument(this);
		}
	}


}



class AlterTableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_alterTableDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableWithPartitionDefaultContext extends AlterTableDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableWithPartition() {
	    return this.getTypedRuleContext(TableWithPartitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterTableWithPartitionDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitTableWithPartitionDefault(this);
		}
	}


}

SqlBaseParser.TableWithPartitionDefaultContext = TableWithPartitionDefaultContext;

class TableOnlyContext extends AlterTableDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ONLY() {
	    return this.getToken(SqlBaseParser.ONLY, 0);
	};

	qname() {
	    return this.getTypedRuleContext(QnameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterTableOnly(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitTableOnly(this);
		}
	}


}

SqlBaseParser.TableOnlyContext = TableOnlyContext;

class AlterSubscriptionModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_alterSubscriptionMode;
    }

	ENABLE() {
	    return this.getToken(SqlBaseParser.ENABLE, 0);
	};

	DISABLE() {
	    return this.getToken(SqlBaseParser.DISABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAlterSubscriptionMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAlterSubscriptionMode(this);
		}
	}


}



class PartitionedByOrClusteredIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_partitionedByOrClusteredInto;
    }

	partitionedBy() {
	    return this.getTypedRuleContext(PartitionedByContext,0);
	};

	clusteredBy() {
	    return this.getTypedRuleContext(ClusteredByContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterPartitionedByOrClusteredInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitPartitionedByOrClusteredInto(this);
		}
	}


}



class PartitionedByContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_partitionedBy;
    }

	PARTITIONED() {
	    return this.getToken(SqlBaseParser.PARTITIONED, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	columns() {
	    return this.getTypedRuleContext(ColumnsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterPartitionedBy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitPartitionedBy(this);
		}
	}


}



class ClusteredByContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_clusteredBy;
        this.routing = null;
        this.numShards = null;
    }

	CLUSTERED() {
	    return this.getToken(SqlBaseParser.CLUSTERED, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	INTO() {
	    return this.getToken(SqlBaseParser.INTO, 0);
	};

	SHARDS() {
	    return this.getToken(SqlBaseParser.SHARDS, 0);
	};

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	parameterOrInteger() {
	    return this.getTypedRuleContext(ParameterOrIntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterClusteredBy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitClusteredBy(this);
		}
	}


}



class BlobClusteredIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_blobClusteredInto;
        this.numShards = null;
    }

	CLUSTERED() {
	    return this.getToken(SqlBaseParser.CLUSTERED, 0);
	};

	INTO() {
	    return this.getToken(SqlBaseParser.INTO, 0);
	};

	SHARDS() {
	    return this.getToken(SqlBaseParser.SHARDS, 0);
	};

	parameterOrInteger() {
	    return this.getTypedRuleContext(ParameterOrIntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterBlobClusteredInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitBlobClusteredInto(this);
		}
	}


}



class TableElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableElement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PrimaryKeyConstraintTableLevelContext extends TableElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	primaryKeyContraint() {
	    return this.getTypedRuleContext(PrimaryKeyContraintContext,0);
	};

	columns() {
	    return this.getTypedRuleContext(ColumnsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterPrimaryKeyConstraintTableLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitPrimaryKeyConstraintTableLevel(this);
		}
	}


}

SqlBaseParser.PrimaryKeyConstraintTableLevelContext = PrimaryKeyConstraintTableLevelContext;

class TableCheckConstraintContext extends TableElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	checkConstraint() {
	    return this.getTypedRuleContext(CheckConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterTableCheckConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitTableCheckConstraint(this);
		}
	}


}

SqlBaseParser.TableCheckConstraintContext = TableCheckConstraintContext;

class IndexDefinitionContext extends TableElementContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.method = null;;
        super.copyFrom(ctx);
    }

	INDEX() {
	    return this.getToken(SqlBaseParser.INDEX, 0);
	};

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	columns() {
	    return this.getTypedRuleContext(ColumnsContext,0);
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterIndexDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitIndexDefinition(this);
		}
	}


}

SqlBaseParser.IndexDefinitionContext = IndexDefinitionContext;

class ColumnDefinitionDefaultContext extends TableElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterColumnDefinitionDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitColumnDefinitionDefault(this);
		}
	}


}

SqlBaseParser.ColumnDefinitionDefaultContext = ColumnDefinitionDefaultContext;

class ColumnDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_columnDefinition;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	columnConstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnConstraintContext);
	    } else {
	        return this.getTypedRuleContext(ColumnConstraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterColumnDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitColumnDefinition(this);
		}
	}


}



class AddColumnDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_addColumnDefinition;
    }

	ADD() {
	    return this.getToken(SqlBaseParser.ADD, 0);
	};

	subscriptSafe() {
	    return this.getTypedRuleContext(SubscriptSafeContext,0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	columnConstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnConstraintContext);
	    } else {
	        return this.getTypedRuleContext(ColumnConstraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAddColumnDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAddColumnDefinition(this);
		}
	}


}



class DropColumnDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_dropColumnDefinition;
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	subscriptSafe() {
	    return this.getTypedRuleContext(SubscriptSafeContext,0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDropColumnDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDropColumnDefinition(this);
		}
	}


}



class RerouteOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_rerouteOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RerouteMoveShardContext extends RerouteOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.shardId = null;;
        this.fromNodeId = null;;
        this.toNodeId = null;;
        super.copyFrom(ctx);
    }

	MOVE() {
	    return this.getToken(SqlBaseParser.MOVE, 0);
	};

	SHARD() {
	    return this.getToken(SqlBaseParser.SHARD, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	parameterOrInteger() {
	    return this.getTypedRuleContext(ParameterOrIntegerContext,0);
	};

	parameterOrString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterOrStringContext);
	    } else {
	        return this.getTypedRuleContext(ParameterOrStringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterRerouteMoveShard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitRerouteMoveShard(this);
		}
	}


}

SqlBaseParser.RerouteMoveShardContext = RerouteMoveShardContext;

class RerouteAllocateReplicaShardContext extends RerouteOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.shardId = null;;
        this.nodeId = null;;
        super.copyFrom(ctx);
    }

	ALLOCATE() {
	    return this.getToken(SqlBaseParser.ALLOCATE, 0);
	};

	REPLICA() {
	    return this.getToken(SqlBaseParser.REPLICA, 0);
	};

	SHARD() {
	    return this.getToken(SqlBaseParser.SHARD, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	parameterOrInteger() {
	    return this.getTypedRuleContext(ParameterOrIntegerContext,0);
	};

	parameterOrString() {
	    return this.getTypedRuleContext(ParameterOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterRerouteAllocateReplicaShard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitRerouteAllocateReplicaShard(this);
		}
	}


}

SqlBaseParser.RerouteAllocateReplicaShardContext = RerouteAllocateReplicaShardContext;

class ReroutePromoteReplicaContext extends RerouteOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.shardId = null;;
        this.nodeId = null;;
        super.copyFrom(ctx);
    }

	PROMOTE() {
	    return this.getToken(SqlBaseParser.PROMOTE, 0);
	};

	REPLICA() {
	    return this.getToken(SqlBaseParser.REPLICA, 0);
	};

	SHARD() {
	    return this.getToken(SqlBaseParser.SHARD, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	parameterOrInteger() {
	    return this.getTypedRuleContext(ParameterOrIntegerContext,0);
	};

	parameterOrString() {
	    return this.getTypedRuleContext(ParameterOrStringContext,0);
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterReroutePromoteReplica(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitReroutePromoteReplica(this);
		}
	}


}

SqlBaseParser.ReroutePromoteReplicaContext = ReroutePromoteReplicaContext;

class RerouteCancelShardContext extends RerouteOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.shardId = null;;
        this.nodeId = null;;
        super.copyFrom(ctx);
    }

	CANCEL() {
	    return this.getToken(SqlBaseParser.CANCEL, 0);
	};

	SHARD() {
	    return this.getToken(SqlBaseParser.SHARD, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	parameterOrInteger() {
	    return this.getTypedRuleContext(ParameterOrIntegerContext,0);
	};

	parameterOrString() {
	    return this.getTypedRuleContext(ParameterOrStringContext,0);
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterRerouteCancelShard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitRerouteCancelShard(this);
		}
	}


}

SqlBaseParser.RerouteCancelShardContext = RerouteCancelShardContext;

class DataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_dataType;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ObjectDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	objectTypeDefinition() {
	    return this.getTypedRuleContext(ObjectTypeDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterObjectDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitObjectDataType(this);
		}
	}


}

SqlBaseParser.ObjectDataTypeContext = ObjectDataTypeContext;

class MaybeParametrizedDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	baseDataType() {
	    return this.getTypedRuleContext(BaseDataTypeContext,0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	integerLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntegerLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntegerLiteralContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterMaybeParametrizedDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitMaybeParametrizedDataType(this);
		}
	}


}

SqlBaseParser.MaybeParametrizedDataTypeContext = MaybeParametrizedDataTypeContext;

class ArrayDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ARRAY() {
	    return this.getToken(SqlBaseParser.ARRAY, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	EMPTY_SQUARE_BRACKET() {
	    return this.getToken(SqlBaseParser.EMPTY_SQUARE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterArrayDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitArrayDataType(this);
		}
	}


}

SqlBaseParser.ArrayDataTypeContext = ArrayDataTypeContext;

class BaseDataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_baseDataType;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DefinedDataTypeDefaultContext extends BaseDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	definedDataType() {
	    return this.getTypedRuleContext(DefinedDataTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDefinedDataTypeDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDefinedDataTypeDefault(this);
		}
	}


}

SqlBaseParser.DefinedDataTypeDefaultContext = DefinedDataTypeDefaultContext;

class IdentDataTypeContext extends BaseDataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterIdentDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitIdentDataType(this);
		}
	}


}

SqlBaseParser.IdentDataTypeContext = IdentDataTypeContext;

class DefinedDataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_definedDataType;
    }

	DOUBLE() {
	    return this.getToken(SqlBaseParser.DOUBLE, 0);
	};

	PRECISION() {
	    return this.getToken(SqlBaseParser.PRECISION, 0);
	};

	TIMESTAMP() {
	    return this.getToken(SqlBaseParser.TIMESTAMP, 0);
	};

	WITHOUT() {
	    return this.getToken(SqlBaseParser.WITHOUT, 0);
	};

	TIME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.TIME);
	    } else {
	        return this.getToken(SqlBaseParser.TIME, i);
	    }
	};


	ZONE() {
	    return this.getToken(SqlBaseParser.ZONE, 0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	CHARACTER() {
	    return this.getToken(SqlBaseParser.CHARACTER, 0);
	};

	VARYING() {
	    return this.getToken(SqlBaseParser.VARYING, 0);
	};

	CHAR_SPECIAL() {
	    return this.getToken(SqlBaseParser.CHAR_SPECIAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDefinedDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDefinedDataType(this);
		}
	}


}



class ObjectTypeDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_objectTypeDefinition;
        this.type = null;
    }

	OBJECT() {
	    return this.getToken(SqlBaseParser.OBJECT, 0);
	};

	OPEN_ROUND_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.OPEN_ROUND_BRACKET);
	    } else {
	        return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, i);
	    }
	};


	CLOSE_ROUND_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.CLOSE_ROUND_BRACKET);
	    } else {
	        return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, i);
	    }
	};


	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	columnDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ColumnDefinitionContext,i);
	    }
	};

	DYNAMIC() {
	    return this.getToken(SqlBaseParser.DYNAMIC, 0);
	};

	STRICT() {
	    return this.getToken(SqlBaseParser.STRICT, 0);
	};

	IGNORED() {
	    return this.getToken(SqlBaseParser.IGNORED, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterObjectTypeDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitObjectTypeDefinition(this);
		}
	}


}



class ColumnConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_columnConstraint;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ColumnConstraintPrimaryKeyContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	primaryKeyContraint() {
	    return this.getTypedRuleContext(PrimaryKeyContraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterColumnConstraintPrimaryKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitColumnConstraintPrimaryKey(this);
		}
	}


}

SqlBaseParser.ColumnConstraintPrimaryKeyContext = ColumnConstraintPrimaryKeyContext;

class ColumnStorageDefinitionContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STORAGE() {
	    return this.getToken(SqlBaseParser.STORAGE, 0);
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterColumnStorageDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitColumnStorageDefinition(this);
		}
	}


}

SqlBaseParser.ColumnStorageDefinitionContext = ColumnStorageDefinitionContext;

class ColumnCheckConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	checkConstraint() {
	    return this.getTypedRuleContext(CheckConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterColumnCheckConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitColumnCheckConstraint(this);
		}
	}


}

SqlBaseParser.ColumnCheckConstraintContext = ColumnCheckConstraintContext;

class ColumnConstraintNullContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterColumnConstraintNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitColumnConstraintNull(this);
		}
	}


}

SqlBaseParser.ColumnConstraintNullContext = ColumnConstraintNullContext;

class ColumnIndexConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.method = null;;
        super.copyFrom(ctx);
    }

	INDEX() {
	    return this.getToken(SqlBaseParser.INDEX, 0);
	};

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterColumnIndexConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitColumnIndexConstraint(this);
		}
	}


}

SqlBaseParser.ColumnIndexConstraintContext = ColumnIndexConstraintContext;

class ColumnDefaultConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.defaultExpr = null;;
        super.copyFrom(ctx);
    }

	DEFAULT() {
	    return this.getToken(SqlBaseParser.DEFAULT, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(SqlBaseParser.CONSTRAINT, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterColumnDefaultConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitColumnDefaultConstraint(this);
		}
	}


}

SqlBaseParser.ColumnDefaultConstraintContext = ColumnDefaultConstraintContext;

class ColumnGeneratedConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.generatedExpr = null;;
        super.copyFrom(ctx);
    }

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(SqlBaseParser.CONSTRAINT, 0);
	};

	GENERATED() {
	    return this.getToken(SqlBaseParser.GENERATED, 0);
	};

	ALWAYS() {
	    return this.getToken(SqlBaseParser.ALWAYS, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterColumnGeneratedConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitColumnGeneratedConstraint(this);
		}
	}


}

SqlBaseParser.ColumnGeneratedConstraintContext = ColumnGeneratedConstraintContext;

class ColumnIndexOffContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INDEX() {
	    return this.getToken(SqlBaseParser.INDEX, 0);
	};

	OFF() {
	    return this.getToken(SqlBaseParser.OFF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterColumnIndexOff(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitColumnIndexOff(this);
		}
	}


}

SqlBaseParser.ColumnIndexOffContext = ColumnIndexOffContext;

class ColumnConstraintNotNullContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterColumnConstraintNotNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitColumnConstraintNotNull(this);
		}
	}


}

SqlBaseParser.ColumnConstraintNotNullContext = ColumnConstraintNotNullContext;

class PrimaryKeyContraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_primaryKeyContraint;
        this.name = null;
    }

	PRIMARY_KEY() {
	    return this.getToken(SqlBaseParser.PRIMARY_KEY, 0);
	};

	CONSTRAINT() {
	    return this.getToken(SqlBaseParser.CONSTRAINT, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterPrimaryKeyContraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitPrimaryKeyContraint(this);
		}
	}


}



class CheckConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_checkConstraint;
        this.name = null;
        this.expression = null;
    }

	CHECK() {
	    return this.getToken(SqlBaseParser.CHECK, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(SqlBaseParser.CONSTRAINT, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCheckConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCheckConstraint(this);
		}
	}


}



class WithPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_withProperties;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class WithGenericPropertiesContext extends WithPropertiesContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	genericProperties() {
	    return this.getTypedRuleContext(GenericPropertiesContext,0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterWithGenericProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitWithGenericProperties(this);
		}
	}


}

SqlBaseParser.WithGenericPropertiesContext = WithGenericPropertiesContext;

class GenericPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_genericProperties;
    }

	genericProperty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GenericPropertyContext);
	    } else {
	        return this.getTypedRuleContext(GenericPropertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterGenericProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitGenericProperties(this);
		}
	}


}



class GenericPropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_genericProperty;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterGenericProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitGenericProperty(this);
		}
	}


}



class ExplainOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_explainOptions;
    }

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	explainOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExplainOptionContext);
	    } else {
	        return this.getTypedRuleContext(ExplainOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterExplainOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitExplainOptions(this);
		}
	}


}



class ExplainOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_explainOption;
    }

	ANALYZE() {
	    return this.getToken(SqlBaseParser.ANALYZE, 0);
	};

	COSTS() {
	    return this.getToken(SqlBaseParser.COSTS, 0);
	};

	VERBOSE() {
	    return this.getToken(SqlBaseParser.VERBOSE, 0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterExplainOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitExplainOption(this);
		}
	}


}



class MatchPredicateIdentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_matchPredicateIdents;
        this.matchPred = null;
    }

	matchPredicateIdent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MatchPredicateIdentContext);
	    } else {
	        return this.getTypedRuleContext(MatchPredicateIdentContext,i);
	    }
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterMatchPredicateIdents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitMatchPredicateIdents(this);
		}
	}


}



class MatchPredicateIdentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_matchPredicateIdent;
        this.boost = null;
    }

	subscriptSafe() {
	    return this.getTypedRuleContext(SubscriptSafeContext,0);
	};

	parameterOrSimpleLiteral() {
	    return this.getTypedRuleContext(ParameterOrSimpleLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterMatchPredicateIdent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitMatchPredicateIdent(this);
		}
	}


}



class AnalyzerElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_analyzerElement;
    }

	tokenizer() {
	    return this.getTypedRuleContext(TokenizerContext,0);
	};

	tokenFilters() {
	    return this.getTypedRuleContext(TokenFiltersContext,0);
	};

	charFilters() {
	    return this.getTypedRuleContext(CharFiltersContext,0);
	};

	genericProperty() {
	    return this.getTypedRuleContext(GenericPropertyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterAnalyzerElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitAnalyzerElement(this);
		}
	}


}



class TokenizerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tokenizer;
    }

	TOKENIZER() {
	    return this.getToken(SqlBaseParser.TOKENIZER, 0);
	};

	namedProperties() {
	    return this.getTypedRuleContext(NamedPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterTokenizer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitTokenizer(this);
		}
	}


}



class TokenFiltersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tokenFilters;
    }

	TOKEN_FILTERS() {
	    return this.getToken(SqlBaseParser.TOKEN_FILTERS, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	namedProperties = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedPropertiesContext);
	    } else {
	        return this.getTypedRuleContext(NamedPropertiesContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterTokenFilters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitTokenFilters(this);
		}
	}


}



class CharFiltersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_charFilters;
    }

	CHAR_FILTERS() {
	    return this.getToken(SqlBaseParser.CHAR_FILTERS, 0);
	};

	OPEN_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0);
	};

	namedProperties = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedPropertiesContext);
	    } else {
	        return this.getTypedRuleContext(NamedPropertiesContext,i);
	    }
	};

	CLOSE_ROUND_BRACKET() {
	    return this.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterCharFilters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitCharFilters(this);
		}
	}


}



class NamedPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_namedProperties;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	withProperties() {
	    return this.getTypedRuleContext(WithPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterNamedProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitNamedProperties(this);
		}
	}


}



class TableWithPartitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableWithPartitions;
    }

	tableWithPartition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableWithPartitionContext);
	    } else {
	        return this.getTypedRuleContext(TableWithPartitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.COMMA);
	    } else {
	        return this.getToken(SqlBaseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterTableWithPartitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitTableWithPartitions(this);
		}
	}


}



class SetGlobalAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_setGlobalAssignment;
        this.name = null;
        this.value = null;
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSetGlobalAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSetGlobalAssignment(this);
		}
	}


}



class SetExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_setExpr;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	on() {
	    return this.getTypedRuleContext(OnContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSetExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSetExpr(this);
		}
	}


}



class OnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_on;
    }

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterOn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitOn(this);
		}
	}


}



class SecurableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_securable;
    }

	SCHEMA() {
	    return this.getToken(SqlBaseParser.SCHEMA, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterSecurable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitSecurable(this);
		}
	}


}



class TransactionModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_transactionMode;
    }

	ISOLATION() {
	    return this.getToken(SqlBaseParser.ISOLATION, 0);
	};

	LEVEL() {
	    return this.getToken(SqlBaseParser.LEVEL, 0);
	};

	isolationLevel() {
	    return this.getTypedRuleContext(IsolationLevelContext,0);
	};

	READ() {
	    return this.getToken(SqlBaseParser.READ, 0);
	};

	WRITE() {
	    return this.getToken(SqlBaseParser.WRITE, 0);
	};

	ONLY() {
	    return this.getToken(SqlBaseParser.ONLY, 0);
	};

	DEFERRABLE() {
	    return this.getToken(SqlBaseParser.DEFERRABLE, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterTransactionMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitTransactionMode(this);
		}
	}


}



class IsolationLevelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_isolationLevel;
    }

	SERIALIZABLE() {
	    return this.getToken(SqlBaseParser.SERIALIZABLE, 0);
	};

	REPEATABLE() {
	    return this.getToken(SqlBaseParser.REPEATABLE, 0);
	};

	READ() {
	    return this.getToken(SqlBaseParser.READ, 0);
	};

	COMMITTED() {
	    return this.getToken(SqlBaseParser.COMMITTED, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(SqlBaseParser.UNCOMMITTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterIsolationLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitIsolationLevel(this);
		}
	}


}



class DirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_direction;
    }

	NEXT() {
	    return this.getToken(SqlBaseParser.NEXT, 0);
	};

	PRIOR() {
	    return this.getToken(SqlBaseParser.PRIOR, 0);
	};

	FIRST() {
	    return this.getToken(SqlBaseParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(SqlBaseParser.LAST, 0);
	};

	ABSOLUTE() {
	    return this.getToken(SqlBaseParser.ABSOLUTE, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	RELATIVE() {
	    return this.getToken(SqlBaseParser.RELATIVE, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	FORWARD() {
	    return this.getToken(SqlBaseParser.FORWARD, 0);
	};

	BACKWARD() {
	    return this.getToken(SqlBaseParser.BACKWARD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDirection(this);
		}
	}


}



class DeclareCursorParamsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_declareCursorParams;
    }

	ASENSITIVE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.ASENSITIVE);
	    } else {
	        return this.getToken(SqlBaseParser.ASENSITIVE, i);
	    }
	};


	BINARY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.BINARY);
	    } else {
	        return this.getToken(SqlBaseParser.BINARY, i);
	    }
	};


	INSENSITIVE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.INSENSITIVE);
	    } else {
	        return this.getToken(SqlBaseParser.INSENSITIVE, i);
	    }
	};


	SCROLL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.SCROLL);
	    } else {
	        return this.getToken(SqlBaseParser.SCROLL, i);
	    }
	};


	NO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.NO);
	    } else {
	        return this.getToken(SqlBaseParser.NO, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterDeclareCursorParams(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitDeclareCursorParams(this);
		}
	}


}



class NonReservedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_nonReserved;
    }

	ABSOLUTE() {
	    return this.getToken(SqlBaseParser.ABSOLUTE, 0);
	};

	ALIAS() {
	    return this.getToken(SqlBaseParser.ALIAS, 0);
	};

	ALLOCATE() {
	    return this.getToken(SqlBaseParser.ALLOCATE, 0);
	};

	ALWAYS() {
	    return this.getToken(SqlBaseParser.ALWAYS, 0);
	};

	ANALYZE() {
	    return this.getToken(SqlBaseParser.ANALYZE, 0);
	};

	ANALYZER() {
	    return this.getToken(SqlBaseParser.ANALYZER, 0);
	};

	ARTIFACTS() {
	    return this.getToken(SqlBaseParser.ARTIFACTS, 0);
	};

	ASENSITIVE() {
	    return this.getToken(SqlBaseParser.ASENSITIVE, 0);
	};

	AT() {
	    return this.getToken(SqlBaseParser.AT, 0);
	};

	AUTHORIZATION() {
	    return this.getToken(SqlBaseParser.AUTHORIZATION, 0);
	};

	BACKWARD() {
	    return this.getToken(SqlBaseParser.BACKWARD, 0);
	};

	BEGIN() {
	    return this.getToken(SqlBaseParser.BEGIN, 0);
	};

	BERNOULLI() {
	    return this.getToken(SqlBaseParser.BERNOULLI, 0);
	};

	BINARY() {
	    return this.getToken(SqlBaseParser.BINARY, 0);
	};

	BLOB() {
	    return this.getToken(SqlBaseParser.BLOB, 0);
	};

	BOOLEAN() {
	    return this.getToken(SqlBaseParser.BOOLEAN, 0);
	};

	BOTH() {
	    return this.getToken(SqlBaseParser.BOTH, 0);
	};

	BYTE() {
	    return this.getToken(SqlBaseParser.BYTE, 0);
	};

	CANCEL() {
	    return this.getToken(SqlBaseParser.CANCEL, 0);
	};

	CASCADE() {
	    return this.getToken(SqlBaseParser.CASCADE, 0);
	};

	CATALOGS() {
	    return this.getToken(SqlBaseParser.CATALOGS, 0);
	};

	CHARACTER() {
	    return this.getToken(SqlBaseParser.CHARACTER, 0);
	};

	CHARACTERISTICS() {
	    return this.getToken(SqlBaseParser.CHARACTERISTICS, 0);
	};

	CHAR_FILTERS() {
	    return this.getToken(SqlBaseParser.CHAR_FILTERS, 0);
	};

	CHECK() {
	    return this.getToken(SqlBaseParser.CHECK, 0);
	};

	CLOSE() {
	    return this.getToken(SqlBaseParser.CLOSE, 0);
	};

	CLUSTER() {
	    return this.getToken(SqlBaseParser.CLUSTER, 0);
	};

	CLUSTERED() {
	    return this.getToken(SqlBaseParser.CLUSTERED, 0);
	};

	COLUMNS() {
	    return this.getToken(SqlBaseParser.COLUMNS, 0);
	};

	COMMIT() {
	    return this.getToken(SqlBaseParser.COMMIT, 0);
	};

	COMMITTED() {
	    return this.getToken(SqlBaseParser.COMMITTED, 0);
	};

	CONFLICT() {
	    return this.getToken(SqlBaseParser.CONFLICT, 0);
	};

	CONNECTION() {
	    return this.getToken(SqlBaseParser.CONNECTION, 0);
	};

	COPY() {
	    return this.getToken(SqlBaseParser.COPY, 0);
	};

	CURRENT() {
	    return this.getToken(SqlBaseParser.CURRENT, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(SqlBaseParser.CURRENT_DATE, 0);
	};

	CURRENT_SCHEMA() {
	    return this.getToken(SqlBaseParser.CURRENT_SCHEMA, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(SqlBaseParser.CURRENT_TIME, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
	};

	CURSOR() {
	    return this.getToken(SqlBaseParser.CURSOR, 0);
	};

	DANGLING() {
	    return this.getToken(SqlBaseParser.DANGLING, 0);
	};

	DATA() {
	    return this.getToken(SqlBaseParser.DATA, 0);
	};

	DAY() {
	    return this.getToken(SqlBaseParser.DAY, 0);
	};

	DEALLOCATE() {
	    return this.getToken(SqlBaseParser.DEALLOCATE, 0);
	};

	DECLARE() {
	    return this.getToken(SqlBaseParser.DECLARE, 0);
	};

	DECOMMISSION() {
	    return this.getToken(SqlBaseParser.DECOMMISSION, 0);
	};

	DEFERRABLE() {
	    return this.getToken(SqlBaseParser.DEFERRABLE, 0);
	};

	DISABLE() {
	    return this.getToken(SqlBaseParser.DISABLE, 0);
	};

	DISCARD() {
	    return this.getToken(SqlBaseParser.DISCARD, 0);
	};

	DISTRIBUTED() {
	    return this.getToken(SqlBaseParser.DISTRIBUTED, 0);
	};

	DO() {
	    return this.getToken(SqlBaseParser.DO, 0);
	};

	DOUBLE() {
	    return this.getToken(SqlBaseParser.DOUBLE, 0);
	};

	DUPLICATE() {
	    return this.getToken(SqlBaseParser.DUPLICATE, 0);
	};

	DYNAMIC() {
	    return this.getToken(SqlBaseParser.DYNAMIC, 0);
	};

	ENABLE() {
	    return this.getToken(SqlBaseParser.ENABLE, 0);
	};

	EXPLAIN() {
	    return this.getToken(SqlBaseParser.EXPLAIN, 0);
	};

	EXTENDS() {
	    return this.getToken(SqlBaseParser.EXTENDS, 0);
	};

	FAILED() {
	    return this.getToken(SqlBaseParser.FAILED, 0);
	};

	FETCH() {
	    return this.getToken(SqlBaseParser.FETCH, 0);
	};

	FILTER() {
	    return this.getToken(SqlBaseParser.FILTER, 0);
	};

	FLOAT() {
	    return this.getToken(SqlBaseParser.FLOAT, 0);
	};

	FOLLOWING() {
	    return this.getToken(SqlBaseParser.FOLLOWING, 0);
	};

	FOREIGN() {
	    return this.getToken(SqlBaseParser.FOREIGN, 0);
	};

	FORMAT() {
	    return this.getToken(SqlBaseParser.FORMAT, 0);
	};

	FORWARD() {
	    return this.getToken(SqlBaseParser.FORWARD, 0);
	};

	FULLTEXT() {
	    return this.getToken(SqlBaseParser.FULLTEXT, 0);
	};

	FUNCTIONS() {
	    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
	};

	GC() {
	    return this.getToken(SqlBaseParser.GC, 0);
	};

	GENERATED() {
	    return this.getToken(SqlBaseParser.GENERATED, 0);
	};

	GEO_POINT() {
	    return this.getToken(SqlBaseParser.GEO_POINT, 0);
	};

	GEO_SHAPE() {
	    return this.getToken(SqlBaseParser.GEO_SHAPE, 0);
	};

	GLOBAL() {
	    return this.getToken(SqlBaseParser.GLOBAL, 0);
	};

	GRAPHVIZ() {
	    return this.getToken(SqlBaseParser.GRAPHVIZ, 0);
	};

	HOLD() {
	    return this.getToken(SqlBaseParser.HOLD, 0);
	};

	HOUR() {
	    return this.getToken(SqlBaseParser.HOUR, 0);
	};

	IGNORE() {
	    return this.getToken(SqlBaseParser.IGNORE, 0);
	};

	IGNORED() {
	    return this.getToken(SqlBaseParser.IGNORED, 0);
	};

	ILIKE() {
	    return this.getToken(SqlBaseParser.ILIKE, 0);
	};

	INSENSITIVE() {
	    return this.getToken(SqlBaseParser.INSENSITIVE, 0);
	};

	INT() {
	    return this.getToken(SqlBaseParser.INT, 0);
	};

	INTEGER() {
	    return this.getToken(SqlBaseParser.INTEGER, 0);
	};

	INTERVAL() {
	    return this.getToken(SqlBaseParser.INTERVAL, 0);
	};

	IP() {
	    return this.getToken(SqlBaseParser.IP, 0);
	};

	ISOLATION() {
	    return this.getToken(SqlBaseParser.ISOLATION, 0);
	};

	KEY() {
	    return this.getToken(SqlBaseParser.KEY, 0);
	};

	KILL() {
	    return this.getToken(SqlBaseParser.KILL, 0);
	};

	LANGUAGE() {
	    return this.getToken(SqlBaseParser.LANGUAGE, 0);
	};

	LEADING() {
	    return this.getToken(SqlBaseParser.LEADING, 0);
	};

	LEVEL() {
	    return this.getToken(SqlBaseParser.LEVEL, 0);
	};

	LOCAL() {
	    return this.getToken(SqlBaseParser.LOCAL, 0);
	};

	LOGICAL() {
	    return this.getToken(SqlBaseParser.LOGICAL, 0);
	};

	LONG() {
	    return this.getToken(SqlBaseParser.LONG, 0);
	};

	MAPPING() {
	    return this.getToken(SqlBaseParser.MAPPING, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SqlBaseParser.MATERIALIZED, 0);
	};

	METADATA() {
	    return this.getToken(SqlBaseParser.METADATA, 0);
	};

	MINUTE() {
	    return this.getToken(SqlBaseParser.MINUTE, 0);
	};

	MONTH() {
	    return this.getToken(SqlBaseParser.MONTH, 0);
	};

	MOVE() {
	    return this.getToken(SqlBaseParser.MOVE, 0);
	};

	NEXT() {
	    return this.getToken(SqlBaseParser.NEXT, 0);
	};

	NO() {
	    return this.getToken(SqlBaseParser.NO, 0);
	};

	NOTHING() {
	    return this.getToken(SqlBaseParser.NOTHING, 0);
	};

	OFF() {
	    return this.getToken(SqlBaseParser.OFF, 0);
	};

	ONLY() {
	    return this.getToken(SqlBaseParser.ONLY, 0);
	};

	OPEN() {
	    return this.getToken(SqlBaseParser.OPEN, 0);
	};

	OPTIMIZE() {
	    return this.getToken(SqlBaseParser.OPTIMIZE, 0);
	};

	OPTIONS() {
	    return this.getToken(SqlBaseParser.OPTIONS, 0);
	};

	OVER() {
	    return this.getToken(SqlBaseParser.OVER, 0);
	};

	PARTITION() {
	    return this.getToken(SqlBaseParser.PARTITION, 0);
	};

	PARTITIONED() {
	    return this.getToken(SqlBaseParser.PARTITIONED, 0);
	};

	PARTITIONS() {
	    return this.getToken(SqlBaseParser.PARTITIONS, 0);
	};

	PLAIN() {
	    return this.getToken(SqlBaseParser.PLAIN, 0);
	};

	PLANS() {
	    return this.getToken(SqlBaseParser.PLANS, 0);
	};

	PRECEDING() {
	    return this.getToken(SqlBaseParser.PRECEDING, 0);
	};

	PRECISION() {
	    return this.getToken(SqlBaseParser.PRECISION, 0);
	};

	PREPARE() {
	    return this.getToken(SqlBaseParser.PREPARE, 0);
	};

	PRIOR() {
	    return this.getToken(SqlBaseParser.PRIOR, 0);
	};

	PRIVILEGES() {
	    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
	};

	PROMOTE() {
	    return this.getToken(SqlBaseParser.PROMOTE, 0);
	};

	PUBLICATION() {
	    return this.getToken(SqlBaseParser.PUBLICATION, 0);
	};

	RANGE() {
	    return this.getToken(SqlBaseParser.RANGE, 0);
	};

	READ() {
	    return this.getToken(SqlBaseParser.READ, 0);
	};

	REFRESH() {
	    return this.getToken(SqlBaseParser.REFRESH, 0);
	};

	RELATIVE() {
	    return this.getToken(SqlBaseParser.RELATIVE, 0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	REPEATABLE() {
	    return this.getToken(SqlBaseParser.REPEATABLE, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	REPLICA() {
	    return this.getToken(SqlBaseParser.REPLICA, 0);
	};

	REPOSITORY() {
	    return this.getToken(SqlBaseParser.REPOSITORY, 0);
	};

	REROUTE() {
	    return this.getToken(SqlBaseParser.REROUTE, 0);
	};

	RESPECT() {
	    return this.getToken(SqlBaseParser.RESPECT, 0);
	};

	RESTORE() {
	    return this.getToken(SqlBaseParser.RESTORE, 0);
	};

	RESTRICT() {
	    return this.getToken(SqlBaseParser.RESTRICT, 0);
	};

	RETRY() {
	    return this.getToken(SqlBaseParser.RETRY, 0);
	};

	RETURN() {
	    return this.getToken(SqlBaseParser.RETURN, 0);
	};

	RETURNING() {
	    return this.getToken(SqlBaseParser.RETURNING, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(SqlBaseParser.ROWS, 0);
	};

	SCHEMA() {
	    return this.getToken(SqlBaseParser.SCHEMA, 0);
	};

	SCHEMAS() {
	    return this.getToken(SqlBaseParser.SCHEMAS, 0);
	};

	SCROLL() {
	    return this.getToken(SqlBaseParser.SCROLL, 0);
	};

	SECOND() {
	    return this.getToken(SqlBaseParser.SECOND, 0);
	};

	SEQUENCES() {
	    return this.getToken(SqlBaseParser.SEQUENCES, 0);
	};

	SERIALIZABLE() {
	    return this.getToken(SqlBaseParser.SERIALIZABLE, 0);
	};

	SERVER() {
	    return this.getToken(SqlBaseParser.SERVER, 0);
	};

	SESSION() {
	    return this.getToken(SqlBaseParser.SESSION, 0);
	};

	SHARD() {
	    return this.getToken(SqlBaseParser.SHARD, 0);
	};

	SHARDS() {
	    return this.getToken(SqlBaseParser.SHARDS, 0);
	};

	SHORT() {
	    return this.getToken(SqlBaseParser.SHORT, 0);
	};

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	SNAPSHOT() {
	    return this.getToken(SqlBaseParser.SNAPSHOT, 0);
	};

	START() {
	    return this.getToken(SqlBaseParser.START, 0);
	};

	STORAGE() {
	    return this.getToken(SqlBaseParser.STORAGE, 0);
	};

	STRICT() {
	    return this.getToken(SqlBaseParser.STRICT, 0);
	};

	STRING_TYPE() {
	    return this.getToken(SqlBaseParser.STRING_TYPE, 0);
	};

	SUBSCRIPTION() {
	    return this.getToken(SqlBaseParser.SUBSCRIPTION, 0);
	};

	SUBSTRING() {
	    return this.getToken(SqlBaseParser.SUBSTRING, 0);
	};

	SUMMARY() {
	    return this.getToken(SqlBaseParser.SUMMARY, 0);
	};

	SWAP() {
	    return this.getToken(SqlBaseParser.SWAP, 0);
	};

	SYSTEM() {
	    return this.getToken(SqlBaseParser.SYSTEM, 0);
	};

	TABLES() {
	    return this.getToken(SqlBaseParser.TABLES, 0);
	};

	TABLESAMPLE() {
	    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
	};

	TEMP() {
	    return this.getToken(SqlBaseParser.TEMP, 0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	TEXT() {
	    return this.getToken(SqlBaseParser.TEXT, 0);
	};

	TIME() {
	    return this.getToken(SqlBaseParser.TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(SqlBaseParser.TIMESTAMP, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	TOKENIZER() {
	    return this.getToken(SqlBaseParser.TOKENIZER, 0);
	};

	TOKEN_FILTERS() {
	    return this.getToken(SqlBaseParser.TOKEN_FILTERS, 0);
	};

	TRAILING() {
	    return this.getToken(SqlBaseParser.TRAILING, 0);
	};

	TRANSACTION() {
	    return this.getToken(SqlBaseParser.TRANSACTION, 0);
	};

	TRANSACTION_ISOLATION() {
	    return this.getToken(SqlBaseParser.TRANSACTION_ISOLATION, 0);
	};

	TRIM() {
	    return this.getToken(SqlBaseParser.TRIM, 0);
	};

	TYPE() {
	    return this.getToken(SqlBaseParser.TYPE, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(SqlBaseParser.UNCOMMITTED, 0);
	};

	VALUES() {
	    return this.getToken(SqlBaseParser.VALUES, 0);
	};

	VARYING() {
	    return this.getToken(SqlBaseParser.VARYING, 0);
	};

	VERBOSE() {
	    return this.getToken(SqlBaseParser.VERBOSE, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	WINDOW() {
	    return this.getToken(SqlBaseParser.WINDOW, 0);
	};

	WITHOUT() {
	    return this.getToken(SqlBaseParser.WITHOUT, 0);
	};

	WORK() {
	    return this.getToken(SqlBaseParser.WORK, 0);
	};

	WRAPPER() {
	    return this.getToken(SqlBaseParser.WRAPPER, 0);
	};

	WRITE() {
	    return this.getToken(SqlBaseParser.WRITE, 0);
	};

	YEAR() {
	    return this.getToken(SqlBaseParser.YEAR, 0);
	};

	ZONE() {
	    return this.getToken(SqlBaseParser.ZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.enterNonReserved(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseParserListener ) {
	        listener.exitNonReserved(this);
		}
	}


}




SqlBaseParser.StatementsContext = StatementsContext; 
SqlBaseParser.SingleStatementContext = SingleStatementContext; 
SqlBaseParser.SingleExpressionContext = SingleExpressionContext; 
SqlBaseParser.StatementContext = StatementContext; 
SqlBaseParser.DropStmtContext = DropStmtContext; 
SqlBaseParser.AlterStmtContext = AlterStmtContext; 
SqlBaseParser.QueryOptParensContext = QueryOptParensContext; 
SqlBaseParser.QueryContext = QueryContext; 
SqlBaseParser.QueryNoWithContext = QueryNoWithContext; 
SqlBaseParser.LimitClauseContext = LimitClauseContext; 
SqlBaseParser.OffsetClauseContext = OffsetClauseContext; 
SqlBaseParser.QueryTermContext = QueryTermContext; 
SqlBaseParser.SetQuantContext = SetQuantContext; 
SqlBaseParser.SortItemContext = SortItemContext; 
SqlBaseParser.QuerySpecContext = QuerySpecContext; 
SqlBaseParser.SelectItemContext = SelectItemContext; 
SqlBaseParser.WhereContext = WhereContext; 
SqlBaseParser.ReturningContext = ReturningContext; 
SqlBaseParser.FilterContext = FilterContext; 
SqlBaseParser.RelationContext = RelationContext; 
SqlBaseParser.JoinTypeContext = JoinTypeContext; 
SqlBaseParser.JoinCriteriaContext = JoinCriteriaContext; 
SqlBaseParser.AliasedRelationContext = AliasedRelationContext; 
SqlBaseParser.RelationPrimaryContext = RelationPrimaryContext; 
SqlBaseParser.TableWithPartitionContext = TableWithPartitionContext; 
SqlBaseParser.TableContext = TableContext; 
SqlBaseParser.AliasedColumnsContext = AliasedColumnsContext; 
SqlBaseParser.WithContext = WithContext; 
SqlBaseParser.NamedQueryContext = NamedQueryContext; 
SqlBaseParser.ExprContext = ExprContext; 
SqlBaseParser.BooleanExpressionContext = BooleanExpressionContext; 
SqlBaseParser.PredicatedContext = PredicatedContext; 
SqlBaseParser.PredicateContext = PredicateContext; 
SqlBaseParser.ValueExpressionContext = ValueExpressionContext; 
SqlBaseParser.PrimaryExpressionContext = PrimaryExpressionContext; 
SqlBaseParser.ExplicitFunctionContext = ExplicitFunctionContext; 
SqlBaseParser.SubqueryExpressionContext = SubqueryExpressionContext; 
SqlBaseParser.ParameterOrLiteralContext = ParameterOrLiteralContext; 
SqlBaseParser.ParameterOrSimpleLiteralContext = ParameterOrSimpleLiteralContext; 
SqlBaseParser.ParameterOrIntegerContext = ParameterOrIntegerContext; 
SqlBaseParser.ParameterOrIdentContext = ParameterOrIdentContext; 
SqlBaseParser.ParameterOrStringContext = ParameterOrStringContext; 
SqlBaseParser.ParameterExprContext = ParameterExprContext; 
SqlBaseParser.NullLiteralContext = NullLiteralContext; 
SqlBaseParser.EscapedCharsStringLiteralContext = EscapedCharsStringLiteralContext; 
SqlBaseParser.DollarQuotedStringLiteralContext = DollarQuotedStringLiteralContext; 
SqlBaseParser.StringLiteralContext = StringLiteralContext; 
SqlBaseParser.BitStringContext = BitStringContext; 
SqlBaseParser.SubscriptSafeContext = SubscriptSafeContext; 
SqlBaseParser.CmpOpContext = CmpOpContext; 
SqlBaseParser.SetCmpQuantifierContext = SetCmpQuantifierContext; 
SqlBaseParser.WhenClauseContext = WhenClauseContext; 
SqlBaseParser.NamedWindowContext = NamedWindowContext; 
SqlBaseParser.OverContext = OverContext; 
SqlBaseParser.WindowDefinitionContext = WindowDefinitionContext; 
SqlBaseParser.WindowFrameContext = WindowFrameContext; 
SqlBaseParser.FrameBoundContext = FrameBoundContext; 
SqlBaseParser.QnamesContext = QnamesContext; 
SqlBaseParser.QnameContext = QnameContext; 
SqlBaseParser.SpaceSeparatedIdentsContext = SpaceSeparatedIdentsContext; 
SqlBaseParser.IdentWithOrWithoutValueContext = IdentWithOrWithoutValueContext; 
SqlBaseParser.IdentsContext = IdentsContext; 
SqlBaseParser.IdentContext = IdentContext; 
SqlBaseParser.UnquotedIdentContext = UnquotedIdentContext; 
SqlBaseParser.QuotedIdentContext = QuotedIdentContext; 
SqlBaseParser.StringLiteralOrIdentifierContext = StringLiteralOrIdentifierContext; 
SqlBaseParser.StringLiteralOrIdentifierOrQnameContext = StringLiteralOrIdentifierOrQnameContext; 
SqlBaseParser.NumericLiteralContext = NumericLiteralContext; 
SqlBaseParser.IntervalLiteralContext = IntervalLiteralContext; 
SqlBaseParser.IntervalFieldContext = IntervalFieldContext; 
SqlBaseParser.BooleanLiteralContext = BooleanLiteralContext; 
SqlBaseParser.DecimalLiteralContext = DecimalLiteralContext; 
SqlBaseParser.IntegerLiteralContext = IntegerLiteralContext; 
SqlBaseParser.ObjectKeyValueContext = ObjectKeyValueContext; 
SqlBaseParser.InsertSourceContext = InsertSourceContext; 
SqlBaseParser.OnConflictContext = OnConflictContext; 
SqlBaseParser.ConflictTargetContext = ConflictTargetContext; 
SqlBaseParser.ValuesContext = ValuesContext; 
SqlBaseParser.ColumnsContext = ColumnsContext; 
SqlBaseParser.AssignmentContext = AssignmentContext; 
SqlBaseParser.CreateStmtContext = CreateStmtContext; 
SqlBaseParser.MappedUserContext = MappedUserContext; 
SqlBaseParser.KvOptionsContext = KvOptionsContext; 
SqlBaseParser.KvOptionContext = KvOptionContext; 
SqlBaseParser.FunctionArgumentContext = FunctionArgumentContext; 
SqlBaseParser.AlterTableDefinitionContext = AlterTableDefinitionContext; 
SqlBaseParser.AlterSubscriptionModeContext = AlterSubscriptionModeContext; 
SqlBaseParser.PartitionedByOrClusteredIntoContext = PartitionedByOrClusteredIntoContext; 
SqlBaseParser.PartitionedByContext = PartitionedByContext; 
SqlBaseParser.ClusteredByContext = ClusteredByContext; 
SqlBaseParser.BlobClusteredIntoContext = BlobClusteredIntoContext; 
SqlBaseParser.TableElementContext = TableElementContext; 
SqlBaseParser.ColumnDefinitionContext = ColumnDefinitionContext; 
SqlBaseParser.AddColumnDefinitionContext = AddColumnDefinitionContext; 
SqlBaseParser.DropColumnDefinitionContext = DropColumnDefinitionContext; 
SqlBaseParser.RerouteOptionContext = RerouteOptionContext; 
SqlBaseParser.DataTypeContext = DataTypeContext; 
SqlBaseParser.BaseDataTypeContext = BaseDataTypeContext; 
SqlBaseParser.DefinedDataTypeContext = DefinedDataTypeContext; 
SqlBaseParser.ObjectTypeDefinitionContext = ObjectTypeDefinitionContext; 
SqlBaseParser.ColumnConstraintContext = ColumnConstraintContext; 
SqlBaseParser.PrimaryKeyContraintContext = PrimaryKeyContraintContext; 
SqlBaseParser.CheckConstraintContext = CheckConstraintContext; 
SqlBaseParser.WithPropertiesContext = WithPropertiesContext; 
SqlBaseParser.GenericPropertiesContext = GenericPropertiesContext; 
SqlBaseParser.GenericPropertyContext = GenericPropertyContext; 
SqlBaseParser.ExplainOptionsContext = ExplainOptionsContext; 
SqlBaseParser.ExplainOptionContext = ExplainOptionContext; 
SqlBaseParser.MatchPredicateIdentsContext = MatchPredicateIdentsContext; 
SqlBaseParser.MatchPredicateIdentContext = MatchPredicateIdentContext; 
SqlBaseParser.AnalyzerElementContext = AnalyzerElementContext; 
SqlBaseParser.TokenizerContext = TokenizerContext; 
SqlBaseParser.TokenFiltersContext = TokenFiltersContext; 
SqlBaseParser.CharFiltersContext = CharFiltersContext; 
SqlBaseParser.NamedPropertiesContext = NamedPropertiesContext; 
SqlBaseParser.TableWithPartitionsContext = TableWithPartitionsContext; 
SqlBaseParser.SetGlobalAssignmentContext = SetGlobalAssignmentContext; 
SqlBaseParser.SetExprContext = SetExprContext; 
SqlBaseParser.OnContext = OnContext; 
SqlBaseParser.SecurableContext = SecurableContext; 
SqlBaseParser.TransactionModeContext = TransactionModeContext; 
SqlBaseParser.IsolationLevelContext = IsolationLevelContext; 
SqlBaseParser.DirectionContext = DirectionContext; 
SqlBaseParser.DeclareCursorParamsContext = DeclareCursorParamsContext; 
SqlBaseParser.NonReservedContext = NonReservedContext; 
